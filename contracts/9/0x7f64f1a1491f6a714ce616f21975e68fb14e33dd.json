{
  "address": "0x7f64f1a1491f6a714ce616f21975e68fb14e33dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Proxy",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity ^0.4.21;\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract LockRequestable {\n\n    uint256 public lockRequestCount;\n\n    function LockRequestable() public {\n        lockRequestCount = 0;\n    }\n\n    function generateLockId() internal returns (bytes32 lockId) {\n        return keccak256(block.blockhash(block.number - 1), address(this), ++lockRequestCount);\n    }\n}\n\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract CustodianUpgradeable is LockRequestable {\n\n    struct CustodianChangeRequest {\n        address proposedNew;\n    }\n\n    address public custodian;\n\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\n\n    function CustodianUpgradeable(\n        address _custodian\n    )\n      LockRequestable()\n      public\n    {\n        custodian = _custodian;\n    }\n\n    modifier onlyCustodian {\n        require(msg.sender == custodian);\n        _;\n    }\n\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\n        require(_proposedCustodian != address(0));\n\n        lockId = generateLockId();\n\n        custodianChangeReqs[lockId] = CustodianChangeRequest({\n            proposedNew: _proposedCustodian\n        });\n\n        emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\n    }\n\n    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\n        custodian = getCustodianChangeReq(_lockId);\n\n        delete custodianChangeReqs[_lockId];\n\n        emit CustodianChangeConfirmed(_lockId, custodian);\n    }\n\n    function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\n        CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\n\n        require(changeRequest.proposedNew != 0);\n\n        return changeRequest.proposedNew;\n    }\n\n    event CustodianChangeRequested(\n        bytes32 _lockId,\n        address _msgSender,\n        address _proposedCustodian\n    );\n\n    event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\n}\n\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract ERC20ImplUpgradeable is CustodianUpgradeable  {\n\n    struct ImplChangeRequest {\n        address proposedNew;\n    }\n\n    ERC20Impl public erc20Impl;\n\n    mapping (bytes32 => ImplChangeRequest) public implChangeReqs;\n\n    function ERC20ImplUpgradeable(address _custodian) CustodianUpgradeable(_custodian) public {\n        erc20Impl = ERC20Impl(0x0);\n    }\n\n    modifier onlyImpl {\n        require(msg.sender == address(erc20Impl));\n        _;\n    }\n\n    function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {\n        require(_proposedImpl != address(0));\n\n        lockId = generateLockId();\n\n        implChangeReqs[lockId] = ImplChangeRequest({\n            proposedNew: _proposedImpl\n        });\n\n        emit ImplChangeRequested(lockId, msg.sender, _proposedImpl);\n    }\n\n    function confirmImplChange(bytes32 _lockId) public onlyCustodian {\n        erc20Impl = getImplChangeReq(_lockId);\n\n        delete implChangeReqs[_lockId];\n\n        emit ImplChangeConfirmed(_lockId, address(erc20Impl));\n    }\n\n    function getImplChangeReq(bytes32 _lockId) private view returns (ERC20Impl _proposedNew) {\n        ImplChangeRequest storage changeRequest = implChangeReqs[_lockId];\n\n        require(changeRequest.proposedNew != address(0));\n\n        return ERC20Impl(changeRequest.proposedNew);\n    }\n\n    event ImplChangeRequested(\n        bytes32 _lockId,\n        address _msgSender,\n        address _proposedImpl\n    );\n\n    event ImplChangeConfirmed(bytes32 _lockId, address _newImpl);\n}\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract ERC20Interface {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _owner) public view returns (uint256 balance);\n\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable {\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public decimals;\n\n    function ERC20Proxy(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        address _custodian\n    )\n        ERC20ImplUpgradeable(_custodian)\n        public\n    {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return erc20Impl.totalSupply();\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return erc20Impl.balanceOf(_owner);\n    }\n\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {\n        emit Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return erc20Impl.transferWithSender(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);\n    }\n\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {\n        emit Approval(_owner, _spender, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        return erc20Impl.approveWithSender(msg.sender, _spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\n        return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\n        return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return erc20Impl.allowance(_owner, _spender);\n    }\n}\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract ERC20Impl is CustodianUpgradeable {\n\n    struct PendingPrint {\n        address receiver;\n        uint256 value;\n    }\n\n    ERC20Proxy public erc20Proxy;\n\n    ERC20Store public erc20Store;\n\n    address public sweeper;\n\n    bytes32 public sweepMsg;\n\n    mapping (address => bool) public sweptSet;\n\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\n\n    function ERC20Impl(\n          address _erc20Proxy,\n          address _erc20Store,\n          address _custodian,\n          address _sweeper\n    )\n        CustodianUpgradeable(_custodian)\n        public\n    {\n        require(_sweeper != 0);\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\n        erc20Store = ERC20Store(_erc20Store);\n\n        sweeper = _sweeper;\n        sweepMsg = keccak256(address(this), \"sweep\");\n    }\n\n    modifier onlyProxy {\n        require(msg.sender == address(erc20Proxy));\n        _;\n    }\n    modifier onlySweeper {\n        require(msg.sender == sweeper);\n        _;\n    }\n\n\n    function approveWithSender(\n        address _sender,\n        address _spender,\n        uint256 _value\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_spender != address(0));\n        erc20Store.setAllowance(_sender, _spender, _value);\n        erc20Proxy.emitApproval(_sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApprovalWithSender(\n        address _sender,\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_spender != address(0));\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\n        uint256 newAllowance = currentAllowance + _addedValue;\n\n        require(newAllowance >= currentAllowance);\n\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\n        return true;\n    }\n\n    function decreaseApprovalWithSender(\n        address _sender,\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_spender != address(0));\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\n        uint256 newAllowance = currentAllowance - _subtractedValue;\n\n        require(newAllowance <= currentAllowance);\n\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\n        return true;\n    }\n\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {\n        require(_receiver != address(0));\n\n        lockId = generateLockId();\n\n        pendingPrintMap[lockId] = PendingPrint({\n            receiver: _receiver,\n            value: _value\n        });\n\n        emit PrintingLocked(lockId, _receiver, _value);\n    }\n\n    function confirmPrint(bytes32 _lockId) public onlyCustodian {\n        PendingPrint storage print = pendingPrintMap[_lockId];\n\n        address receiver = print.receiver;\n        require (receiver != address(0));\n        uint256 value = print.value;\n\n        delete pendingPrintMap[_lockId];\n\n        uint256 supply = erc20Store.totalSupply();\n        uint256 newSupply = supply + value;\n        if (newSupply >= supply) {\n          erc20Store.setTotalSupply(newSupply);\n          erc20Store.addBalance(receiver, value);\n\n          emit PrintingConfirmed(_lockId, receiver, value);\n          erc20Proxy.emitTransfer(address(0), receiver, value);\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        uint256 balanceOfSender = erc20Store.balances(msg.sender);\n        require(_value <= balanceOfSender);\n\n        erc20Store.setBalance(msg.sender, balanceOfSender - _value);\n        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\n\n        erc20Proxy.emitTransfer(msg.sender, address(0), _value);\n\n        return true;\n    }\n\n    function batchTransfer(address[] _tos, uint256[] _values) public returns (bool success) {\n        require(_tos.length == _values.length);\n\n        uint256 numTransfers = _tos.length;\n        uint256 senderBalance = erc20Store.balances(msg.sender);\n\n        for (uint256 i = 0; i < numTransfers; i++) {\n          address to = _tos[i];\n          require(to != address(0));\n          uint256 v = _values[i];\n          require(senderBalance >= v);\n\n          if (msg.sender != to) {\n            senderBalance -= v;\n            erc20Store.addBalance(to, v);\n          }\n          erc20Proxy.emitTransfer(msg.sender, to, v);\n        }\n\n        erc20Store.setBalance(msg.sender, senderBalance);\n\n        return true;\n    }\n\n    function enableSweep(uint8[] _vs, bytes32[] _rs, bytes32[] _ss, address _to) public onlySweeper {\n        require(_to != address(0));\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length));\n\n        uint256 numSignatures = _vs.length;\n        uint256 sweptBalance = 0;\n\n        for (uint256 i=0; i<numSignatures; ++i) {\n          address from = ecrecover(sweepMsg, _vs[i], _rs[i], _ss[i]);\n\n          if (from != address(0)) {\n            sweptSet[from] = true;\n\n            uint256 fromBalance = erc20Store.balances(from);\n\n            if (fromBalance > 0) {\n              sweptBalance += fromBalance;\n\n              erc20Store.setBalance(from, 0);\n\n              erc20Proxy.emitTransfer(from, _to, fromBalance);\n            }\n          }\n        }\n\n        if (sweptBalance > 0) {\n          erc20Store.addBalance(_to, sweptBalance);\n        }\n    }\n\n    function replaySweep(address[] _froms, address _to) public onlySweeper {\n        require(_to != address(0));\n        uint256 lenFroms = _froms.length;\n        uint256 sweptBalance = 0;\n\n        for (uint256 i=0; i<lenFroms; ++i) {\n            address from = _froms[i];\n\n            if (sweptSet[from]) {\n                uint256 fromBalance = erc20Store.balances(from);\n\n                if (fromBalance > 0) {\n                    sweptBalance += fromBalance;\n\n                    erc20Store.setBalance(from, 0);\n\n                    erc20Proxy.emitTransfer(from, _to, fromBalance);\n                }\n            }\n        }\n\n        if (sweptBalance > 0) {\n            erc20Store.addBalance(_to, sweptBalance);\n        }\n    }\n\n    function transferFromWithSender(\n        address _sender,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_to != address(0));\n\n        uint256 balanceOfFrom = erc20Store.balances(_from);\n        require(_value <= balanceOfFrom);\n\n        uint256 senderAllowance = erc20Store.allowed(_from, _sender);\n        require(_value <= senderAllowance);\n\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\n        erc20Store.addBalance(_to, _value);\n\n        erc20Store.setAllowance(_from, _sender, senderAllowance - _value);\n\n        erc20Proxy.emitTransfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transferWithSender(\n        address _sender,\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_to != address(0));\n\n        uint256 balanceOfSender = erc20Store.balances(_sender);\n        require(_value <= balanceOfSender);\n\n        erc20Store.setBalance(_sender, balanceOfSender - _value);\n        erc20Store.addBalance(_to, _value);\n\n        erc20Proxy.emitTransfer(_sender, _to, _value);\n\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return erc20Store.totalSupply();\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return erc20Store.balances(_owner);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return erc20Store.allowed(_owner, _spender);\n    }\n\n    event PrintingLocked(bytes32 _lockId, address _receiver, uint256 _value);\n    event PrintingConfirmed(bytes32 _lockId, address _receiver, uint256 _value);\n}\n\n\n/** @title  KRWT contract\n  *\n  * @author  Hansung Future Co.,Ltd\n  */\ncontract ERC20Store is ERC20ImplUpgradeable {\n\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balances;\n\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    function ERC20Store(address _custodian) ERC20ImplUpgradeable(_custodian) public {\n        totalSupply = 0;\n    }\n\n    function setTotalSupply(\n        uint256 _newTotalSupply\n    )\n        public\n        onlyImpl\n    {\n        totalSupply = _newTotalSupply;\n    }\n\n    function setAllowance(\n        address _owner,\n        address _spender,\n        uint256 _value\n    )\n        public\n        onlyImpl\n    {\n        allowed[_owner][_spender] = _value;\n    }\n\n    function setBalance(\n        address _owner,\n        uint256 _newBalance\n    )\n        public\n        onlyImpl\n    {\n        balances[_owner] = _newBalance;\n    }\n\n    function addBalance(\n        address _owner,\n        uint256 _balanceIncrease\n    )\n        public\n        onlyImpl\n    {\n        balances[_owner] = balances[_owner] + _balanceIncrease;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Impl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"requestImplChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmImplChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"implChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b60405162001e6238038062001e628339810160405280805182019190602001805182019190602001805190602001909190805190602001909190505080806000808190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360059080519060200190620000f292919062000131565b5082600690805190602001906200010b92919062000131565b5081600760006101000a81548160ff021916908360ff16021790555050505050620001e0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017457805160ff1916838001178555620001a5565b82800160010185558215620001a5579182015b82811115620001a457825182559160200191906001019062000187565b5b509050620001b49190620001b8565b5090565b620001dd91905b80821115620001d9576000816000905550600101620001bf565b5090565b90565b611c7280620001f06000396000f300606060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bb57806315b210821461021557806318160ddd1461026a57806323b872dd1461029357806323de66511461030c578063313ce5671461036d578063375b74c31461039c5780633a8343ee146103f15780633c389cc41461041857806348f9e2461461046d5780635687f2b8146104c2578063661884631461052357806370a082311461057d5780638181b029146105ca57806395d89b41146105f1578063a9059cbb1461067f578063b508069b146106d9578063cb81fecf14610740578063cf6e448814610769578063d73dd623146107d0578063dd62ed3e1461082a575b600080fd5b341561013857600080fd5b610140610896565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101fb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610934565b604051808215151515815260200191505060405180910390f35b341561022057600080fd5b61024c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a4d565b60405180826000191660001916815260200191505060405180910390f35b341561027557600080fd5b61027d610bcb565b6040518082815260200191505060405180910390f35b341561029e57600080fd5b6102f2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c6e565b604051808215151515815260200191505060405180910390f35b341561031757600080fd5b61036b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610dbc565b005b341561037857600080fd5b610380610e82565b604051808260ff1660ff16815260200191505060405180910390f35b34156103a757600080fd5b6103af610e95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103fc57600080fd5b610416600480803560001916906020019091905050610ebb565b005b341561042357600080fd5b61042b61103d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047857600080fd5b6104a4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611063565b60405180826000191660001916815260200191505060405180910390f35b34156104cd57600080fd5b610521600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111e1565b005b341561052e57600080fd5b610563600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112a7565b604051808215151515815260200191505060405180910390f35b341561058857600080fd5b6105b4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113c0565b6040518082815260200191505060405180910390f35b34156105d557600080fd5b6105ef60048080356000191690602001909190505061149c565b005b34156105fc57600080fd5b61060461161e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610644578082015181840152602081019050610629565b50505050905090810190601f1680156106715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561068a57600080fd5b6106bf600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506116bc565b604051808215151515815260200191505060405180910390f35b34156106e457600080fd5b6106fe6004808035600019169060200190919050506117d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561074b57600080fd5b610753611813565b6040518082815260200191505060405180910390f35b341561077457600080fd5b61078e600480803560001916906020019091905050611819565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107db57600080fd5b610810600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611857565b604051808215151515815260200191505060405180910390f35b341561083557600080fd5b610880600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611970565b6040518082815260200191505060405180910390f35b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092c5780601f106109015761010080835404028352916020019161092c565b820191906000526020600020905b81548152906001019060200180831161090f57829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389064fd23385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610a2e57600080fd5b5af11515610a3b57600080fd5b50505060405180519050905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a8a57600080fd5b610a92611a81565b90506020604051908101604052808373ffffffffffffffffffffffffffffffffffffffff1681525060026000836000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fd76fc900a7e1a6fcf11d54b7ba943918df6c53a3128140658c389b3da1e997ba8133846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610c5257600080fd5b5af11515610c5f57600080fd5b50505060405180519050905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d5e22cd338686866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b1515610d9c57600080fd5b5af11515610da957600080fd5b5050506040518051905090509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600760009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1757600080fd5b610f2081611b02565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260008260001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9a99272c0f6b7a30ef9e76e684a7cd408bfd4f11a72f36a8e276253c920e442d81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156110a057600080fd5b6110a8611a81565b90506020604051908101604052808373ffffffffffffffffffffffffffffffffffffffff1681525060046000836000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f5df12834436b8dc248df3f7f1796a3e39f851d610be49cdcd92514fa821b9f978133846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123d57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361e1077d3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15156113a157600080fd5b5af115156113ae57600080fd5b50505060405180519050905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561147e57600080fd5b5af1151561148b57600080fd5b505050604051805190509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f857600080fd5b61150181611b99565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008260001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9d55b0349a0a4c5b511f72228170bb91d45c9ac78dba8ab5b4175d3ed42f06b381600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116b45780601f10611689576101008083540402835291602001916116b4565b820191906000526020600020905b81548152906001019060200180831161169757829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfe0f0ca3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15156117b657600080fd5b5af115156117c357600080fd5b50505060405180519050905092915050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b60005481565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e0179b53385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561195157600080fd5b5af1151561195e57600080fd5b50505060405180519050905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515611a6257600080fd5b5af11515611a6f57600080fd5b50505060405180519050905092915050565b600060014303403060008081546001019190508190556040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020905090565b600080600260008460001916600019168152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611b6c57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000806004600084600019166000191681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611c1957600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509190505600a165627a7a723058208541b808d5d894ce430d5567d51003d95e11042fd28a5988da5145d4c7c65d430029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000016c877798a3aa14b69663edeff1ccd649e715cac00000000000000000000000000000000000000000000000000000000000000094b525720546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044b52575400000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000016c877798a3aa14b69663edeff1ccd649e715cac00000000000000000000000000000000000000000000000000000000000000094b525720546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044b52575400000000000000000000000000000000000000000000000000000000"
}