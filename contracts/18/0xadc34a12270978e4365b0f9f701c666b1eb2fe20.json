{
  "address": "0xadc34a12270978e4365b0f9f701c666b1eb2fe20",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UnionTokens",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       revert();\n     }\n     _;\n  }\n  \n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    onlyPayloadSize(3 * 32)\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint _value) whenNotPaused public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) whenNotPaused public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }    \n    \n}\n\ncontract UnionTokens is PausableToken {\n    string public constant name = \"UnionTokens\";\n    string public constant symbol = \"UNION\";\n    uint8 public constant decimals = 6;\n\n    address public team1 = address(0x945835787779ca81cc6a5bf88276c5650edae881);\n    address public team2 = address(0xa0fad303c2b167a24d6e29e4b1e71879c6a9036b);\n    address public foundation = address(0x9871ed8Fd953E58F2D47a5D8618D8EBF2F49bb51);\n    address public partner = address(0xe7f56c56546d85323f2c60ea640a99542569c7f1);\n    address public ido = address(0xc9df47746cb76c38e4a54bbdbe21f168cc109533);\n    address public operate = address(0x0b1859ce0faba7e7347c22d01333d5f2bdb37acf);\n    \n    constructor() public {\n        totalSupply_ = 10 * (10 ** 8) * (10 ** uint256(decimals));\t//Total Supply 1 billion\n        balances[team1] = totalSupply_ * 15 / 100;\t\t\t\t\t//Team1 15%\n        balances[team2] = totalSupply_ * 5 / 100;\t\t\t\t    //Team2 5%\n        balances[foundation] = totalSupply_ * 5 / 100;\t\t\t    //Foundation 5%\n        balances[partner] = totalSupply_ * 10 / 100;                //Partner 10%\n        balances[ido] = totalSupply_ * 20 / 100;\t\t\t\t    //IDO 20%\n        balances[operate] = totalSupply_ * 45 / 100;\t\t\t\t//Operate (Airdrop and Miner)45%\n        emit Transfer(address(0), team1, balances[team1]);\n        emit Transfer(address(0), team2, balances[team2]);\n        emit Transfer(address(0), foundation, balances[foundation]);\n        emit Transfer(address(0), partner, balances[partner]);\n        emit Transfer(address(0), ido, balances[ido]);\n        emit Transfer(address(0), operate, balances[operate]);\n    }\n\n    function batchTransfer(address[] _receivers, uint _value) whenNotPaused public {\n        uint cnt = _receivers.length;\n        require(cnt>0);\n        for(uint i=0; i<cnt; i++){\n            address _to = _receivers[i];\n            require(_to!=address(0) && _value<=balances[msg.sender]);\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            emit Transfer(msg.sender, _to, _value);\n        }\n    }\n    \n    function batchTransfers(address[] _receivers, uint[] _values) whenNotPaused public {\n        uint cnt = _receivers.length;\n        require(cnt>0 && cnt==_values.length);\n        for(uint i=0; i<cnt; i++){\n            address _to = _receivers[i];\n            uint _value = _values[i];\n            require(_to!=address(0) && _value<=balances[msg.sender]);\n            balances[msg.sender] = balances[msg.sender].sub(_values[i]);\n            balances[_to] = balances[_to].add(_values[i]);\n            emit Transfer(msg.sender, _to, _values[i]);\n        }\n    }\n\n\t// Send back ether sent to me\n\tfunction () external {\n\t\trevert();\n\t}\n \n}",
  "bytecode": "60806040526003805460a060020a60ff021916905560048054600160a060020a031990811673945835787779ca81cc6a5bf88276c5650edae8811790915560058054821673a0fad303c2b167a24d6e29e4b1e71879c6a9036b179055600680548216739871ed8fd953e58f2d47a5d8618d8ebf2f49bb5117905560078054821673e7f56c56546d85323f2c60ea640a99542569c7f117905560088054821673c9df47746cb76c38e4a54bbdbe21f168cc10953317905560098054909116730b1859ce0faba7e7347c22d01333d5f2bdb37acf1790553480156100e057600080fd5b5060038054600160a060020a0319163317905566038d7ea4c68000600190815560048054600160a060020a0390811660009081526020818152604080832065886c98b760009055855460058054861685528285206064928202839004905587546006548716865283862091028290049055865460075486168552828520600a909102829004905586546008548616855282852060149091028290049055955460095485168452818420602d90910296909604909555925490911680825283822054845190815293519093919260008051602061138a833981519152928290030190a3600554600160a060020a0316600081815260208181526040808320548151908152905160008051602061138a833981519152929181900390910190a3600654600160a060020a0316600081815260208181526040808320548151908152905160008051602061138a833981519152929181900390910190a3600754600160a060020a0316600081815260208181526040808320548151908152905160008051602061138a833981519152929181900390910190a3600854600160a060020a0316600081815260208181526040808320548151908152905160008051602061138a833981519152929181900390910190a3600954600160a060020a0316600081815260208181526040808320548151908152905160008051602061138a833981519152929181900390910190a361108d806102fd6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461015a578063095ea7b3146101e457806318160ddd1461021c57806323b872dd14610243578063313ce5671461026d5780633badca25146102985780633f4ba83a1461032857806341fbb0501461033d5780635c975abb1461036e578063661884631461038357806370a08231146103a7578063715018a6146103c85780637159a618146103dd57806383f12fec146103f25780638456cb59146104495780638c8d2ede1461045e5780638da5cb5b1461047357806395d89b4114610488578063a9059cbb1461049d578063be10862b146104c1578063d73dd623146104d6578063dd62ed3e146104fa578063e612c0ad14610521578063eeb522aa14610536578063f2fde38b1461054b575b34801561015457600080fd5b50600080fd5b34801561016657600080fd5b5061016f61056c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a9578181015183820152602001610191565b50505050905090810190601f1680156101d65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f057600080fd5b50610208600160a060020a03600435166024356105a3565b604080519115158252519081900360200190f35b34801561022857600080fd5b50610231610609565b60408051918252519081900360200190f35b34801561024f57600080fd5b50610208600160a060020a036004358116906024351660443561060f565b34801561027957600080fd5b5061028261063c565b6040805160ff9092168252519081900360200190f35b3480156102a457600080fd5b506040805160206004803580820135838102808601850190965280855261032695369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506106419650505050505050565b005b34801561033457600080fd5b506103266107eb565b34801561034957600080fd5b50610352610863565b60408051600160a060020a039092168252519081900360200190f35b34801561037a57600080fd5b50610208610872565b34801561038f57600080fd5b50610208600160a060020a0360043516602435610882565b3480156103b357600080fd5b50610231600160a060020a0360043516610972565b3480156103d457600080fd5b5061032661098d565b3480156103e957600080fd5b506103526109fb565b3480156103fe57600080fd5b5060408051602060048035808201358381028086018501909652808552610326953695939460249493850192918291850190849080828437509497505093359450610a0a9350505050565b34801561045557600080fd5b50610326610b37565b34801561046a57600080fd5b50610352610bb4565b34801561047f57600080fd5b50610352610bc3565b34801561049457600080fd5b5061016f610bd2565b3480156104a957600080fd5b50610208600160a060020a0360043516602435610c09565b3480156104cd57600080fd5b50610352610c34565b3480156104e257600080fd5b50610208600160a060020a0360043516602435610c43565b34801561050657600080fd5b50610231600160a060020a0360043581169060243516610cdc565b34801561052d57600080fd5b50610352610d07565b34801561054257600080fd5b50610352610d16565b34801561055757600080fd5b50610326600160a060020a0360043516610d25565b60408051808201909152600b81527f556e696f6e546f6b656e73000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60035460009060a060020a900460ff161561062957600080fd5b610634848484610d48565b949350505050565b600681565b60035460009081908190819060a060020a900460ff161561066157600080fd5b855193506000841180156106755750845184145b151561068057600080fd5b600092505b838310156107e357858381518110151561069b57fe5b90602001906020020151915084838151811015156106b557fe5b602090810290910101519050600160a060020a038216158015906106e85750336000908152602081905260409020548111155b15156106f357600080fd5b61072b858481518110151561070457fe5b6020908102909101810151336000908152918290526040909120549063ffffffff610ebe16565b33600090815260208190526040902055845161077d9086908590811061074d57fe5b6020908102909101810151600160a060020a0385166000908152918290526040909120549063ffffffff610ed016565b600160a060020a03831660008181526020819052604090209190915585513390600080516020611042833981519152908890879081106107b957fe5b906020019060200201516040518082815260200191505060405180910390a3600190920191610685565b505050505050565b600354600160a060020a0316331461080257600080fd5b60035460a060020a900460ff16151561081a57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600654600160a060020a031681565b60035460a060020a900460ff1681565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156108d757336000908152600260209081526040808320600160a060020a038816845290915281205561090c565b6108e7818463ffffffff610ebe16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146109a457600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600954600160a060020a031681565b6003546000908190819060a060020a900460ff1615610a2857600080fd5b8451925060008311610a3957600080fd5b600091505b82821015610b30578482815181101515610a5457fe5b602090810290910101519050600160a060020a03811615801590610a875750336000908152602081905260409020548411155b1515610a9257600080fd5b33600090815260208190526040902054610ab2908563ffffffff610ebe16565b3360009081526020819052604080822092909255600160a060020a03831681522054610ae4908563ffffffff610ed016565b600160a060020a038216600081815260208181526040918290209390935580518781529051919233926000805160206110428339815191529281900390910190a3600190910190610a3e565b5050505050565b600354600160a060020a03163314610b4e57600080fd5b60035460a060020a900460ff1615610b6557600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600454600160a060020a031681565b600354600160a060020a031681565b60408051808201909152600581527f554e494f4e000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1615610c2357600080fd5b610c2d8383610ee3565b9392505050565b600754600160a060020a031681565b336000908152600260209081526040808320600160a060020a0386168452909152812054610c77908363ffffffff610ed016565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600554600160a060020a031681565b600854600160a060020a031681565b600354600160a060020a03163314610d3c57600080fd5b610d4581610fc3565b50565b600060606064361015610d5a57600080fd5b600160a060020a0384161515610d6f57600080fd5b600160a060020a038516600090815260208190526040902054831115610d9457600080fd5b600160a060020a0385166000908152600260209081526040808320338452909152902054831115610dc457600080fd5b600160a060020a038516600090815260208190526040902054610ded908463ffffffff610ebe16565b600160a060020a038087166000908152602081905260408082209390935590861681522054610e22908463ffffffff610ed016565b600160a060020a03808616600090815260208181526040808320949094559188168152600282528281203382529091522054610e64908463ffffffff610ebe16565b600160a060020a0380871660008181526002602090815260408083203384528252918290209490945580518781529051928816939192600080516020611042833981519152929181900390910190a3506001949350505050565b600082821115610eca57fe5b50900390565b81810182811015610edd57fe5b92915050565b600060406044361015610ef557600080fd5b600160a060020a0384161515610f0a57600080fd5b33600090815260208190526040902054831115610f2657600080fd5b33600090815260208190526040902054610f46908463ffffffff610ebe16565b3360009081526020819052604080822092909255600160a060020a03861681522054610f78908463ffffffff610ed016565b600160a060020a038516600081815260208181526040918290209390935580518681529051919233926000805160206110428339815191529281900390910190a35060019392505050565b600160a060020a0381161515610fd857600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058207137564ed93d0c9f401655f11a977037c87bad66207d08835f19c3a83a3f96a20029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}