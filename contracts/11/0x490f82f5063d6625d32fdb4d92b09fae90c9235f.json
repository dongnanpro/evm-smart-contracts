{
  "address": "0x490f82f5063d6625d32fdb4d92b09fae90c9235f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigNode",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * Author: Sik Jean Soon\n */\n\n/**\n * @title SafeMath for uint256\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint256 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Modulo exception\");\n        return a % b;\n    }\n\n}\n\n/**\n * @title SafeMath for uint8\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint8 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a, \"Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        c = a + b;\n        require(c >= a, \"Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b != 0, \"Modulo exception\");\n        return a % b;\n    }\n\n}\n\ncontract Common {\n    bytes32 internal LABEL_CODE_STAKER;\n    bytes32 internal LABEL_CODE_STAKER_CONTROLLER;\n    bytes32 internal LABEL_CODE_SIGNER_CONTROLLER;\n    bytes32 internal LABEL_CODE_SIGNER;\n    bytes32 internal LABEL_CODE_BACKSYS;\n    bytes32 internal LABEL_CODE_OPS;\n\n    uint8 constant internal MAX_WALLET = 64;\n    uint256 constant internal WALLET_FLAG_ALL = (2 ** (uint256(MAX_WALLET))) - 1;\n\n    constructor() public\n    {\n        LABEL_CODE_STAKER = encodePacked(\"STAKER\");\n        LABEL_CODE_STAKER_CONTROLLER = encodePacked(\"STAKER_CONTROLLER\");\n        LABEL_CODE_SIGNER_CONTROLLER = encodePacked(\"SIGNER_CONTROLLER\");\n        LABEL_CODE_SIGNER = encodePacked(\"SIGNER\");\n        LABEL_CODE_BACKSYS = encodePacked(\"BACKSYS\");\n        LABEL_CODE_OPS = encodePacked(\"OPS\");\n    }\n\n    function encodePacked(string memory s) internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(s));\n    }\n\n    function convertBytesToBytes4(bytes memory _in) internal pure\n        returns (bytes4 out)\n    {\n        if (0 == _in.length)\n            return 0x0;\n\n        assembly {\n            out := mload(add(_in, 32))\n        }\n    }\n\n    function isContract(address _address) internal view\n        returns (bool)\n    {\n        uint32 size;\n        assembly {\n            size := extcodesize(_address)\n        }\n        return (0 < size);\n    }\n\n}\n\ncontract Label is Common {\n    string public class;\n    string public label;\n    string public description;\n\n    bytes32 public classCode;\n    bytes32 public labelCode;\n\n    constructor(string memory _class, string memory _label, string memory _description) public\n    {\n        class = _class;        \n        label = _label;\n        description = _description;\n\n        classCode = encodePacked(_class);\n        labelCode = encodePacked(_label);\n    }\n\n}\n\n\ncontract MultiSigNode is Label {\n    using SafeMathUint8 for uint8;\n\n    address payable public root;\n    address public parent;\n\n    // wallet index => wallet address\n    mapping(uint8 => address) public wallets;\n    // wallet address => wallet bit position\n    mapping(address => uint8) public walletsIndex;\n\n    // Normal wallet\n    uint8 public walletCount;\n    // Total wallet = normal wallet + contract wallet\n    uint8 public totalWallet;\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Node.onlyRoot: Access denied\");\n        _;\n    }\n\n    constructor(address payable _root, address[] memory _wallets, string memory _label, string memory _description) public\n        Label(\"NODE\", _label, _description)\n    {\n        require(address(0) != _root, \"Node: Root address is empty\");\n        require(MAX_WALLET >= _wallets.length, \"Node: Wallet list exceeded limit\");\n\n        root = _root;\n\n        for (uint8 i = 1; _wallets.length >= i; i = i.add(1)) {\n            address wallet = _wallets[i.sub(1)];\n\n            require(address(0) != wallet, \"Node: Wallet address is empty\");\n            require(0 == walletsIndex[wallet], \"Node: Duplicated wallet address\");\n\n            wallets[i] = wallet;\n            walletsIndex[wallet] = i;\n\n            if (!isContract(wallet))\n                walletCount = walletCount.add(1);\n        }\n\n        totalWallet = uint8(_wallets.length);\n    }\n\n    function init(address _parent) external\n        onlyRoot\n    {\n        parent = _parent;\n\n        if (0 < totalWallet) {\n            uint8 count = 0;\n\n            for (uint8 i = 1; i <= MAX_WALLET && count <= totalWallet; i = i.add(1)) {\n                address wallet = wallets[i];\n\n                if (address(0) != wallet) {\n                    count = count.add(1);\n\n                    // Notify root this attached wallet, root will set parent address (if this is node)\n                    MultiSigRoot(root).attachWalletOrNode(wallet);\n                }\n            }\n        }\n    }\n\n    function term() external\n        onlyRoot\n    {\n        if (0 < totalWallet) {\n            uint8 count = 0;\n\n            for (uint8 i = 1; i <= MAX_WALLET && count <= totalWallet; i = i.add(1)) {\n                address wallet = wallets[i];\n\n                if (address(0) != wallet) {\n                    count = count.add(1);\n\n                    // Notify root to remove this wallet from list\n                    MultiSigRoot(root).detachWalletOrNode(wallet);\n                }\n            }\n        }\n    }\n\n    function attach(uint8 _index, address _wallet) external\n        onlyRoot\n        returns (bool)\n    {\n        require(0 < _index && MAX_WALLET >= _index, \"Node.attach: Index out of range\");\n        require(address(0) != _wallet, \"Node.attach: Wallet address is empty\");\n        require(0 == walletsIndex[_wallet], \"Node.attach: Duplicated wallet address\");\n\n        if (address(0) != wallets[_index])\n            detach(wallets[_index]);\n\n        walletsIndex[_wallet] = _index;\n        wallets[_index] = _wallet;\n\n        if (!isContract(_wallet))\n            walletCount = walletCount.add(1);\n\n        totalWallet = totalWallet.add(1);\n\n        // Notify root this attached wallet, root will trigger attach operation (if this wallet is a contract)\n        MultiSigRoot(root).attachWalletOrNode(_wallet);\n\n        return true;\n    }\n\n    function detach(address _wallet) public\n        onlyRoot\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Node.detach: Wallet address is empty\");\n\n        uint8 index = walletsIndex[_wallet];\n        require(0 < index && MAX_WALLET >= index, \"Node.detach: Wallet address is not registered\");\n\n        if (!isContract(_wallet))\n            walletCount = walletCount.sub(1);\n\n        totalWallet = totalWallet.sub(1);\n\n        delete wallets[index];\n        delete walletsIndex[_wallet];\n\n        // Notify root to remove this wallet from list\n        MultiSigRoot(root).detachWalletOrNode(_wallet);\n\n        return true;\n    }\n\n    function getRootNode() external view\n        returns (address)\n    {\n        if (address(0) == parent)\n            return address(this);\n\n        return MultiSigNode(parent).getRootNode();\n    }\n\n}\n\n\n/**\n * NOTE: Regulator is meant for changable rules for multi-sig\n */\ncontract MultiSigRegulator is Label {\n    using SafeMathUint8 for uint8;\n    using SafeMathUint256 for uint256;\n\n    event TransactionLimitChanged(string requirementType, uint256 limit);\n\n    address payable public root;\n\n    address private creator;\n\n    // Cached parameters\n    address private argTo;\n    uint256 private argValue;\n\n    bool public isSealed;\n\n    // Daily transaction limit (mapped: requirement type => TransactionLimit)\n    mapping(bytes32 => TransactionLimit) public transactionLimits;\n\n    struct TransactionLimit {\n        uint256 datetime;\n        uint256 volume;\n        uint256 upperLimit;\n    }\n\n    modifier onlySealed() {\n        require(isSealed, \"Regulator.onlySealed: Not sealed\");\n        _;\n    }\n\n    modifier onlyMe() {\n        require(msg.sender == address(this), \"Regulator.onlyMe: Access denied\");\n        _;\n    }\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Regulator.onlyRoot: Access denied\");\n        _;\n    }\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Regulator.onlyCreator: Access denied\");\n        _;\n    }\n\n    /**\n     * Supported non-payable default function\n     */\n    function () external\n        onlyMe\n        onlySealed\n    {\n        revert(\"Regulator: Not supported\");\n    }\n\n    constructor(address payable _root, string memory _label, string memory _description) public\n        Label(\"REGULATOR\", _label, _description)\n    {\n        require(address(0) != _root, \"Regulator: Root address is empty\");\n        root = _root;\n        creator = msg.sender;\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.increaseSupply\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function increaseSupply(uint256 _value, address /* _to */) external\n        onlyMe\n        onlySealed\n    {\n        defaultRequirement(\"increaseSupply\", _value);\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.decreaseSupply\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function decreaseSupply(uint256 _value, address /* _from */) external\n        onlyMe\n        onlySealed\n    {\n        defaultRequirement(\"decreaseSupply\", _value);\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.freeze\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function freeze(address /* _from */, uint256 /* _value */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.unfreeze\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function unfreeze(address /* _from */, uint256 /* _value */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.freezeAddress\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function freezeAddress(address /* _addressOf */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.unfreezeAddress\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function unfreezeAddress(address /* _addressOf */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: Ownership.acceptOwnership\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function acceptOwnership () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_OPS, 2, 1); // INDEX 2: ONE SIGNABLE\n        requirement(LABEL_CODE_SIGNER_CONTROLLER, 1, 1); // INDEX 1: ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Ownership.transferOwnership\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function transferOwnership (address payable /* _newOwner */) external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL SIGNABLE\n        requirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Controllable.pause\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function pause () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Controllable.resume\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function resume () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 2); // ANY TWO SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: MultiSigRegulator.setTransactionLimit\n     */\n    function setTransactionLimit(string calldata _requirementType, uint256 _limit) external\n    {\n        if (msg.sender == root || !isSealed) {\n            // Set transaction limit\n            transactionLimits[encodePacked(_requirementType)].upperLimit = _limit;\n            emit TransactionLimitChanged(_requirementType, _limit);\n        }\n        else {\n            require(msg.sender == address(this), \"Regulator.setTransactionLimit: Access denied\");\n\n            // Create requirements for this transaction\n            requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 2); // ANY TWO SIGNABLE\n        }\n    }\n\n    function seal() external\n        onlyCreator\n    {\n        require(!isSealed, \"Regulator.seal: Access denied\");\n        isSealed = true;\n    }\n\n    function createRequirement(uint256 /* _transactionCode */, address /* _from */, address _to, uint256 _value, bytes calldata _data) external\n        onlyRoot\n    {\n        // Cache parameters\n        argTo = _to;\n        argValue = _value;\n\n        // Perform self call to determine function details for requirement setup\n        (bool success, bytes memory returnData) = address(this).call.value(_value)(_data);\n\n        if (!success) {\n            // Check the error string is available or not\n            if (0 == returnData.length || bytes4(0x08c379a0) != convertBytesToBytes4(returnData))\n                revert(\"Regulator.createRequirement: Function call failed\");\n            else {\n                bytes memory bytesArray = new bytes(returnData.length);\n                for (uint256 i = 0; i < returnData.length.sub(4); i = i.add(1)) {\n                    bytesArray[i] = returnData[i.add(4)];\n                }\n\n                (string memory reason) = abi.decode(bytesArray, (string));\n                revert(reason);\n            }\n        }\n    }\n\n    function requirement(bytes32 _labelCode, uint256 _flag, uint8 _required) private\n    {\n        MultiSigRoot(root).createRequirement(_labelCode, _flag, _required);\n    }\n\n    function defaultRequirement(string memory _requirementType, uint256 _value) private\n    {\n        bytes32 t = encodePacked(_requirementType);\n\n        // Check transaction volume limit\n        TransactionLimit storage limit = transactionLimits[t];\n\n        // Check transaction volume limit\n        if (0 < limit.upperLimit) {\n            // Truncate timestamp (YYYYMMDD) to daily (UTC time)\n            uint256 dt = now - (now % 86400);\n\n            if (dt == limit.datetime)\n                limit.volume = limit.volume.add(_value);\n            else {\n                // Reset volume on new day\n                limit.datetime = dt;\n                limit.volume = _value;\n            }\n\n            require(limit.upperLimit >= limit.volume, \"Regulator.defaultRequirement: Exceeded limit\");\n        }\n\n        // Create requirement for this transaction\n        requirement(LABEL_CODE_OPS, WALLET_FLAG_ALL, 4); // ANY FOUR SIGNABLE\n    }\n\n    function requirement1Backsys() private\n    {\n        requirement(LABEL_CODE_BACKSYS, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n}\n\n\ncontract MultiSigRoot is Label {\n    using SafeMathUint8 for uint8;\n    using SafeMathUint256 for uint256;\n\n    uint8 constant private WALLET_TYPE_WALLET = 1;\n    uint8 constant private WALLET_TYPE_NODE = 2;\n\n    uint8 constant private TRANSACTION_STATUS_EMPTY = 0;\n    uint8 constant private TRANSACTION_STATUS_PENDING = 1;\n    uint8 constant private TRANSACTION_STATUS_EXECUTED = 2;\n    uint8 constant private TRANSACTION_STATUS_FAILURE = 3;\n    uint8 constant private TRANSACTION_STATUS_REVOKED = 4;\n\n    event Confirmation(address indexed sender, uint256 indexed transactionCode);\n    event Revocation(address indexed sender, uint256 indexed transactionCode);\n    event Submission(uint256 indexed transactionCode);\n    event Requirement(uint256 indexed transactionCode, bytes32 labelCode, uint256 flag, uint8 required);\n    event Execution(uint256 indexed transactionCode);\n    event ExecutionFailure(uint256 indexed transactionCode);\n    event Deposit(address indexed sender, uint256 value);\n\n    event StakersChanged(address indexed stakers);\n    event SignersChanged(address indexed signers);\n    event RegulatorChanged(address indexed regulator);\n    event StakersControllerChanged(address indexed stakersController);\n    event SignersControllerChanged(address indexed signersController);\n    \n    event WalletOrNodeAttached(address indexed wallet);\n    event WalletOrNodeDetached(address indexed wallet);\n    \n    address public stakers;\n    address public signers;\n\n    address public stakersController;\n    address public signersController;\n\n    address public regulator;\n\n    // Transaction (mapped: transactionCode => Transaction)\n    mapping(uint256 => Transaction) public transactions;\n    uint256 public transactionCode;\n\n    // Requirement (mapped: transactionCode + label code => requirement)\n    mapping(uint256 => mapping(bytes32 => TransactionRequirement)) public requirements;\n    // Prevent duplicated confirmation (mapped: transactionCode + wallet address => bool)\n    mapping(uint256 => mapping(address => bool)) public confirmations;\n\n    // Registered wallets or nodes (mapped: address => type)\n    mapping(address => uint8) public registered;\n\n    // Search node address by wallet address (mapped: wallet address => node address)\n    mapping(address => address) public walletToNodes;\n\n    // Search wallet index by wallet address (mapped: wallet address => wallet index)\n    mapping(address => uint8) private walletToIndexes;\n\n    // Search label code by wallet address (mapped: wallet address => label code)\n    mapping(address => bytes32) private walletToLabelCodes;\n\n    // Search node address by label code (mapped: label code => node address)\n    mapping(bytes32 => address) private labelCodeToNodes;\n\n    struct Transaction {\n        uint8 status;\n        uint8 totalRequired;\n\n        address to;\n        uint256 value;\n        bytes data;\n        string reason;\n    }\n\n    struct TransactionRequirement {\n        uint8 required;\n        uint256 flag;\n    }\n\n    modifier onlyEligible(uint256 _transactionCode) {\n        require(isEligible(_transactionCode, msg.sender), \"Root.onlyEligible: Not eligible\");\n        _;\n    }\n\n    modifier onlySignable(uint256 _transactionCode) {\n        require(isSignable(_transactionCode, msg.sender), \"Root.onlySignable: Not signable\");\n        _;\n    }\n\n    modifier onlyNode() {\n        require(WALLET_TYPE_NODE == registered[msg.sender], \"Root.onlyNode: Access denied\");\n        _;\n    }\n\n    modifier onlyWallet() {\n        require(WALLET_TYPE_WALLET == registered[msg.sender], \"Root.onlyWallet: Access denied\");\n        require(!isContract(msg.sender), \"Root.onlyWallet: Is not node\");\n        _;\n    }\n\n    modifier onlyRegulator() {\n        require(msg.sender == regulator, \"Root.onlyRegulator: Access denied\");\n        _;\n    }\n\n    constructor(string memory _label, string memory _description) public\n        Label(\"ROOT\", _label, _description)\n    {\n    }\n\n    function () external payable\n    {\n        if (0 < msg.value)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    function isEligible(uint256 _transactionCode, address _sender) public view\n        returns (bool)\n    {\n        uint256 flag = requirements[_transactionCode][walletToLabelCodes[_sender]].flag;\n\n        if (0 != flag) {\n            uint8 index = walletToIndexes[_sender];\n\n            if (0 != index) {\n                index = index.sub(1);\n\n                // Check the bit is on for wallet index\n                return (0 != ((flag >> index) & 1));\n            }\n        }\n        return false;\n    }\n\n    function isSignable(uint256 _transactionCode, address _sender) public view\n        returns (bool)\n    {\n        if (TRANSACTION_STATUS_PENDING == transactions[_transactionCode].status) {\n            if (!confirmations[_transactionCode][_sender]) {\n                if (0 != requirements[_transactionCode][walletToLabelCodes[_sender]].required)\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    function createRequirement(bytes32 _labelCode, uint256 _flag, uint8 _required) external\n        onlyRegulator\n    {\n        setRequirement(_labelCode, _flag, _required);\n    }\n\n    function setRequirement(bytes32 _labelCode, uint256 _flag, uint8 _required) private\n    {\n        require(0 < _flag, \"Root.setRequirement: Confirmation flag is empty\");\n\n        uint8 totalRequired;\n\n        // Required all wallet in the node\n        if (uint8(-1) == _required) {\n            address node = labelCodeToNodes[_labelCode];\n            require(address(0) != node, \"Root.setRequirement: Node is not found\");\n\n            totalRequired = MultiSigNode(node).walletCount();\n\n            if (node != signers) {\n                // Stakers and controllers must have at least 1 wallet attached\n                require(0 < totalRequired, \"Root.setRequirement: No wallet\");\n            }\n            else {\n                // Signer node allowed to be empty\n                if (0 == totalRequired)\n                    return;\n            }\n\n            require(0 < totalRequired, \"Root.setRequirement: Confirmation required is empty\");\n        }\n        else {\n            // allowed 0 requirement, in order to support eligible user but not signable (view transaction only)\n            totalRequired = _required;\n        }\n\n        require(0 == requirements[transactionCode][_labelCode].flag, \"Root.setRequirement: Duplicated requirement\");\n\n        requirements[transactionCode][_labelCode] = TransactionRequirement({\n            required: totalRequired,\n            flag: _flag\n        });\n\n        // Increase total required in transaction\n        transactions[transactionCode].totalRequired = transactions[transactionCode].totalRequired.add(totalRequired);\n\n        emit Requirement(transactionCode, _labelCode, _flag, totalRequired);\n    }\n\n    function submit(address _to, uint256 _value, bytes calldata _data) external\n        onlyWallet\n        returns (uint256 /* transactionCode */) \n    {\n        require(address(0) != _to, \"Root.submit: Target address is empty\");\n\n        // Generate transaction id\n        transactionCode = transactionCode.add(1);\n\n        bytes4 functionId = convertBytesToBytes4(_data);\n\n        // Create requirement that based on destination address\n        if (address(this) != _to) {\n            // Check this is node address or not\n            if (WALLET_TYPE_NODE == registered[_to]) {\n                // Calling node function\n                // - 0x80882800: node.attach\n                // - 0xceb6c343: node.detach\n                if (bytes4(0x80882800) == functionId || bytes4(0xceb6c343) == functionId) { // node.attach or node.detach\n                    address rootNode = MultiSigNode(_to).getRootNode();\n\n                    if (rootNode == signers) {\n                        // Change SIGNER need ALL SIGNER_CONTROLLER\n                        setRequirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else if (rootNode == signersController || rootNode == stakersController) {\n                        // Change SIGNERS_CONTROLLER or STAKER_CONTROLLER need ALL STAKER\n                        setRequirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else if (rootNode == stakers) {\n                        // Change STAKER need ALL STAKER_CONTROLLER\n                        setRequirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else {\n                        revert(\"Root.submit: Unknown node\");\n                    }\n                }\n                else\n                    revert(\"Root.submit: Not supported\");\n            }\n            else {\n                // Regulator create requirement\n                MultiSigRegulator(regulator).createRequirement(transactionCode, msg.sender, _to, _value, _data);\n            }\n        }\n        else {\n            // Calling self functions\n            // - 0xcde0a4f8: root.setRegulator\n            // - 0xb47876ea: root.setSigners\n            // - 0xc27dbe63: root.setStakers\n            // - 0x26bc178c: root.setStakersController\n            // - 0x51d996bf: root.setSignersController\n            if (bytes4(0xcde0a4f8) == functionId || bytes4(0xc27dbe63) == functionId) // setRegulator or setStakers\n                setRequirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else if (bytes4(0x26bc178c) == functionId || bytes4(0x51d996bf) == functionId) // setStakersController or setSignersController\n                setRequirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else if (bytes4(0xb47876ea) == functionId) // setSigners\n                setRequirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else\n                revert(\"Root.submit: Not supported\");\n        }\n\n        require(0 < transactions[transactionCode].totalRequired, \"Root.submit: Requirement is empty\");\n\n        // Create transaction structure\n        transactions[transactionCode] = Transaction({\n            status: TRANSACTION_STATUS_PENDING,\n            totalRequired: transactions[transactionCode].totalRequired,\n            to: _to,\n            value: _value,\n            data: _data,\n            reason: \"\"\n        });\n\n        emit Submission(transactionCode);\n\n        // Confirm transaction if eligible and signable\n        if (isEligible(transactionCode, msg.sender) && isSignable(transactionCode, msg.sender))\n            confirmTransaction(transactionCode, transactions[transactionCode]);\n\n        return transactionCode;\n    }\n\n    function confirm(uint256 _transactionCode) external\n        onlyWallet\n        onlyEligible(_transactionCode)\n        onlySignable(_transactionCode)\n        returns (bool)\n    {\n        Transaction storage transaction = transactions[_transactionCode];\n\n        return confirmTransaction(_transactionCode, transaction);\n    }\n\n    function revoke(uint256 _transactionCode) external\n        onlyWallet\n        onlyEligible(_transactionCode)\n        returns (bool)\n    {\n        require(TRANSACTION_STATUS_PENDING == transactions[_transactionCode].status, \"Root.revoke: Transaction has been completed\");\n        transactions[_transactionCode].status = TRANSACTION_STATUS_REVOKED;\n\n        emit Revocation(msg.sender, _transactionCode);\n        return true;\n    }\n\n    function confirmTransaction(uint256 _transactionCode, Transaction storage _transaction) private\n        returns (bool)\n    {\n        TransactionRequirement storage requirement = requirements[_transactionCode][walletToLabelCodes[msg.sender]];\n        require(0 != requirement.flag && 0 != requirement.required, \"Root.confirmTransaction: Requirement is empty\");\n\n        // Prevent duplicated confirmation\n        require(!confirmations[_transactionCode][msg.sender], \"root.confirmTransaction: Duplicated confirmation\");\n        confirmations[_transactionCode][msg.sender] = true;\n\n        requirement.required = requirement.required.sub(1);\n        _transaction.totalRequired = _transaction.totalRequired.sub(1);\n\n        emit Confirmation(msg.sender, _transactionCode);\n\n        return executeTransaction(_transactionCode, _transaction);\n    }\n\n    function executeTransaction(uint256 _transactionCode, Transaction storage _transaction) private\n        returns (bool)\n    {\n        require(TRANSACTION_STATUS_PENDING == _transaction.status, \"Root.executeTransaction: Status not active\");\n\n        if (0 == _transaction.totalRequired) {\n            _transaction.status = TRANSACTION_STATUS_EXECUTED;\n\n            // Perform remote call\n            (bool success, bytes memory returnData) = _transaction.to.call.value(_transaction.value)(_transaction.data);\n\n            if (success)\n                emit Execution(_transactionCode);\n            else {\n                // Check the error string is available or not\n                if (0 == returnData.length || bytes4(0x08c379a0) != convertBytesToBytes4(returnData))\n                    _transaction.reason = \"Root.executeTransaction: Function call failed\";\n                else {\n                    bytes memory bytesArray = new bytes(returnData.length);\n                    for (uint256 i = 0; i < returnData.length.sub(4); i = i.add(1)) {\n                        bytesArray[i] = returnData[i.add(4)];\n                    }\n\n                    (string memory reason) = abi.decode(bytesArray, (string));\n                    _transaction.reason = reason;\n                }\n\n                _transaction.status = TRANSACTION_STATUS_FAILURE;\n                emit ExecutionFailure(_transactionCode);\n            }\n\n            return success;\n        }\n\n        return true;\n    }\n\n    function setRegulator(address _addressOf) external\n    {\n        if (address(0) != regulator)\n            require(msg.sender == address(this), \"Root.setRegulator: Access denied\");\n        \n        require(MultiSigRegulator(_addressOf).isSealed(), \"Root.setRegulator: Regulator is not sealed\");\n\n        regulator = setNode(regulator, _addressOf, false);\n        emit RegulatorChanged(regulator);\n    }\n\n    function setStakers(address _addressOf) external\n    {\n        if (address(0) != stakers)\n            require(msg.sender == address(this), \"Root.setStakers: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setStakers: No wallet\");\n\n        stakers = setNode(stakers, _addressOf, true);\n        emit StakersChanged(stakers);\n    }\n\n    function setSigners(address _addressOf) external\n        returns (bool)\n    {\n        if (address(0) != signers)\n            require(msg.sender == address(this), \"Root.setSigners: Access denied\");\n\n        // Signer node allowed to be empty\n\n        signers = setNode(signers, _addressOf, true);\n        emit SignersChanged(signers);\n        return true;\n    }\n\n    function setStakersController(address _addressOf) external\n    {\n        if (address(0) != stakersController)\n            require(msg.sender == address(this), \"Root.setStakersController: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setStakersController: No wallet\");\n\n        stakersController = setNode(stakersController, _addressOf, true);\n        emit StakersControllerChanged(stakersController);\n    }\n\n    function setSignersController(address _addressOf) external\n    {\n        if (address(0) != signersController)\n            require(msg.sender == address(this), \"Root.setSignersController: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setSignersController: No wallet\");\n\n        signersController = setNode(signersController, _addressOf, true);\n        emit SignersControllerChanged(signersController);\n    }\n\n    function setNode(address _from, address _to, bool needAttachment) private\n        returns (address)\n    {\n        require(address(0) != _to, \"Root.setNode: Address is empty\");\n\n        if (needAttachment) {\n            require(0 == registered[_to], \"Root.setNode: Duplicated node\");\n\n            // Remove node from list\n            if (address(0) != _from) {\n                if (isContract(_from)) {\n                    // detach node\n                    MultiSigNode(_from).term();\n                }\n\n                delete registered[_from];\n            }\n\n            if (isContract(_to)) {\n                // Mark address as registered node\n                registered[_to] = WALLET_TYPE_NODE;\n\n                if (needAttachment) {\n                    // Attach node (parrent address = 0x0)\n                    MultiSigNode(_to).init(address(0));\n                }\n            }\n            else {\n                // Mark address as registered wallet\n                registered[_to] = WALLET_TYPE_WALLET;\n            }\n        }\n\n        return _to;\n    }\n\n    function attachWalletOrNode(address _wallet) external\n        onlyNode\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Root.attachWalletOrNode: Wallet address is empty\");\n        require(0 == registered[_wallet], \"Root.attachWalletOrNode: Duplicated wallet address\");\n\n        bytes32 labelCode = MultiSigNode(msg.sender).labelCode();\n\n        walletToNodes[_wallet] = msg.sender;\n        walletToIndexes[_wallet] = MultiSigNode(msg.sender).walletsIndex(_wallet);\n        walletToLabelCodes[_wallet] = labelCode;\n\n        labelCodeToNodes[labelCode] = msg.sender;\n\n        if (isContract(_wallet)) {\n            // Mark address as registered node\n            registered[_wallet] = WALLET_TYPE_NODE;\n\n            // Attach node with their parent address\n            MultiSigNode(_wallet).init(msg.sender);\n        }\n        else {\n            // Mark address as registered wallet\n            registered[_wallet] = WALLET_TYPE_WALLET;\n        }\n\n        emit WalletOrNodeAttached(_wallet);\n\n        return true;\n    }\n\n    function detachWalletOrNode(address _wallet) external\n        onlyNode\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Root.detachWalletOrNode: Wallet address is empty\");\n        require(0 != registered[_wallet], \"Root.detachWalletOrNode: Wallet address is not registered\");\n\n        if (isContract(_wallet)) {\n            // Detach node with their parent\n            MultiSigNode(_wallet).term();\n\n            bytes32 labelCode = MultiSigNode(msg.sender).labelCode();\n\n            delete labelCodeToNodes[labelCode];\n        }\n\n        delete registered[_wallet];\n        delete walletToNodes[_wallet];\n        delete walletToIndexes[_wallet];\n        delete walletToLabelCodes[_wallet];\n\n        emit WalletOrNodeDetached(_wallet);\n\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRootNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"attach\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"term\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"class\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"labelCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletsIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"label\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"detach\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"classCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_root\",\"type\":\"address\"},{\"name\":\"_wallets\",\"type\":\"address[]\"},{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000078a81946f5b221b9487ac56a96871977c1a1a357000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003a7d2528fe3fa0d1e666b3f31fb2912880b2303d0000000000000000000000004cd9eb40b44c29881af37f98a23a8b25c62e4ec100000000000000000000000000000000000000000000000000000000000000065354414b4552000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075374616b65727300000000000000000000000000000000000000000000000000"
}