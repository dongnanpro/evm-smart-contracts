{
  "address": "0xdece7451ebee92bc6a4b97f358bb5f6e87ee102d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Mainsale",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-27\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    \n  event Mint(address indexed to, uint256 amount);\n  \n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  address public saleAgent;\n\n  modifier notLocked() {\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\n    _;\n  }\n\n  function setSaleAgent(address newSaleAgnet) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    saleAgent = newSaleAgnet;\n  }\n\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require(msg.sender == saleAgent && !mintingFinished);\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n  \n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract CRYPTORIYA is MintableToken {\t\n    \n  string public constant name = \"CRYPTORIYA\";\n   \n  string public constant symbol = \"CIYA\";\n    \n  uint32 public constant decimals = 18;\n\n  mapping (address => uint) public locked;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(locked[msg.sender] < now);\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(locked[_from] < now);\n    return super.transferFrom(_from, _to, _value);\n  }\n  \n  function lock(address addr, uint periodInDays) public {\n    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\n    locked[addr] = now + periodInDays * 1 days;\n  }\n\n}\n\ncontract StagedCrowdsale is Pausable {\n\n  using SafeMath for uint;\n\n  struct Stage {\n    uint hardcap;\n    uint price;\n    uint invested;\n    uint closed;\n  }\n\n  uint public start;\n\n  uint public period;\n\n  uint public totalHardcap;\n \n  uint public totalInvested;\n\n  Stage[] public stages;\n\n  function stagesCount() public constant returns(uint) {\n    return stages.length;\n  }\n\n  function setStart(uint newStart) public onlyOwner {\n    start = newStart;\n  }\n\n  function setPeriod(uint newPeriod) public onlyOwner {\n    period = newPeriod;\n  }\n\n  function addStage(uint hardcap, uint price) public onlyOwner {\n    require(hardcap > 0 && price > 0);\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n    stages.push(stage);\n    totalHardcap = totalHardcap.add(stage.hardcap);\n  }\n\n  function removeStage(uint8 number) public onlyOwner {\n    require(number >=0 && number < stages.length);\n    Stage storage stage = stages[number];\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \n    delete stages[number];\n    for (uint i = number; i < stages.length - 1; i++) {\n      stages[i] = stages[i+1];\n    }\n    stages.length--;\n  }\n\n  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\n    require(number >= 0 &&number < stages.length);\n    Stage storage stage = stages[number];\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \n    stage.hardcap = hardcap.mul(1 ether);\n    stage.price = price;\n    totalHardcap = totalHardcap.add(stage.hardcap);    \n  }\n\n  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\n    require(numberAfter < stages.length);\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n    totalHardcap = totalHardcap.add(stage.hardcap);\n    stages.length++;\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\n      stages[i + 1] = stages[i];\n    }\n    stages[numberAfter + 1] = stage;\n  }\n\n  function clearStages() public onlyOwner {\n    for (uint i = 0; i < stages.length; i++) {\n      delete stages[i];\n    }\n    stages.length -= stages.length;\n    totalHardcap = 0;\n  }\n\n  function lastSaleDate() public constant returns(uint) {\n    return start + period * 1 days;\n  }\n\n  modifier saleIsOn() {\n    require(stages.length > 0 && now >= start && now < lastSaleDate());\n    _;\n  }\n  \n  modifier isUnderHardcap() {\n    require(totalInvested <= totalHardcap);\n    _;\n  }\n\n  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\n    for(uint i=0; i < stages.length; i++) {\n      if(stages[i].closed == 0) {\n        return i;\n      }\n    }\n    revert();\n  }\n\n}\n\ncontract CommonSale is StagedCrowdsale {\n\n  address public masterWallet;\n\n  address public slaveWallet;\n  \n  address public directMintAgent;\n\n  uint public slaveWalletPercent = 30;\n\n  uint public percentRate = 100;\n\n  uint public minPrice;\n\n  uint public totalTokensMinted;\n  \n  bool public slaveWalletInitialized;\n  \n  bool public slaveWalletPercentInitialized;\n\n  CRYPTORIYA public token;\n  \n  modifier onlyDirectMintAgentOrOwner() {\n    require(directMintAgent == msg.sender || owner == msg.sender);\n    _;\n  }\n  \n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n    directMintAgent = newDirectMintAgent;\n  }\n  \n  function setMinPrice(uint newMinPrice) public onlyOwner {\n    minPrice = newMinPrice;\n  }\n\n  function setSlaveWalletPercent(uint newSlaveWalletPercent) public onlyOwner {\n    require(!slaveWalletPercentInitialized);\n    slaveWalletPercent = newSlaveWalletPercent;\n    slaveWalletPercentInitialized = true;\n  }\n\n  function setMasterWallet(address newMasterWallet) public onlyOwner {\n    masterWallet = newMasterWallet;\n  }\n\n  function setSlaveWallet(address newSlaveWallet) public onlyOwner {\n    require(!slaveWalletInitialized);\n    slaveWallet = newSlaveWallet;\n    slaveWalletInitialized = true;\n  }\n  \n  function setToken(address newToken) public onlyOwner {\n    token = CRYPTORIYA(newToken);\n  }\n\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\n    mintTokens(to, investedWei);\n  }\n\n  function createTokens() public whenNotPaused payable {\n    require(msg.value >= minPrice);\n    uint masterValue = msg.value.mul(percentRate.sub(slaveWalletPercent)).div(percentRate);\n    uint slaveValue = msg.value.sub(masterValue);\n    masterWallet.transfer(masterValue);\n    slaveWallet.transfer(slaveValue);\n    mintTokens(msg.sender, msg.value);\n  }\n\n  function mintTokens(address to, uint weiInvested) internal {\n    uint stageIndex = currentStage();\n    Stage storage stage = stages[stageIndex];\n    uint tokens = weiInvested.mul(stage.price);\n    token.mint(this, tokens);\n    token.transfer(to, tokens);\n    totalTokensMinted = totalTokensMinted.add(tokens);\n    totalInvested = totalInvested.add(weiInvested);\n    stage.invested = stage.invested.add(weiInvested);\n    if(stage.invested >= stage.hardcap) {\n      stage.closed = now;\n    }\n  }\n\n  function() external payable {\n    createTokens();\n  }\n  \n  function retrieveTokens(address anotherToken, address to) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(to, alienToken.balanceOf(this));\n  }\n\n}\n\ncontract Presale is CommonSale {\n\n  Mainsale public mainsale;\n\n  function setMainsale(address newMainsale) public onlyOwner {\n    mainsale = Mainsale(newMainsale);\n  }\n\n  function finishMinting() public whenNotPaused onlyOwner {\n    token.setSaleAgent(mainsale);\n  }\n\n  function() external payable {\n    createTokens();\n  }\n\n}\n\ncontract Mainsale is CommonSale {\n\n  address public foundersTokensWallet;\n  \n  address public bountyTokensWallet;\n  \n  uint public foundersTokensPercent;\n  \n  uint public bountyTokensPercent;\n  \n  uint public lockPeriod;\n\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\n    lockPeriod = newLockPeriod;\n  }\n\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner {\n    foundersTokensPercent = newFoundersTokensPercent;\n  }\n\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\n    bountyTokensPercent = newBountyTokensPercent;\n  }\n\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\n    foundersTokensWallet = newFoundersTokensWallet;\n  }\n\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\n    bountyTokensWallet = newBountyTokensWallet;\n  }\n\n  function finishMinting() public whenNotPaused onlyOwner {\n    uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\n    uint mintedTokens = token.totalSupply();\n    uint totalSupply = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\n    uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\n    uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\n    token.mint(this, foundersTokens);\n    token.transfer(foundersTokensWallet, foundersTokens);\n    token.mint(this, bountyTokens);\n    token.transfer(bountyTokensWallet, bountyTokens);\n    totalTokensMinted = totalTokensMinted.add(foundersTokens).add(bountyTokens);\n    token.finishMinting();\n  }\n\n}",
  "bytecode": "606060405260008060146101000a81548160ff021916908315150217905550601e6009556064600a55336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d47806100776000396000f30060606040526004361061025c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f3a9f6514610266578063144fa6d7146102895780631f2e97c8146102c2578063258108da146102ef57806329dd0b86146103185780632f48c4aa146103415780632f8bd8911461037a5780633806422a146103bc5780633f4ba83a146103e55780633fd8b02f146103fa5780634a23418a146104235780635216aeec1461047857806359169d06146104a15780635bf5d54c146104c45780635c975abb146104ed5780635ea8cd121461051a5780636341ca0b1461053d5780636abc3fe4146105955780636ed0b9d7146105ea578063769ffb7d14610622578063779972da1461065b578063798c6e0f1461067e5780637d549e99146106935780637d64bcb4146106bc5780638090114f146106d15780638456cb59146106fa578063845ddcb21461070f57806386d0b46d1461075b5780638da5cb5b1461078457806399cd211d146107d95780639a3fdfd01461082e5780639f49cefb14610857578063a6c7bf8a14610883578063ada199dd146108bc578063b27b7dd1146108df578063b442726314610905578063b557c9a41461090f578063be9a65551461093c578063c777501114610965578063e0a0f50d1461099e578063e45be8eb146109c1578063eb8ba66c146109ea578063ef78d4fd14610a22578063f2fde38b14610a4b578063f6a03ebf14610a84578063f6a3b1dd14610aa7578063fa8b72ff14610ad0578063fc0c546a14610b09578063fc0d011714610b5e578063feda104514610bb3575b610264610c08565b005b341561027157600080fd5b6102876004808035906020019091905050610d5e565b005b341561029457600080fd5b6102c0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc3565b005b34156102cd57600080fd5b6102d5610e62565b604051808215151515815260200191505060405180910390f35b34156102fa57600080fd5b610302610e75565b6040518082815260200191505060405180910390f35b341561032357600080fd5b61032b610e7b565b6040518082815260200191505060405180910390f35b341561034c57600080fd5b610378600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e8e565b005b341561038557600080fd5b6103ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f2d565b005b34156103c757600080fd5b6103cf611022565b6040518082815260200191505060405180910390f35b34156103f057600080fd5b6103f861102f565b005b341561040557600080fd5b61040d6110ed565b6040518082815260200191505060405180910390f35b341561042e57600080fd5b6104366110f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048357600080fd5b61048b611119565b6040518082815260200191505060405180910390f35b34156104ac57600080fd5b6104c2600480803590602001909190505061111f565b005b34156104cf57600080fd5b6104d7611184565b6040518082815260200191505060405180910390f35b34156104f857600080fd5b610500611227565b604051808215151515815260200191505060405180910390f35b341561052557600080fd5b61053b600480803590602001909190505061123a565b005b341561054857600080fd5b610593600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061129f565b005b34156105a057600080fd5b6105a861146e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105f557600080fd5b610620600480803560ff16906020019091908035906020019091908035906020019091905050611494565b005b341561062d57600080fd5b610659600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115a9565b005b341561066657600080fd5b61067c6004808035906020019091905050611648565b005b341561068957600080fd5b6106916116ad565b005b341561069e57600080fd5b6106a6611791565b6040518082815260200191505060405180910390f35b34156106c757600080fd5b6106cf611797565b005b34156106dc57600080fd5b6106e4611dd4565b6040518082815260200191505060405180910390f35b341561070557600080fd5b61070d611dda565b005b341561071a57600080fd5b6107306004808035906020019091905050611e9a565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b341561076657600080fd5b61076e611ed9565b6040518082815260200191505060405180910390f35b341561078f57600080fd5b610797611edf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107e457600080fd5b6107ec611f04565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561083957600080fd5b610841611f2a565b6040518082815260200191505060405180910390f35b341561086257600080fd5b6108816004808035906020019091908035906020019091905050611f30565b005b341561088e57600080fd5b6108ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612067565b005b34156108c757600080fd5b6108dd6004808035906020019091905050612106565b005b34156108ea57600080fd5b610903600480803560ff1690602001909190505061216b565b005b61090d610c08565b005b341561091a57600080fd5b61092261231a565b604051808215151515815260200191505060405180910390f35b341561094757600080fd5b61094f61232d565b6040518082815260200191505060405180910390f35b341561097057600080fd5b61099c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612333565b005b34156109a957600080fd5b6109bf6004808035906020019091905050612409565b005b34156109cc57600080fd5b6109d46124a5565b6040518082815260200191505060405180910390f35b34156109f557600080fd5b610a20600480803560ff169060200190919080359060200190919080359060200190919050506124ab565b005b3415610a2d57600080fd5b610a3561267d565b6040518082815260200191505060405180910390f35b3415610a5657600080fd5b610a82600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612683565b005b3415610a8f57600080fd5b610aa560048080359060200190919050506127d8565b005b3415610ab257600080fd5b610aba61283d565b6040518082815260200191505060405180910390f35b3415610adb57600080fd5b610b07600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612843565b005b3415610b1457600080fd5b610b1c6128e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b6957600080fd5b610b71612908565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bbe57600080fd5b610bc661292e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600060149054906101000a900460ff16151515610c2757600080fd5b600b543410151515610c3857600080fd5b610c75600a54610c67610c58600954600a5461295490919063ffffffff16565b3461296d90919063ffffffff16565b6129a090919063ffffffff16565b9150610c8a823461295490919063ffffffff16565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515610cee57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610d5057600080fd5b610d5a33346129bb565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610db957600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1e57600080fd5b80600d60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600d60019054906101000a900460ff1681565b60095481565b6000620151806002540260015401905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ee957600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fd557503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515610fe057600080fd5b6000600580549050118015610ff757506001544210155b80156110095750611006610e7b565b42105b151561101457600080fd5b61101e82826129bb565b5050565b6000600580549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108a57600080fd5b600060149054906101000a900460ff1615156110a557600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60125481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561117a57600080fd5b8060118190555050565b600080600060058054905011801561119e57506001544210155b80156111b057506111ad610e7b565b42105b15156111bb57600080fd5b600354600454111515156111ce57600080fd5b600090505b60058054905081101561121e5760006005828154811015156111f157fe5b906000526020600020906004020160030154141561121157809150611223565b80806001019150506111d3565b600080fd5b5090565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129557600080fd5b80600b8190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112fc57600080fd5b8290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb838373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156113b657600080fd5b5af115156113c357600080fd5b505050604051805190506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561145157600080fd5b5af1151561145e57600080fd5b5050506040518051905050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f157600080fd5b60008460ff161015801561150c57506005805490508460ff16105b151561151757600080fd5b60058460ff1681548110151561152957fe5b90600052602060002090600402019050611552816000015460035461295490919063ffffffff16565b600381905550611573670de0b6b3a76400008461296d90919063ffffffff16565b816000018190555081816001018190555061159d8160000154600354612c3190919063ffffffff16565b60038190555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561160457600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116a357600080fd5b8060128190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170a57600080fd5b600090505b6005805490508110156117695760058181548110151561172b57fe5b90600052602060002090600402016000808201600090556001820160009055600282016000905560038201600090555050808060010191505061170f565b6005805490506005818180549050039150816117859190612c4f565b50600060038190555050565b600c5481565b60008060008060008060149054906101000a900460ff161515156117ba57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181557600080fd5b601054601154019450600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156118a357600080fd5b5af115156118b057600080fd5b5050506040518051905093506118f76118d486600a5461295490919063ffffffff16565b6118e9600a548761296d90919063ffffffff16565b6129a090919063ffffffff16565b9250611922600a546119146010548661296d90919063ffffffff16565b6129a090919063ffffffff16565b915061194d600a5461193f6011548661296d90919063ffffffff16565b6129a090919063ffffffff16565b9050600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611a1357600080fd5b5af11515611a2057600080fd5b5050506040518051905050600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611b1157600080fd5b5af11515611b1e57600080fd5b5050506040518051905050600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611bed57600080fd5b5af11515611bfa57600080fd5b5050506040518051905050600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611ceb57600080fd5b5af11515611cf857600080fd5b5050506040518051905050611d2a81611d1c84600c54612c3190919063ffffffff16565b612c3190919063ffffffff16565b600c81905550600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d64bcb46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515611db557600080fd5b5af11515611dc257600080fd5b50505060405180519050505050505050565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e3557600080fd5b600060149054906101000a900460ff16151515611e5157600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600581815481101515611ea957fe5b90600052602060002090600402016000915090508060000154908060010154908060020154908060030154905084565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60115481565b611f38612c81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f9357600080fd5b600083118015611fa35750600082115b1515611fae57600080fd5b608060405190810160405280611fd5670de0b6b3a76400008661296d90919063ffffffff16565b81526020018381526020016000815260200160008152509050600580548060010182816120029190612caa565b916000526020600020906004020160008390919091506000820151816000015560208201518160010155604082015181600201556060820151816003015550505061205c8160000151600354612c3190919063ffffffff16565b600381905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120c257600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561216157600080fd5b8060108190555050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121c957600080fd5b60008360ff16101580156121e457506005805490508360ff16105b15156121ef57600080fd5b60058360ff1681548110151561220157fe5b9060005260206000209060040201915061222a826000015460035461295490919063ffffffff16565b60038190555060058360ff1681548110151561224257fe5b906000526020600020906004020160008082016000905560018201600090556002820160009055600382016000905550508260ff1690505b6001600580549050038110156122ff5760056001820181548110151561229c57fe5b90600052602060002090600402016005828154811015156122b957fe5b906000526020600020906004020160008201548160000155600182015481600101556002820154816002015560038201548160030155905050808060010191505061227a565b60058054809190600190036123149190612c4f565b50505050565b600d60009054906101000a900460ff1681565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238e57600080fd5b600d60009054906101000a900460ff161515156123aa57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600d60006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246457600080fd5b600d60019054906101000a900460ff1615151561248057600080fd5b806009819055506001600d60016101000a81548160ff02191690831515021790555050565b600b5481565b6124b3612c81565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561251057600080fd5b6005805490508560ff1610151561252657600080fd5b60806040519081016040528061254d670de0b6b3a76400008761296d90919063ffffffff16565b8152602001848152602001600081526020016000815250915061257f8260000151600354612c3190919063ffffffff16565b600381905550600580548091906001016125999190612c4f565b5060026005805490500390505b8460ff16811115612627576005818154811015156125c057fe5b90600052602060002090600402016005600183018154811015156125e057fe5b9060005260206000209060040201600082015481600001556001820154816001015560028201548160020155600382015481600301559050508080600190039150506125a6565b8160056001870160ff1681548110151561263d57fe5b9060005260206000209060040201600082015181600001556020820151816001015560408201518160020155606082015181600301559050505050505050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126de57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561271a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561283357600080fd5b8060018190555050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561289e57600080fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082821115151561296257fe5b818303905092915050565b6000808284029050600084148061298e575082848281151561298b57fe5b04145b151561299657fe5b8091505092915050565b60008082848115156129ae57fe5b0490508091505092915050565b60008060006129c8611184565b92506005838154811015156129d957fe5b90600052602060002090600402019150612a0082600101548561296d90919063ffffffff16565b9050600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515612ac657600080fd5b5af11515612ad357600080fd5b5050506040518051905050600d60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515612ba257600080fd5b5af11515612baf57600080fd5b5050506040518051905050612bcf81600c54612c3190919063ffffffff16565b600c81905550612bea84600454612c3190919063ffffffff16565b600481905550612c07848360020154612c3190919063ffffffff16565b826002018190555081600001548260020154101515612c2a574282600301819055505b5050505050565b6000808284019050838110151515612c4557fe5b8091505092915050565b815481835581811511612c7c57600402816004028360005260206000209182019101612c7b9190612cdc565b5b505050565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b815481835581811511612cd757600402816004028360005260206000209182019101612cd69190612cdc565b5b505050565b612d1891905b80821115612d145760008082016000905560018201600090556002820160009055600382016000905550600401612ce2565b5090565b905600a165627a7a72305820c1966c335b25f57018eeb17999f75b70b61ebab78db05e1897cf7f5677ffa8c60029"
}