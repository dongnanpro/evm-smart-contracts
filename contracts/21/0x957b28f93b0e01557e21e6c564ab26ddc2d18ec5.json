{
  "address": "0x957b28f93b0e01557e21e6c564ab26ddc2d18ec5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProxyNemodax",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity 0.5.4;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title MultiOwnable\n *\n * @dev Require majority approval of multiple owners to use and access to features\n *      when restrictions on access to critical functions are required.\n *\n */\n\ncontract MultiOwnable {\n    using SafeMath for uint8;\n\n    struct CommitteeStatusPack{\n      /**\n       * Key informations for decisions.\n       * To save some gas, choosing the struct.\n       */\n        uint8 numOfOwners;\n        uint8 numOfVotes;\n        uint8 numOfMinOwners;\n        bytes proposedFuncData;\n    }\n    CommitteeStatusPack public committeeStatus;\n\n    address[] public ballot; // To make sure if it already was voted\n    mapping(address => bool) public owner;\n\n    event Vote(address indexed proposer, bytes indexed proposedFuncData);\n    event Propose(address indexed proposer, bytes indexed proposedFuncData);\n    event Dismiss(address indexed proposer, bytes indexed proposedFuncData);\n    event AddedOwner(address newOwner);\n    event RemovedOwner(address removedOwner);\n    event TransferOwnership(address from, address to);\n\n\n    /**\n     * Organize initial committee.\n     *\n     * @notice committee must be 3 at least.\n     *         you have to use this contract to be inherited because it is internal.\n     *\n     * @param _coOwner1 _coOwner2 _coOwner3 _coOwner4 _coOwner5 committee members\n     */\n    constructor(address _coOwner1, address _coOwner2, address _coOwner3, address _coOwner4, address _coOwner5) internal {\n        require(_coOwner1 != address(0x0) &&\n                _coOwner2 != address(0x0) &&\n                _coOwner3 != address(0x0) &&\n                _coOwner4 != address(0x0) &&\n                _coOwner5 != address(0x0));\n        require(_coOwner1 != _coOwner2 &&\n                _coOwner1 != _coOwner3 &&\n                _coOwner1 != _coOwner4 &&\n                _coOwner1 != _coOwner5 &&\n                _coOwner2 != _coOwner3 &&\n                _coOwner2 != _coOwner4 &&\n                _coOwner2 != _coOwner5 &&\n                _coOwner3 != _coOwner4 &&\n                _coOwner3 != _coOwner5 &&\n                _coOwner4 != _coOwner5); // SmartDec Recommendations\n        owner[_coOwner1] = true;\n        owner[_coOwner2] = true;\n        owner[_coOwner3] = true;\n        owner[_coOwner4] = true;\n        owner[_coOwner5] = true;\n        committeeStatus.numOfOwners = 5;\n        committeeStatus.numOfMinOwners = 5;\n        emit AddedOwner(_coOwner1);\n        emit AddedOwner(_coOwner2);\n        emit AddedOwner(_coOwner3);\n        emit AddedOwner(_coOwner4);\n        emit AddedOwner(_coOwner5);\n    }\n\n\n    modifier onlyOwner() {\n        require(owner[msg.sender]);\n        _;\n    }\n\n    /**\n     * Pre-check if it's decided by committee\n     *\n     * @notice If there is a majority approval,\n     *         the function with this modifier will not be executed.\n     */\n    modifier committeeApproved() {\n      /* check if proposed Function Name and real function Name are correct */\n      require( keccak256(committeeStatus.proposedFuncData) == keccak256(msg.data) ); // SmartDec Recommendations\n\n      /* To check majority */\n      require(committeeStatus.numOfVotes > committeeStatus.numOfOwners.div(2));\n      _;\n      _dismiss(); //Once a commission-approved proposal is made, the proposal is initialized.\n    }\n\n\n    /**\n     * Suggest the functions you want to use.\n     *\n     * @notice To use some importan functions, propose function must be done first and voted.\n     */\n    function propose(bytes memory _targetFuncData) onlyOwner public {\n      /* Check if there're any ongoing proposals */\n      require(committeeStatus.numOfVotes == 0);\n      require(committeeStatus.proposedFuncData.length == 0);\n\n      /* regist function informations that proposer want to run */\n      committeeStatus.proposedFuncData = _targetFuncData;\n      emit Propose(msg.sender, _targetFuncData);\n    }\n\n    /**\n     * Proposal is withdrawn\n     *\n     * @notice When the proposed function is no longer used or deprecated,\n     *         proposal is discarded\n     */\n    function dismiss() onlyOwner public {\n      _dismiss();\n    }\n\n    /**\n     * Suggest the functions you want to use.\n     *\n     * @notice 'dismiss' is executed even after successfully executing the proposed function.\n     *          If 'msg.sender' want to pass permission, he can't pass the 'committeeApproved' modifier.\n     *          internal functions are required to enable this.\n     */\n\n    function _dismiss() internal {\n      emit Dismiss(msg.sender, committeeStatus.proposedFuncData);\n      committeeStatus.numOfVotes = 0;\n      committeeStatus.proposedFuncData = \"\";\n      delete ballot;\n    }\n\n\n    /**\n     * Owners vote for proposed item\n     *\n     * @notice if only there're proposals, 'vote' is processed.\n     *         the result must be majority.\n     *         one ticket for each owner.\n     */\n\n    function vote() onlyOwner public {\n      // Check duplicated voting list.\n      uint length = ballot.length; // SmartDec Recommendations\n      for(uint i=0; i<length; i++) // SmartDec Recommendations\n        require(ballot[i] != msg.sender);\n\n      //onlyOnwers can vote, if there's ongoing proposal.\n      require( committeeStatus.proposedFuncData.length != 0 );\n\n      //Check, if everyone voted.\n      //require(committeeStatus.numOfOwners > committeeStatus.numOfVotes); // SmartDec Recommendations\n      committeeStatus.numOfVotes++;\n      ballot.push(msg.sender);\n      emit Vote(msg.sender, committeeStatus.proposedFuncData);\n    }\n\n\n    /**\n     * Existing owner transfers permissions to new owner.\n     *\n     * @notice It transfers authority to the person who was not the owner.\n     *           Approval from the committee is required.\n     */\n    function transferOwnership(address _newOwner) onlyOwner committeeApproved public {\n        require( _newOwner != address(0x0) ); // callisto recommendation\n        require( owner[_newOwner] == false );\n        owner[msg.sender] = false;\n        owner[_newOwner] = true;\n        emit TransferOwnership(msg.sender, _newOwner);\n    }\n\n    /**\n     * Add new Owner to committee\n     *\n     * @notice Approval from the committee is required.\n     *\n     */\n    function addOwner(address _newOwner) onlyOwner committeeApproved public {\n        require( _newOwner != address(0x0) );\n        require( owner[_newOwner] != true );\n        owner[_newOwner] = true;\n        committeeStatus.numOfOwners++;\n        emit AddedOwner(_newOwner);\n    }\n\n    /**\n     * Remove the Owner from committee\n     *\n     * @notice Approval from the committee is required.\n     *\n     */\n    function removeOwner(address _toRemove) onlyOwner committeeApproved public {\n        require( _toRemove != address(0x0) );\n        require( owner[_toRemove] == true );\n        require( committeeStatus.numOfOwners > committeeStatus.numOfMinOwners ); // must keep Number of Minimum Owners at least.\n        owner[_toRemove] = false;\n        committeeStatus.numOfOwners--;\n        emit RemovedOwner(_toRemove);\n    }\n}\n\ncontract Pausable is MultiOwnable {\n    event Pause();\n    event Unpause();\n\n    bool internal paused;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    modifier noReentrancy() {\n        require(!paused);\n        paused = true;\n        _;\n        paused = false;\n    }\n\n    /* When you discover your smart contract is under attack, you can buy time to upgrade the contract by\n       immediately pausing the contract.\n     */\n    function pause() public onlyOwner committeeApproved whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() public onlyOwner committeeApproved whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n/**\n * Contract Managing TokenExchanger's address used by ProxyNemodax\n */\ncontract RunningContractManager is Pausable {\n    address public implementation; //SmartDec Recommendations\n\n    event Upgraded(address indexed newContract);\n\n    function upgrade(address _newAddr) onlyOwner committeeApproved external {\n        require(implementation != _newAddr);\n        implementation = _newAddr;\n        emit Upgraded(_newAddr); // SmartDec Recommendations\n    }\n\n    /* SmartDec Recommendations\n    function runningAddress() onlyOwner external view returns (address){\n        return implementation;\n    }\n    */\n}\n\n\n\n/**\n * NemoLab ERC20 Token\n * Written by Shin HyunJae\n * version 12\n */\ncontract TokenERC20 is RunningContractManager {\n    using SafeMath for uint256;\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    //mapping (address => bool) public frozenAccount; // SmartDec Recommendations\n    mapping (address => uint256) public frozenExpired;\n\n    //bool private initialized = false;\n    bool private initialized; // SmartDec Recommendations\n\n    /**\n     * This is area for some variables to add.\n     * Please add variables from the end of pre-declared variables\n     * if you would have added some variables and re-deployed the contract,\n     * tokenPerEth would get garbage value. so please reset tokenPerEth variable\n     *\n     * uint256 something..;\n     */\n\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event LastBalance(address indexed account, uint256 value);\n\n    // This notifies clients about the allowance of balance\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    // event Burn(address indexed from, uint256 value); // callisto recommendation\n\n    // This notifies clients about the freezing address\n    //event FrozenFunds(address target, bool frozen); // callisto recommendation\n    event FrozenFunds(address target, uint256 expirationDate); // SmartDec Recommendations\n\n    /**\n     * Initialize Token Function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n\n    function initToken(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        uint256 _initialSupply,\n        address _marketSaleManager,\n        address _serviceOperationManager,\n        address _dividendManager,\n        address _incentiveManager,\n        address _reserveFundManager\n    ) internal onlyOwner committeeApproved {\n        require( initialized == false );\n        require(_initialSupply > 0 && _initialSupply <= 2**uint256(184)); // [2019.03.05] Fixed for Mythril Vulerablity SWC ID:101 => _initialSupply <= 2^184 <= (2^256 / 10^18)\n\n        name = _tokenName;                                       // Set the name for display purposes\n        symbol = _tokenSymbol;                                   // Set the symbol for display purposes\n        //totalSupply = convertToDecimalUnits(_initialSupply);     // Update total supply with the decimal amount\n\n        /*balances[msg.sender] = totalSupply;                     // Give the creator all initial tokens\n        emit Transfer(address(this), address(0), totalSupply);\n        emit LastBalance(address(this), 0);\n        emit LastBalance(msg.sender, totalSupply);*/\n\n        // SmartDec Recommendations\n        uint256 tempSupply = convertToDecimalUnits(_initialSupply);\n\n        uint256 dividendBalance = tempSupply.div(10);               // dividendBalance = 10%\n        uint256 reserveFundBalance = dividendBalance;               // reserveFundBalance = 10%\n        uint256 marketSaleBalance = tempSupply.div(5);              // marketSaleBalance = 20%\n        uint256 serviceOperationBalance = marketSaleBalance.mul(2); // serviceOperationBalance = 40%\n        uint256 incentiveBalance = marketSaleBalance;               // incentiveBalance = 20%\n\n        balances[_marketSaleManager] = marketSaleBalance;\n        balances[_serviceOperationManager] = serviceOperationBalance;\n        balances[_dividendManager] = dividendBalance;\n        balances[_incentiveManager] = incentiveBalance;\n        balances[_reserveFundManager] = reserveFundBalance;\n\n        totalSupply = tempSupply;\n\n        emit Transfer(address(0), _marketSaleManager, marketSaleBalance);\n        emit Transfer(address(0), _serviceOperationManager, serviceOperationBalance);\n        emit Transfer(address(0), _dividendManager, dividendBalance);\n        emit Transfer(address(0), _incentiveManager, incentiveBalance);\n        emit Transfer(address(0), _reserveFundManager, reserveFundBalance);\n\n        emit LastBalance(address(this), 0);\n        emit LastBalance(_marketSaleManager, marketSaleBalance);\n        emit LastBalance(_serviceOperationManager, serviceOperationBalance);\n        emit LastBalance(_dividendManager, dividendBalance);\n        emit LastBalance(_incentiveManager, incentiveBalance);\n        emit LastBalance(_reserveFundManager, reserveFundBalance);\n\n        assert( tempSupply ==\n          marketSaleBalance.add(serviceOperationBalance).\n                            add(dividendBalance).\n                            add(incentiveBalance).\n                            add(reserveFundBalance)\n        );\n\n\n        initialized = true;\n    }\n\n\n    /**\n     * Convert tokens units to token decimal units\n     *\n     * @param _value Tokens units without decimal units\n     */\n    function convertToDecimalUnits(uint256 _value) internal view returns (uint256 value) {\n        value = _value.mul(10 ** uint256(decimals));\n        return value;\n    }\n\n    /**\n     * Get tokens balance\n     *\n     * @notice Query tokens balance of the _account\n     *\n     * @param _account Account address to query tokens balance\n     */\n    function balanceOf(address _account) public view returns (uint256 balance) {\n        balance = balances[_account];\n        return balance;\n    }\n\n    /**\n     * Get allowed tokens balance\n     *\n     * @notice Query tokens balance allowed to _spender\n     *\n     * @param _owner Owner address to query tokens balance\n     * @param _spender The address allowed tokens balance\n     */\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\n        remaining = allowed[_owner][_spender];\n        return remaining;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0x0));                                            // Prevent transfer to 0x0 address.\n        require(balances[_from] >= _value);                             // Check if the sender has enough\n        if(frozenExpired[_from] != 0 ){                                 // Check if sender is frozen\n            require(block.timestamp > frozenExpired[_from]);\n            _unfreezeAccount(_from);\n        }\n        if(frozenExpired[_to] != 0 ){                                   // Check if recipient is frozen\n            require(block.timestamp > frozenExpired[_to]);\n            _unfreezeAccount(_to);\n        }\n\n        uint256 previousBalances = balances[_from].add(balances[_to]);  // Save this for an assertion in the future\n\n        balances[_from] = balances[_from].sub(_value);                  // Subtract from the sender\n        balances[_to] = balances[_to].add(_value);                      // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n        emit LastBalance(_from, balances[_from]);\n        emit LastBalance(_to, balances[_to]);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * @notice Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public noReentrancy returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        success = true;\n        return success;\n    }\n\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public noReentrancy returns (bool success) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        success = true;\n        return success;\n    }\n\n    /**\n     * Internal approve, only can be called by this contract\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function _approve(address _spender, uint256 _value) internal returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        success = true;\n        return success;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public noReentrancy returns (bool success) {\n        success = _approve(_spender, _value);\n        return success;\n    }\n\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n      allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n      uint256 oldValue = allowed[msg.sender][_spender];\n      if (_subtractedValue >= oldValue) {\n        allowed[msg.sender][_spender] = 0;\n      } else {\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n      }\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n    }\n\n\n\n\n    /// @notice `freeze? Prevent` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    function freezeAccount(address target, uint256 freezeExpiration) onlyOwner committeeApproved public {\n        frozenExpired[target] = freezeExpiration;\n        //emit FrozenFunds(target, true);\n        emit FrozenFunds(target, freezeExpiration); // SmartDec Recommendations\n    }\n\n    /// @notice  `freeze? Allow` `target` from sending & receiving tokens\n    /// @notice if expiration date was over, when this is called with transfer transaction, auto-unfreeze is occurred without committeeApproved\n    ///         the reason why it's separated from wrapper function.\n    /// @param target Address to be unfrozen\n    function _unfreezeAccount(address target) internal returns (bool success) {\n        frozenExpired[target] = 0;\n        //emit FrozenFunds(target, false);\n        emit FrozenFunds(target, 0); // SmartDec Recommendations\n        success = true;\n        return success;\n    }\n\n    /// @notice _unfreezeAccount wrapper function.\n    /// @param target Address to be unfrozen\n    function unfreezeAccount(address target) onlyOwner committeeApproved public returns(bool success) {\n        success = _unfreezeAccount(target);\n        return success;\n    }\n\n}\n\n\n/**\n * @title TokenExchanger\n * @notice This is for exchange between Ether and 'Nemo' token\n *          It won't be needed after being listed on the exchange.\n */\n\ncontract TokenExchanger is TokenERC20{\n  using SafeMath for uint256;\n\n    uint256 internal tokenPerEth;\n    bool public opened;\n\n    event ExchangeEtherToToken(address indexed from, uint256 etherValue, uint256 tokenPerEth);\n    event ExchangeTokenToEther(address indexed from, uint256 etherValue, uint256 tokenPerEth);\n    event WithdrawToken(address indexed to, uint256 value);\n    event WithdrawEther(address indexed to, uint256 value);\n    event SetExchangeRate(address indexed from, uint256 tokenPerEth);\n\n\n    constructor(address _coOwner1,\n                address _coOwner2,\n                address _coOwner3,\n                address _coOwner4,\n                address _coOwner5)\n        MultiOwnable( _coOwner1, _coOwner2, _coOwner3, _coOwner4, _coOwner5) public { opened = true; }\n\n    /**\n     * Initialize Exchanger Function\n     *\n     * Initialize Exchanger contract with tokenPerEth\n     * and Initialize NemoCoin by calling initToken\n     * It would call initToken in TokenERC20 with _tokenName, _tokenSymbol, _initalSupply\n     * Last five arguments are manager account to supply currency (_marketSaleManager, _serviceOperationManager, _dividendManager, _incentiveManager, _reserveFundManager)\n     *\n     */\n    function initExchanger(\n        string calldata _tokenName,\n        string calldata _tokenSymbol,\n        uint256 _initialSupply,\n        uint256 _tokenPerEth,\n        address _marketSaleManager,\n        address _serviceOperationManager,\n        address _dividendManager,\n        address _incentiveManager,\n        address _reserveFundManager\n    ) external onlyOwner committeeApproved {\n        require(opened);\n        //require(_tokenPerEth > 0 && _initialSupply > 0);  // [2019.03.05] Fixed for Mythril Vulerablity SWC ID:101\n        require(_tokenPerEth > 0); // SmartDec Recommendations\n        require(_marketSaleManager != address(0) &&\n                _serviceOperationManager != address(0) &&\n                _dividendManager != address(0) &&\n                _incentiveManager != address(0) &&\n                _reserveFundManager != address(0));\n        require(_marketSaleManager != _serviceOperationManager &&\n                _marketSaleManager != _dividendManager &&\n                _marketSaleManager != _incentiveManager &&\n                _marketSaleManager != _reserveFundManager &&\n                _serviceOperationManager != _dividendManager &&\n                _serviceOperationManager != _incentiveManager &&\n                _serviceOperationManager != _reserveFundManager &&\n                _dividendManager != _incentiveManager &&\n                _dividendManager != _reserveFundManager &&\n                _incentiveManager != _reserveFundManager); // SmartDec Recommendations\n\n        super.initToken(_tokenName, _tokenSymbol, _initialSupply,\n          // SmartDec Recommendations\n          _marketSaleManager,\n          _serviceOperationManager,\n          _dividendManager,\n          _incentiveManager,\n          _reserveFundManager\n        );\n        tokenPerEth = _tokenPerEth;\n        emit SetExchangeRate(msg.sender, tokenPerEth);\n    }\n\n\n    /**\n     * Change tokenPerEth variable only by owner\n     *\n     * Because \"TokenExchaner\" is only used until be listed on the exchange,\n     * tokenPerEth is needed by then and it would be managed by manager.\n     */\n    function setExchangeRate(uint256 _tokenPerEth) onlyOwner committeeApproved external returns (bool success){\n        require(opened);\n        require( _tokenPerEth > 0);\n        tokenPerEth = _tokenPerEth;\n        emit SetExchangeRate(msg.sender, tokenPerEth);\n\n        success = true;\n        return success;\n    }\n\n    function getExchangerRate() external view returns(uint256){\n        return tokenPerEth;\n    }\n\n    /**\n     * Exchange Ether To Token\n     *\n     * @notice Send `Nemo` tokens to msg sender as much as amount of ether received considering exchangeRate.\n     */\n    function exchangeEtherToToken() payable external noReentrancy returns (bool success){\n        require(opened);\n        uint256 tokenPayment;\n        uint256 ethAmount = msg.value;\n\n        require(ethAmount > 0);\n        require(tokenPerEth != 0);\n        tokenPayment = ethAmount.mul(tokenPerEth);\n\n        super._transfer(address(this), msg.sender, tokenPayment);\n\n        emit ExchangeEtherToToken(msg.sender, msg.value, tokenPerEth);\n\n        success = true;\n        return success;\n    }\n\n    /**\n     * Exchange Token To Ether\n     *\n     * @notice Send Ether to msg sender as much as amount of 'Nemo' Token received considering exchangeRate.\n     *\n     * @param _value Amount of 'Nemo' token\n     */\n    function exchangeTokenToEther(uint256 _value) external noReentrancy returns (bool success){\n      require(opened);\n      require(tokenPerEth != 0);\n\n      uint256 remainingEthBalance = address(this).balance;\n      uint256 etherPayment = _value.div(tokenPerEth);\n      uint256 remainder = _value % tokenPerEth; // [2019.03.06 Fixing Securify vulnerabilities-Division influences Transfer Amount]\n      require(remainingEthBalance >= etherPayment);\n\n      uint256 tokenAmount = _value.sub(remainder); // [2019.03.06 Fixing Securify vulnerabilities-Division influences Transfer Amount]\n      super._transfer(msg.sender, address(this), tokenAmount); // [2019.03.06 Fixing Securify vulnerabilities-Division influences Transfer Amount]\n      //require(address(msg.sender).send(etherPayment));\n      address(msg.sender).transfer(etherPayment); // SmartDec Recommendations\n\n      emit ExchangeTokenToEther(address(this), etherPayment, tokenPerEth);\n      success = true;\n      return success;\n    }\n\n    /**\n     * Withdraw token from TokenExchanger contract\n     *\n     * @notice Withdraw charged Token to _recipient.\n     *\n     * @param _recipient The address to which the token was issued.\n     * @param _value Amount of token to withdraw.\n     */\n    function withdrawToken(address _recipient, uint256 _value) onlyOwner committeeApproved noReentrancy public {\n      //require(opened);\n      super._transfer(address(this) ,_recipient, _value);\n      emit WithdrawToken(_recipient, _value);\n    }\n\n\n    /**\n     * Withdraw Ether from TokenExchanger contract\n     *\n     * @notice Withdraw charged Ether to _recipient.\n     *\n     * @param _recipient The address to which the Ether was issued.\n     * @param _value Amount of Ether to withdraw.\n     */\n    function withdrawEther(address payable _recipient, uint256 _value) onlyOwner committeeApproved noReentrancy public {\n        //require(opened);\n        //require(_recipient.send(_value));\n        _recipient.transfer(_value); // SmartDec Recommendations\n        emit WithdrawEther(_recipient, _value);\n    }\n\n    /**\n     * close the TokenExchanger functions permanently\n     *\n     * @notice This contract would be closed when the coin is actively traded and judged that its TokenExchanger function is not needed.\n     */\n    function closeExchanger() onlyOwner committeeApproved external {\n        opened = false;\n    }\n}\n\n\n/**\n * @title NemodaxStorage\n *\n * @dev This is contract for proxyNemodax data order list.\n *      Contract shouldn't be changed as possible.\n *      If it should be edited, please add from the end of the contract .\n */\n\ncontract NemodaxStorage is RunningContractManager {\n\n    // Never ever change the order of variables below!!!!\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    mapping (address => uint256) public frozenExpired; // SmartDec Recommendations\n\n    bool private initialized;\n\n    uint256 internal tokenPerEth;\n    bool public opened = true;\n}\n\n/**\n * @title ProxyNemodax\n *\n * @dev The only fallback function will forward transaction to TokenExchanger Contract.\n *      and the result of calculation would be stored in ProxyNemodax\n *\n */\n\ncontract ProxyNemodax is NemodaxStorage {\n\n    /* Initialize new committee. this will be real committee accounts, not from TokenExchanger contract */\n    constructor(address _coOwner1,\n                address _coOwner2,\n                address _coOwner3,\n                address _coOwner4,\n                address _coOwner5)\n        MultiOwnable( _coOwner1, _coOwner2, _coOwner3, _coOwner4, _coOwner5) public {}\n\n    function () payable external {\n        address localImpl = implementation;\n        require(localImpl != address(0x0));\n\n        assembly {\n            let ptr := mload(0x40)\n\n            switch calldatasize\n            case 0 {  } // just to receive ethereum\n\n            default{\n                calldatacopy(ptr, 0, calldatasize)\n\n                let result := delegatecall(gas, localImpl, ptr, calldatasize, 0, 0)\n                let size := returndatasize\n                returndatacopy(ptr, 0, size)\n                switch result\n\n                case 0 { revert(ptr, size) }\n                default { return(ptr, size) }\n            }\n        }\n    }\n}",
  "bytecode": "60806040526007805460ff19908116601217909155600e805490911660011790553480156200002d57600080fd5b5060405160a08062001887833981018060405260a08110156200004f57600080fd5b508051602082015160408301516060840151608090940151929391929091908484848484600160a060020a03851615801590620000945750600160a060020a03841615155b8015620000a95750600160a060020a03831615155b8015620000be5750600160a060020a03821615155b8015620000d35750600160a060020a03811615155b1515620000df57600080fd5b83600160a060020a031685600160a060020a03161415801562000114575082600160a060020a031685600160a060020a031614155b801562000133575081600160a060020a031685600160a060020a031614155b801562000152575080600160a060020a031685600160a060020a031614155b801562000171575082600160a060020a031684600160a060020a031614155b801562000190575081600160a060020a031684600160a060020a031614155b8015620001af575080600160a060020a031684600160a060020a031614155b8015620001ce575081600160a060020a031683600160a060020a031614155b8015620001ed575080600160a060020a031683600160a060020a031614155b80156200020c575080600160a060020a031682600160a060020a031614155b15156200021857600080fd5b600160a060020a0385811660008181526003602090815260408083208054600160ff1991821681179092558a871685528285208054821683179055898716855282852080548216831790558887168552828520805482168317905595871684528184208054871690911790558254600595169490941762ff0000191662050000179091558251918252915160008051602062001867833981519152929181900390910190a160408051600160a060020a03861681529051600080516020620018678339815191529181900360200190a160408051600160a060020a03851681529051600080516020620018678339815191529181900360200190a160408051600160a060020a03841681529051600080516020620018678339815191529181900360200190a160408051600160a060020a03831681529051600080516020620018678339815191529181900360200190a1505050505050505050506114e480620003836000396000f3fe608060405260043610610131576000357c0100000000000000000000000000000000000000000000000000000000900480635c60da1b116100bd5780637065cb48116100815780637065cb48146105295780638456cb591461055c57806395d89b4114610571578063e794273414610586578063f2fde38b146105b057610131565b80635c60da1b146104545780635f88eade14610485578063632a9a52146104ae578063666e1b39146104c35780636ebc9d6b146104f657610131565b806318160ddd1161010457806318160ddd14610286578063313ce567146102ad57806331d26094146102d857806337558af51461038c5780633f4ba83a1461043f57610131565b806306fdde031461017f5780630900f0101461020957806311c8ccb81461023e578063173825d914610253575b6004546101009004600160a060020a031680151561014e57600080fd5b60405136801561017a5736600083376000803684865af43d806000853e818015610176578185f35b8185fd5b505050005b34801561018b57600080fd5b506101946105e3565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ce5781810151838201526020016101b6565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021557600080fd5b5061023c6004803603602081101561022c57600080fd5b5035600160a060020a0316610671565b005b34801561024a57600080fd5b5061023c6107d8565b34801561025f57600080fd5b5061023c6004803603602081101561027657600080fd5b5035600160a060020a0316610800565b34801561029257600080fd5b5061029b6109ac565b60408051918252519081900360200190f35b3480156102b957600080fd5b506102c26109b2565b6040805160ff9092168252519081900360200190f35b3480156102e457600080fd5b506102ed6109bb565b604051808560ff1660ff1681526020018460ff1660ff1681526020018360ff1660ff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561034e578181015183820152602001610336565b50505050905090810190601f16801561037b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561039857600080fd5b5061023c600480360360208110156103af57600080fd5b8101906020810181356401000000008111156103ca57600080fd5b8201836020820111156103dc57600080fd5b803590602001918460018302840111640100000000831117156103fe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a61945050505050565b34801561044b57600080fd5b5061023c610b4d565b34801561046057600080fd5b50610469610c79565b60408051600160a060020a039092168252519081900360200190f35b34801561049157600080fd5b5061049a610c8d565b604080519115158252519081900360200190f35b3480156104ba57600080fd5b5061023c610c96565b3480156104cf57600080fd5b5061049a600480360360208110156104e657600080fd5b5035600160a060020a0316610e24565b34801561050257600080fd5b5061029b6004803603602081101561051957600080fd5b5035600160a060020a0316610e39565b34801561053557600080fd5b5061023c6004803603602081101561054c57600080fd5b5035600160a060020a0316610e4b565b34801561056857600080fd5b5061023c610fe0565b34801561057d57600080fd5b5061019461110e565b34801561059257600080fd5b50610469600480360360208110156105a957600080fd5b5035611169565b3480156105bc57600080fd5b5061023c600480360360208110156105d357600080fd5b5035600160a060020a0316611191565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b505050505081565b3360009081526003602052604090205460ff16151561068f57600080fd5b60003660405180838380828437604051920182900382206001805491965094509192508291849150600260001961010083851615020190911604801561070c5780601f106106ea57610100808354040283529182019161070c565b820191906000526020600020905b8154815290600101906020018083116106f8575b5050915050604051809103902014151561072557600080fd5b60005461073c9060ff16600263ffffffff61132416565b600054610100900460ff161161075157600080fd5b600454600160a060020a0382811661010090920416141561077157600080fd5b6004805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038416908102919091179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a26107d5611339565b50565b3360009081526003602052604090205460ff1615156107f657600080fd5b6107fe611339565b565b3360009081526003602052604090205460ff16151561081e57600080fd5b60003660405180838380828437604051920182900382206001805491965094509192508291849150600260001961010083851615020190911604801561089b5780601f1061087957610100808354040283529182019161089b565b820191906000526020600020905b815481529060010190602001808311610887575b505091505060405180910390201415156108b457600080fd5b6000546108cb9060ff16600263ffffffff61132416565b600054610100900460ff16116108e057600080fd5b600160a060020a03811615156108f557600080fd5b600160a060020a03811660009081526003602052604090205460ff16151560011461091f57600080fd5b60005460ff620100008204811691161161093857600080fd5b600160a060020a0381166000818152600360209081526040808320805460ff19908116909155835460001960ff8281169190910116911617909255815192835290517ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9281900390910190a16107d5611339565b60085481565b60075460ff1681565b600080546001805460408051602060026101008587161581026000190190951604601f810182900482028301820190935282825260ff808716979487048116966201000090041694919290830182828015610a575780601f10610a2c57610100808354040283529160200191610a57565b820191906000526020600020905b815481529060010190602001808311610a3a57829003601f168201915b5050505050905084565b3360009081526003602052604090205460ff161515610a7f57600080fd5b600054610100900460ff1615610a9457600080fd5b600180546002918116156101000260001901160415610ab257600080fd5b8051610ac5906001906020840190611403565b50806040518082805190602001908083835b60208310610af65780518252601f199092019160209182019101610ad7565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f641e122cc622920a3bce4840ce4dbc59f7bb5601be24c153c67daabb9134b2569160009150a350565b3360009081526003602052604090205460ff161515610b6b57600080fd5b600036604051808383808284376040519201829003822060018054919650945091925082918491506002600019610100838516150201909116048015610be85780601f10610bc6576101008083540402835291820191610be8565b820191906000526020600020905b815481529060010190602001808311610bd4575b50509150506040518091039020141515610c0157600080fd5b600054610c189060ff16600263ffffffff61132416565b600054610100900460ff1611610c2d57600080fd5b60045460ff161515610c3e57600080fd5b6004805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a16107fe611339565b6004546101009004600160a060020a031681565b600e5460ff1681565b3360009081526003602052604090205460ff161515610cb457600080fd5b60025460005b81811015610cfb576002805433919083908110610cd357fe5b600091825260209091200154600160a060020a03161415610cf357600080fd5b600101610cba565b5060018054600291811615610100026000190116041515610d1b57600080fd5b6000805460ff61010080830482166001908101909216810261ff0019909316929092178355600280548083018255938190527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909301805473ffffffffffffffffffffffffffffffffffffffff19163317905560405181549193909283928592818416159092026000190116048015610deb5780601f10610dc9576101008083540402835291820191610deb565b820191906000526020600020905b815481529060010190602001808311610dd7575b505060405190819003812092503391507f1bacfd660758a6eee44b9973ba8e452aad60edbcffc67bbae34e8cb3fa3e52da90600090a350565b60036020526000908152604090205460ff1681565b600b6020526000908152604090205481565b3360009081526003602052604090205460ff161515610e6957600080fd5b600036604051808383808284376040519201829003822060018054919650945091925082918491506002600019610100838516150201909116048015610ee65780601f10610ec4576101008083540402835291820191610ee6565b820191906000526020600020905b815481529060010190602001808311610ed2575b50509150506040518091039020141515610eff57600080fd5b600054610f169060ff16600263ffffffff61132416565b600054610100900460ff1611610f2b57600080fd5b600160a060020a0381161515610f4057600080fd5b600160a060020a03811660009081526003602052604090205460ff16151560011415610f6b57600080fd5b600160a060020a03811660008181526003602090815260408083208054600160ff199182168117909255845490811660ff9182169092011617909255815192835290517f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269281900390910190a16107d5611339565b3360009081526003602052604090205460ff161515610ffe57600080fd5b60003660405180838380828437604051920182900382206001805491965094509192508291849150600260001961010083851615020190911604801561107b5780601f1061105957610100808354040283529182019161107b565b820191906000526020600020905b815481529060010190602001808311611067575b5050915050604051809103902014151561109457600080fd5b6000546110ab9060ff16600263ffffffff61132416565b600054610100900460ff16116110c057600080fd5b60045460ff16156110d057600080fd5b6004805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a16107fe611339565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106695780601f1061063e57610100808354040283529160200191610669565b600280548290811061117757fe5b600091825260209091200154600160a060020a0316905081565b3360009081526003602052604090205460ff1615156111af57600080fd5b60003660405180838380828437604051920182900382206001805491965094509192508291849150600260001961010083851615020190911604801561122c5780601f1061120a57610100808354040283529182019161122c565b820191906000526020600020905b815481529060010190602001808311611218575b5050915050604051809103902014151561124557600080fd5b60005461125c9060ff16600263ffffffff61132416565b600054610100900460ff161161127157600080fd5b600160a060020a038116151561128657600080fd5b600160a060020a03811660009081526003602052604090205460ff16156112ac57600080fd5b336000818152600360209081526040808320805460ff19908116909155600160a060020a038616808552938290208054909116600117905580519384529083019190915280517f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c9281900390910190a16107d5611339565b6000818381151561133157fe5b049392505050565b600060010160405180828054600181600116156101000203166002900480156113995780601f10611377576101008083540402835291820191611399565b820191906000526020600020905b815481529060010190602001808311611385575b505060405190819003812092503391507fd3a993c9c64be96d3e5d92cf1dee9b4f3c7d3278ee948819cc8552a9e3c49f5190600090a36000805461ff00191681556040805160208101918290528290526113f69160019190611403565b506107fe60026000611481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061144457805160ff1916838001178555611471565b82800160010185558215611471579182015b82811115611471578251825591602001919060010190611456565b5061147d92915061149b565b5090565b50805460008255906000526020600020908101906107d591905b6114b591905b8082111561147d57600081556001016114a1565b9056fea165627a7a7230582074c0ae1b4ebeda8934f4a7a9c550893cbc2026406a5ac0b37145815a82bceb6300299465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26000000000000000000000000b5e2d980bb3c9a0300d824fa0db47a92fec5fccf00000000000000000000000096f3e8c4c11fcd0aa7cce9b7c5221ebc26b4ada80000000000000000000000008323b1a64cc2579a5f899bb3277c7b616bde6276000000000000000000000000e2d57239c6785ee9586e94dc5eaa33b6978a6785000000000000000000000000f91ed17cd1f7849f2ff8617b2a38a67e4bfd0791",
  "constructorArguments": "000000000000000000000000b5e2d980bb3c9a0300d824fa0db47a92fec5fccf00000000000000000000000096f3e8c4c11fcd0aa7cce9b7c5221ebc26b4ada80000000000000000000000008323b1a64cc2579a5f899bb3277c7b616bde6276000000000000000000000000e2d57239c6785ee9586e94dc5eaa33b6978a6785000000000000000000000000f91ed17cd1f7849f2ff8617b2a38a67e4bfd0791"
}