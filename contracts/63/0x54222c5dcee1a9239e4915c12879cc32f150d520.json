{
  "address": "0x54222c5dcee1a9239e4915c12879cc32f150d520",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.8;\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowances[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowances[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n    \n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n}\n\ncontract CSCToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    string public constant name     = \"Crypto Service Capital Token\";\n    string public constant symbol   = \"CSCT\";\n    uint8  public constant decimals = 18;\n    \n    bool public mintingFinished = false;\n    mapping (address => bool) private _minters;\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    \n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n    \n    function isMinter(address minter) public view returns (bool) {\n        if (owner() == minter) {\n            return true;\n        }\n        return _minters[minter];\n    }\n    \n    modifier onlyMinter() {\n        require(isMinter(msg.sender), \"Minter: caller is not the minter\");\n        _;\n    }\n    \n    function addMinter(address _minter) external onlyOwner returns (bool) {\n        require(_minter != address(0));\n        _minters[_minter] = true;\n        return true;\n    }\n    \n    function removeMinter(address _minter) external onlyOwner returns (bool) {\n        require(_minter != address(0));\n        _minters[_minter] = false;\n        return true;\n    }\n    \n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        emit Mint(to, value);\n        return true;\n    }\n    \n    function finishMinting() onlyOwner canMint external returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public constant rate = 1000;                                           // How many token units a buyer gets per wei\n    uint256 public constant cap = 10000 ether;                                     // Maximum amount of funds\n\n    bool public isFinalized = false;                                               // End timestamps where investments are allowed\n    uint256 public startTime = 1561939199;                                         // 30-Jun-19 23:59:59 UTC\n    uint256 public endTime = 1577836799;                                           // 30-Dec-19 23:59:59 UTC\n\n    CSCToken public token;                                                         // CSCT token itself\n    address payable public wallet = 0x1524Aa69ef4BA327576FcF548f7dD14aEaC8CA18;    // Wallet of funds\n    uint256 public weiRaised;                                                      // Amount of raised money in wei\n\n    uint256 public firstBonus = 30;                                                // 1st bonus percentage\n    uint256 public secondBonus = 50;                                               // 2nd bonus percentage\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event Finalized();\n\n    constructor (CSCToken _CSCT) public {\n        assert(address(_CSCT) != address(0));\n        token = _CSCT;\n    }\n\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal view returns (bool) {\n        require(!token.mintingFinished());\n        require(weiRaised <= cap);\n        require(now >= startTime);\n        require(now <= endTime);\n        require(msg.value >= 0.001 ether);\n\n        return true;\n    }\n    \n    function tokensForWei(uint weiAmount) public view returns (uint tokens) {\n        tokens = weiAmount.mul(rate);\n        tokens = tokens.add(getBonus(tokens, weiAmount));\n    }\n    \n    function getBonus(uint256 _tokens, uint256 _weiAmount) public view returns (uint256) {\n        if (_weiAmount >= 30 ether) {\n            return _tokens.mul(secondBonus).div(100);\n        }\n        return _tokens.mul(firstBonus).div(100);\n    }\n\n    function buyTokens(address beneficiary) public payable {\n        require(beneficiary != address(0));\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n        uint256 tokens = tokensForWei(weiAmount);\n        weiRaised = weiRaised.add(weiAmount);\n\n        token.mint(beneficiary, tokens);\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        wallet.transfer(msg.value);\n    }\n\n    function setFirstBonus(uint256 _newBonus) onlyOwner external {\n        firstBonus = _newBonus;\n    }\n\n    function setSecondBonus(uint256 _newBonus) onlyOwner external {\n        secondBonus = _newBonus;\n    }\n\n    function changeEndTime(uint256 _newTime) onlyOwner external {\n        require(endTime >= now);\n        endTime = _newTime;\n    }\n\n    // Calls the contract's finalization function.\n    function finalize() onlyOwner external {\n        require(!isFinalized);\n\n        endTime = now;\n        isFinalized = true;\n        emit Finalized();\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded() external view returns (bool) {\n        return now > endTime;\n    }\n}",
  "bytecode": "608060405260008060146101000a81548160ff021916908315150217905550635d194cff600155635e0be0ff600255731524aa69ef4ba327576fcf548f7dd14aeac8ca18600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601e600655603260075534801561009957600080fd5b506040516020806114bf833981018060405260208110156100b957600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101bd57fe5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506112b18061020e6000396000f3fe6080604052600436106101355760003560e01c80637734e398116100ab5780639427aa961161006f5780639427aa9614610458578063ec8ac4d8146104b1578063eca058cc146104f5578063ecb70fb714610544578063f2fde38b14610573578063fc0c546a146105c457610135565b80637734e3981461033d57806378e97925146103785780638d4e4083146103a35780638da5cb5b146103d25780638f32d59b1461042957610135565b8063355274ea116100fd578063355274ea146102375780634042b66f146102625780634bb278f31461028d578063521eb273146102a457806361bb246c146102fb578063715018a61461032657610135565b8063127e499c146101405780632c4e722e1461016b5780633052b75e146101965780633197cbb6146101d157806332a9df46146101fc575b61013e3361061b565b005b34801561014c57600080fd5b50610155610853565b6040518082815260200191505060405180910390f35b34801561017757600080fd5b50610180610859565b6040518082815260200191505060405180910390f35b3480156101a257600080fd5b506101cf600480360360208110156101b957600080fd5b810190808035906020019092919050505061085f565b005b3480156101dd57600080fd5b506101e66108f2565b6040518082815260200191505060405180910390f35b34801561020857600080fd5b506102356004803603602081101561021f57600080fd5b81019080803590602001909291905050506108f8565b005b34801561024357600080fd5b5061024c61097c565b6040518082815260200191505060405180910390f35b34801561026e57600080fd5b5061027761098a565b6040518082815260200191505060405180910390f35b34801561029957600080fd5b506102a2610990565b005b3480156102b057600080fd5b506102b9610a74565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030757600080fd5b50610310610a9a565b6040518082815260200191505060405180910390f35b34801561033257600080fd5b5061033b610aa0565b005b34801561034957600080fd5b506103766004803603602081101561036057600080fd5b8101908080359060200190929190505050610bd9565b005b34801561038457600080fd5b5061038d610c5d565b6040518082815260200191505060405180910390f35b3480156103af57600080fd5b506103b8610c63565b604051808215151515815260200191505060405180910390f35b3480156103de57600080fd5b506103e7610c76565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043557600080fd5b5061043e610c9f565b604051808215151515815260200191505060405180910390f35b34801561046457600080fd5b5061049b6004803603604081101561047b57600080fd5b810190808035906020019092919080359060200190929190505050610cf6565b6040518082815260200191505060405180910390f35b6104f3600480360360208110156104c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061061b565b005b34801561050157600080fd5b5061052e6004803603602081101561051857600080fd5b8101908080359060200190929190505050610d68565b6040518082815260200191505060405180910390f35b34801561055057600080fd5b50610559610da4565b604051808215151515815260200191505060405180910390f35b34801561057f57600080fd5b506105c26004803603602081101561059657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610db0565b005b3480156105d057600080fd5b506105d9610e36565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561065557600080fd5b61065d610e5c565b61066657600080fd5b6000349050600061067682610d68565b905061068d82600554610f5d90919063ffffffff16565b600581905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b505050506040513d602081101561076657600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561084d573d6000803e3d6000fd5b50505050565b60065481565b6103e881565b610867610c9f565b6108d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b4260025410156108e857600080fd5b8060028190555050565b60025481565b610900610c9f565b610972576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060078190555050565b69021e19e0c9bab240000081565b60055481565b610998610c9f565b610a0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600060149054906101000a900460ff1615610a2457600080fd5b426002819055506001600060146101000a81548160ff0219169083151502179055507f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b610aa8610c9f565b610b1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610be1610c9f565b610c53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060068190555050565b60015481565b600060149054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60006801a055690d9db800008210610d3757610d306064610d2260075486610fe590919063ffffffff16565b61106b90919063ffffffff16565b9050610d62565b610d5f6064610d5160065486610fe590919063ffffffff16565b61106b90919063ffffffff16565b90505b92915050565b6000610d7f6103e883610fe590919063ffffffff16565b9050610d9d610d8e8284610cf6565b82610f5d90919063ffffffff16565b9050919050565b60006002544211905090565b610db8610c9f565b610e2a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610e33816110fa565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305d2035b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec657600080fd5b505afa158015610eda573d6000803e3d6000fd5b505050506040513d6020811015610ef057600080fd5b810190808051906020019092919050505015610f0b57600080fd5b69021e19e0c9bab24000006005541115610f2457600080fd5b600154421015610f3357600080fd5b600254421115610f4257600080fd5b66038d7ea4c68000341015610f5657600080fd5b6001905090565b600080828401905083811015610fdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080831415610ff85760009050611065565b600082840290508284828161100957fe5b0414611060576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806112656021913960400191505060405180910390fd5b809150505b92915050565b60008082116110e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b60008284816110ed57fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061123f6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a72305820ae8a5ae5102c90eaf5b74acb998ebb72e0c5ac68bb15334719ffea260758570600290000000000000000000000005e36c3db072f72566eda02d7c8037924f39b1bac",
  "constructorArguments": "0000000000000000000000005e36c3db072f72566eda02d7c8037924f39b1bac"
}