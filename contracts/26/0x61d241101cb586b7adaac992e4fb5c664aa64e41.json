{
  "address": "0x61d241101cb586b7adaac992e4fb5c664aa64e41",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PaymentProcessor",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/uniswap/UniswapExchangeInterface.sol\n\npragma solidity ^0.5.0;\n\ncontract UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}\n\n// File: contracts/uniswap/UniswapFactoryInterface.sol\n\npragma solidity ^0.5.0;\n\ncontract UniswapFactoryInterface {\n    // Public Variables\n    address public exchangeTemplate;\n    uint256 public tokenCount;\n    // Create Exchange\n    function createExchange(address token) external returns (address exchange);\n    // Get Exchange and Token Info\n    function getExchange(address token) external view returns (address exchange);\n    function getToken(address exchange) external view returns (address token);\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\n    // Never use\n    function initializeFactory(address template) external;\n}\n\n// File: contracts/PaymentProcessor.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract PaymentProcessor is Ownable {\n    uint256 constant UINT256_MAX = ~uint256(0);\n\n    address public fundManager;\n    UniswapFactoryInterface public uniswapFactory;\n    address public intermediaryToken;\n    UniswapExchangeInterface public intermediaryTokenExchange;\n\n    constructor(UniswapFactoryInterface uniswapFactory_)\n        public {\n        uniswapFactory = uniswapFactory_;\n    }\n\n    function setFundManager(address fundManager_)\n        onlyOwner\n        public {\n        fundManager = fundManager_;\n    }\n\n    function isFundManager()\n        public view\n        returns (bool) {\n        return isOwner() || msg.sender == fundManager;\n    }\n\n    function setIntermediaryToken(address token)\n        onlyFundManager\n        external {\n        intermediaryToken = token;\n        if (token != address(0)) {\n            intermediaryTokenExchange = UniswapExchangeInterface(uniswapFactory.getExchange(token));\n            require(address(intermediaryTokenExchange) != address(0), \"The token does not have an exchange\");\n        } else {\n            intermediaryTokenExchange = UniswapExchangeInterface(address(0));\n        }\n    }\n\n    function depositEther(uint64 orderId)\n        payable\n        external {\n        require(msg.value > 0, \"Minimal deposit is 0\");\n        uint256 amountBought = 0;\n        if (intermediaryToken != address(0)) {\n            amountBought = intermediaryTokenExchange.ethToTokenSwapInput.value(msg.value)(\n                1 /* min_tokens */,\n                UINT256_MAX /* deadline */);\n        }\n        emit EtherDepositReceived(orderId, msg.value, intermediaryToken, amountBought);\n    }\n\n    function withdrawEther(uint256 amount, address payable to)\n        onlyFundManager\n        external {\n        to.transfer(amount);\n        emit EtherDepositWithdrawn(to, amount);\n    }\n\n    function withdrawToken(IERC20 token, uint256 amount, address to)\n        onlyFundManager\n        external {\n        require(token.transfer(to, amount), \"Withdraw token failed\");\n        emit TokenDepositWithdrawn(address(token), to, amount);\n    }\n\n\n    function depositToken(uint64 orderId, address depositor, IERC20 inputToken, uint256 amount)\n        hasExchange(address(inputToken))\n        onlyFundManager\n        external {\n        require(address(inputToken) != address(0), \"Input token cannont be ZERO_ADDRESS\");\n        UniswapExchangeInterface tokenExchange = UniswapExchangeInterface(uniswapFactory.getExchange(address(inputToken)));\n        require(inputToken.allowance(depositor, address(this)) >= amount, \"Not enough allowance\");\n        inputToken.transferFrom(depositor, address(this), amount);\n        uint256 amountBought = 0;\n        if (intermediaryToken != address(0)) {\n            if (intermediaryToken != address(inputToken)) {\n                inputToken.approve(address(tokenExchange), amount);\n                amountBought = tokenExchange.tokenToTokenSwapInput(\n                    amount /* (input) tokens_sold */,\n                    1 /* (output) min_tokens_bought */,\n                    1 /*  min_eth_bought */,\n                    UINT256_MAX /* deadline */,\n                    intermediaryToken /* (input) token_addr */);\n            } else {\n                // same token\n                amountBought = amount;\n            }\n        } else {\n            inputToken.approve(address(tokenExchange), amount);\n            amountBought = tokenExchange.tokenToEthSwapInput(\n                amount /* tokens_sold */,\n                1 /* min_eth */,\n                UINT256_MAX /* deadline */);\n        }\n        emit TokenDepositReceived(orderId, address(inputToken), amount, intermediaryToken, amountBought);\n    }\n\n    event EtherDepositReceived(uint64 indexed orderId, uint256 amount, address intermediaryToken, uint256 amountBought);\n    event EtherDepositWithdrawn(address to, uint256 amount);\n    event TokenDepositReceived(uint64 indexed orderId, address indexed inputToken, uint256 amount, address intermediaryToken, uint256 amountBought);\n    event TokenDepositWithdrawn(address indexed token, address to, uint256 amount);\n\n    modifier hasExchange(address token) {\n        address tokenExchange = uniswapFactory.getExchange(token);\n        require(tokenExchange != address(0), \"Token doesn't have an exchange\");\n        _;\n    }\n\n    modifier onlyFundManager() {\n        require(isFundManager(), \"Only fund manager allowed\");\n        _;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95"
}