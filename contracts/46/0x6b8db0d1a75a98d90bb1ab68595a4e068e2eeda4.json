{
  "address": "0x6b8db0d1a75a98d90bb1ab68595a4e068e2eeda4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SaiexCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n   *   require(weiRaised.add(_weiAmount) <= cap);\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: contracts/SaiexSale.sol\n\ncontract SaiexToken is StandardBurnableToken, Ownable {\n\n  string public constant name = \"Saiex Token\";\n  string public constant symbol = \"SAIEX\";\n  uint8 public constant decimals = 18;\n\n  constructor(uint _totalSupply, uint _crowdsaleSupply, uint _fundSupply, address _fundWallet) public {\n    totalSupply_ = _totalSupply;\n\n    // Allocate fixed supply to token Creator\n    balances[msg.sender] = _crowdsaleSupply;\n    emit Transfer(address(0), msg.sender, _crowdsaleSupply);\n\n    // Allocate fixed supply to main Wallet\n    balances[_fundWallet] = _fundSupply;\n    emit Transfer(address(0), _fundWallet, _fundSupply);\n  }\n}\n\n\ncontract SaiexCrowdsale is TimedCrowdsale, CanReclaimToken {\n\n  constructor(uint256 _openingTime, uint256 _closingTime, uint256 _rate, address _fundWallet, StandardBurnableToken _token, uint[] _timeBonus, uint[] _amountBonus) public\n    Crowdsale(_rate, _fundWallet, _token)\n    TimedCrowdsale(_openingTime, _closingTime)\n  {\n    // Setup time and amount bonus\n    TimeBonusPricing(_timeBonus);\n    AmountBonusPricing(_amountBonus);\n  }\n\n  // Override to extend the way in which ether is converted to tokens.\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    uint256 currentRate = getCurrentRate(_weiAmount);\n    return currentRate.mul(_weiAmount);\n  }\n\n  // Returns the rate of tokens per wei depending on time and amount\n  function getCurrentRate(uint256 _weiAmount) public view returns (uint256) {\n    uint256 currentRate;\n    currentRate = rate;\n\n    // Apply time bonus\n    uint256 timeBonusRate;\n    timeBonusRate = getCurrentTimeBonusRate();\n    currentRate = currentRate.mul(timeBonusRate).div(100);\n\n    // Apply amount bonus\n    uint256 amountBonusRate;\n    amountBonusRate = getCurrentAmountBonusRate(_weiAmount);\n    currentRate = currentRate.mul(amountBonusRate).div(100);\n\n    return currentRate;\n  }\n\n\n  struct Bonus {\n    // Timestamp/Amount for bonus\n    uint timeOrAmount;\n    // Bonus rate multiplier, for example rate=120 means 20% Bonus\n    uint rateMultiplier;\n  }\n\n  // Store bonuses in a fixed array, so that it can be seen in a blockchain explorer\n  uint public constant MAX_BONUS = 10;\n  Bonus[10] public timeBonus;\n  Bonus[10] public amountBonus;\n\n  // How many active time/amount Bonus we have\n  uint public timeBonusCount;\n  uint public amountBonusCount;\n\n  // Get the current time bonus rateMultiplier\n  function getCurrentTimeBonusRate() private constant returns (uint) {\n    uint i;\n    for(i=0; i<timeBonus.length; i++) {\n      if(block.timestamp < timeBonus[i].timeOrAmount) {\n        return timeBonus[i].rateMultiplier;\n      }\n    }\n    return 100;\n  }\n\n  // Get the current amount bonus rateMultiplier\n  // @param _weiAmount uint256 invested amount\n  function getCurrentAmountBonusRate(uint256 _weiAmount) private constant returns (uint) {\n    uint i;\n    for(i=0; i<amountBonus.length; i++) {\n      if(_weiAmount.mul(rate) >= amountBonus[i].timeOrAmount) {\n        return amountBonus[i].rateMultiplier;\n      }\n    }\n    return 100;\n  }\n\n  // @dev Construction, creating a list of time-based bonuses\n  // @param _bonuses uint[] bonuses Pairs of (timeOrAmount, rateMultiplier)\n  function TimeBonusPricing(uint[] _bonuses) internal {\n    // Check array length, we need tuples\n    require(!(_bonuses.length % 2 == 1 || _bonuses.length >= MAX_BONUS*2));\n    timeBonusCount = _bonuses.length / 2;\n    uint lastTimeOrAmount = 0;\n\n    for(uint i=0; i<_bonuses.length/2; i++) {\n      timeBonus[i].timeOrAmount  = _bonuses[i*2];\n      timeBonus[i].rateMultiplier = _bonuses[i*2+1];\n\n      // Next timestamp should be either 0 or later than previous one\n      require(!((lastTimeOrAmount != 0) && (timeBonus[i].rateMultiplier != 100) && (timeBonus[i].timeOrAmount <= lastTimeOrAmount)));\n      lastTimeOrAmount = timeBonus[i].timeOrAmount;\n    }\n\n    // Last rateMultiplier should be 100, indicating end of bonus\n    require(timeBonus[timeBonusCount-1].rateMultiplier == 100);\n  }\n\n  // @dev Construction, creating a list of amount-based bonuses\n  // @param _bonuses uint[] bonuses Pairs of (timeOrAmount, rateMultiplier)\n  function AmountBonusPricing(uint[] _bonuses) internal {\n    // Check array length, we need tuples\n    require(!(_bonuses.length % 2 == 1 || _bonuses.length >= MAX_BONUS*2));\n    amountBonusCount = _bonuses.length / 2;\n    uint lastTimeOrAmount = 0;\n    for(uint i=0; i<_bonuses.length/2; i++) {\n      amountBonus[i].timeOrAmount  = _bonuses[i*2];\n      amountBonus[i].rateMultiplier = _bonuses[i*2+1];\n\n      // Next amount should be 0 or smaller\n      require(!((lastTimeOrAmount != 0) && (amountBonus[i].timeOrAmount >= lastTimeOrAmount)));\n      lastTimeOrAmount = amountBonus[i].timeOrAmount;\n    }\n\n    // Last rateMultiplier should be 100, indicating end of bonus\n    require(amountBonus[amountBonusCount-1].rateMultiplier == 100);\n  }\n\n  // @dev allow Contract owner to change bonuses\n  // @param _timeBonus uint[] bonuses Pairs of (timestamp, rateMultiplier)\n  // @param _amountBonus uint[] bonuses Pairs of (wei amount, rateMultiplier)\n  function changeBonuses(uint[] _timeBonus, uint[] _amountBonus) external {\n    require(msg.sender == owner);\n    TimeBonusPricing(_timeBonus);\n    AmountBonusPricing(_amountBonus);\n  }\n\n  // @dev allow Contract owner to change start/stop time\n  // @param _openingTime uint256  opening time\n  // @param _closingTime uint256  closing time\n  function changeOpeningClosingTime(uint256 _openingTime, uint256 _closingTime) external {\n    require(msg.sender == owner);\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n\t// @dev allow Contract owner to change rate\n  // @param _rate uint rate\n  function changeRate(uint _rate) external {\n    require(msg.sender == owner);\n    rate = _rate;\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200106a3803806200106a83398101604090815281516020830151918301516060840151608085015160a086015160c0870151949693949293919290820191018686868686600083116200006857600080fd5b600160a060020a03821615156200007e57600080fd5b600160a060020a03811615156200009457600080fd5b60029290925560018054600160a060020a03928316600160a060020a0319918216179091556000805492909316911617905542821015620000d457600080fd5b81811015620000e257600080fd5b60049190915560055560068054600160a060020a03191633179055620001118264010000000062000132810204565b62000125816401000000006200028b810204565b50505050505050620003a5565b600080600283518115156200014357fe5b06600114806200015557508251601411155b156200016057600080fd5b5050805160029004602f556000805b8251600290048110156200025a5782816002028151811015156200018f57fe5b60209081029091010151600782600a8110620001a757fe5b60020201600001819055508281600202600101815181101515620001c757fe5b60209081029091010151600782600a8110620001df57fe5b600202016001018190555081600014158015620002125750600781600a81106200020557fe5b6002020160010154606414155b801562000231575081600782600a81106200022957fe5b600202015411155b156200023c57600080fd5b600781600a81106200024a57fe5b600202015491506001016200016f565b602f5460079060001901600a81106200026f57fe5b600202016001015460641415156200028657600080fd5b505050565b600080600283518115156200029c57fe5b0660011480620002ae57508251601411155b15620002b957600080fd5b50508051600290046030556000805b82516002900481101562000390578281600202815181101515620002e857fe5b60209081029091010151601b82600a81106200030057fe5b600202016000018190555082816002026001018151811015156200032057fe5b60209081029091010151601b82600a81106200033857fe5b60020201600101819055508160001415801562000367575081601b82600a81106200035f57fe5b600202015410155b156200037257600080fd5b601b81600a81106200038057fe5b60020201549150600101620002c8565b603054601b9060001901600a81106200026f57fe5b610cb580620003b56000396000f30060806040526004361061011c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631515bc2b811461012757806317ffc3201461015057806324f0808c146101715780632c4e722e1461019857806336b4b589146101ad5780634042b66f146101c25780634b6753bc146101d7578063521eb273146101ec57806370e094381461021d578063715018a61461023257806371ea87221461024757806374e7493b146102785780638da5cb5b146102905780639e57e491146102a5578063b4693d23146102bd578063b7a8807c146102d8578063b88a529b146102ed578063d68f93df14610305578063ec8ac4d814610331578063f2fde38b14610345578063fc0c546a14610366575b6101253361037b565b005b34801561013357600080fd5b5061013c61041d565b604080519115158252519081900360200190f35b34801561015c57600080fd5b50610125600160a060020a0360043516610425565b34801561017d57600080fd5b506101866104f3565b60408051918252519081900360200190f35b3480156101a457600080fd5b506101866104f8565b3480156101b957600080fd5b506101866104fe565b3480156101ce57600080fd5b50610186610504565b3480156101e357600080fd5b5061018661050a565b3480156101f857600080fd5b50610201610510565b60408051600160a060020a039092168252519081900360200190f35b34801561022957600080fd5b5061018661051f565b34801561023e57600080fd5b50610125610525565b34801561025357600080fd5b5061025f600435610593565b6040805192835260208301919091528051918290030190f35b34801561028457600080fd5b506101256004356105b2565b34801561029c57600080fd5b506102016105ce565b3480156102b157600080fd5b5061025f6004356105dd565b3480156102c957600080fd5b506101256004356024356105ea565b3480156102e457600080fd5b5061018661060c565b3480156102f957600080fd5b50610186600435610612565b34801561031157600080fd5b506101256024600480358281019290820135918135918201910135610670565b610125600160a060020a036004351661037b565b34801561035157600080fd5b50610125600160a060020a03600435166106f9565b34801561037257600080fd5b5061020161071c565b346000610388838361072b565b61039182610754565b6003549091506103a7908363ffffffff61077b16565b6003556103b4838261078e565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a361040683836104ef565b61040e610798565b61041883836104ef565b505050565b600554421190565b600654600090600160a060020a0316331461043f57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050506040513d60208110156104ca57600080fd5b50516006549091506104ef90600160a060020a0384811691168363ffffffff6107d116565b5050565b600a81565b60025481565b60305481565b60035481565b60055481565b600154600160a060020a031681565b602f5481565b600654600160a060020a0316331461053c57600080fd5b600654604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26006805473ffffffffffffffffffffffffffffffffffffffff19169055565b601b81600a81106105a057fe5b60020201805460019091015490915082565b600654600160a060020a031633146105c957600080fd5b600255565b600654600160a060020a031681565b600781600a81106105a057fe5b600654600160a060020a0316331461060157600080fd5b600491909155600555565b60045481565b6002546000908180610622610884565b91506106456064610639858563ffffffff6108d716565b9063ffffffff61090016565b925061065085610915565b90506106676064610639858463ffffffff6108d716565b95945050505050565b600654600160a060020a0316331461068757600080fd5b6106bd8484808060200260200160405190810160405280939291908181526020018383602002808284375061097e945050505050565b6106f382828080602002602001604051908101604052809392919081815260200183836020028082843750610ac1945050505050565b50505050565b600654600160a060020a0316331461071057600080fd5b61071981610bcd565b50565b600054600160a060020a031681565b600454421015801561073f57506005544211155b151561074a57600080fd5b6104ef8282610c4b565b60008061076083610612565b9050610772818463ffffffff6108d716565b91505b50919050565b8181018281101561078857fe5b92915050565b6104ef8282610c6c565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610719573d6000803e3d6000fd5b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561084d57600080fd5b505af1158015610861573d6000803e3d6000fd5b505050506040513d602081101561087757600080fd5b5051151561041857600080fd5b6000805b600a8110156108ce57600781600a811061089e57fe5b60020201544210156108c657600781600a81106108b757fe5b600202016001015491506108d3565b600101610888565b606491505b5090565b60008215156108e857506000610788565b508181028183828115156108f857fe5b041461078857fe5b6000818381151561090d57fe5b049392505050565b6000805b600a81101561097557601b81600a811061092f57fe5b600202016000015461094c600254856108d790919063ffffffff16565b1061096d57601b81600a811061095e57fe5b60020201600101549150610775565b600101610919565b50606492915050565b6000806002835181151561098e57fe5b066001148061099f57508251601411155b156109a957600080fd5b5050805160029004602f556000805b825160029004811015610a975782816002028151811015156109d657fe5b60209081029091010151600782600a81106109ed57fe5b60020201600001819055508281600202600101815181101515610a0c57fe5b60209081029091010151600782600a8110610a2357fe5b600202016001018190555081600014158015610a545750600781600a8110610a4757fe5b6002020160010154606414155b8015610a71575081600782600a8110610a6957fe5b600202015411155b15610a7b57600080fd5b600781600a8110610a8857fe5b600202015491506001016109b8565b602f5460079060001901600a8110610aab57fe5b6002020160010154606414151561041857600080fd5b60008060028351811515610ad157fe5b0660011480610ae257508251601411155b15610aec57600080fd5b50508051600290046030556000805b825160029004811015610bb9578281600202815181101515610b1957fe5b60209081029091010151601b82600a8110610b3057fe5b60020201600001819055508281600202600101815181101515610b4f57fe5b60209081029091010151601b82600a8110610b6657fe5b600202016001018190555081600014158015610b93575081601b82600a8110610b8b57fe5b600202015410155b15610b9d57600080fd5b601b81600a8110610baa57fe5b60020201549150600101610afb565b603054601b9060001901600a8110610aab57fe5b600160a060020a0381161515610be257600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610c6057600080fd5b8015156104ef57600080fd5b6000546104ef90600160a060020a0316838363ffffffff6107d1165600a165627a7a723058203e06ad0e364da8b8840770207383e4d04c872a170df5f3008e4385f5fbcd97bb0029000000000000000000000000000000000000000000000000000000005c01cf00000000000000000000000000000000000000000000000000000000005cd4bf00000000000000000000000000000000000000000000000000000000000000008c0000000000000000000000002245384869c089f68c4167c0dc2e99ed0472400f0000000000000000000000003dd0808bde18ca38645de3f38ac4bec0741041f400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000005c3d22800000000000000000000000000000000000000000000000000000000000000082000000000000000000000000000000000000000000000000000000005c578080000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000005c71de800000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000005c85a5000000000000000000000000000000000000000000000000000000000000000073000000000000000000000000000000000000000000000000000000005c996b80000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000005cad32000000000000000000000000000000000000000000000000000000000000000069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000000000000000000007300000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000000006e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005c01cf00000000000000000000000000000000000000000000000000000000005cd4bf00000000000000000000000000000000000000000000000000000000000000008c0000000000000000000000002245384869c089f68c4167c0dc2e99ed0472400f0000000000000000000000003dd0808bde18ca38645de3f38ac4bec0741041f400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000005c3d22800000000000000000000000000000000000000000000000000000000000000082000000000000000000000000000000000000000000000000000000005c578080000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000005c71de800000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000005c85a5000000000000000000000000000000000000000000000000000000000000000073000000000000000000000000000000000000000000000000000000005c996b80000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000005cad32000000000000000000000000000000000000000000000000000000000000000069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000000000000000000007300000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000000006e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064"
}