{
  "address": "0xe8599783e272ec087fada183b05516304fa2c7ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Clout: CLC Token",
  "contractName": "CLC",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-14\n*/\n\npragma solidity 0.4.15;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    //Variables\n    address public owner;\n\n    address public newOwner;\n\n    //    Modifiers\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n            newOwner = address(0);\n        }\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\n\ncontract ERC20 is Ownable {\n    using SafeMath for uint256;\n\n    /* Public variables of the token */\n    uint256 public initialSupply;\n\n    uint256 public creationBlock;\n\n    uint8 public decimals;\n\n    string public name;\n\n    string public symbol;\n\n    string public standard;\n\n    bool public locked;\n\n    bool public transferFrozen;\n\n    mapping (address => uint256) public balances;\n\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    modifier onlyPayloadSize(uint _numwords) {\n        assert(msg.data.length == _numwords * 32 + 4);\n        _;\n    }\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ERC20(\n        uint256 _initialSupply,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    )\n        public\n    {\n        standard = \"ERC20 0.1\";\n\n        initialSupply = _initialSupply;\n\n        if (_transferAllSupplyToOwner) {\n            setBalance(msg.sender, initialSupply);\n        } else {\n            setBalance(this, initialSupply);\n        }\n\n        name = _tokenName;\n        // Set the name for display purposes\n        symbol = _tokenSymbol;\n        // Set the symbol for display purposes\n        decimals = _decimalUnits;\n        // Amount of decimals for display purposes\n        locked = _locked;\n        creationBlock = block.number;\n    }\n\n    /* public methods */\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n        require(locked == false);\n        require(transferFrozen == false);\n    \n        bool status = transferInternal(msg.sender, _to, _value);\n\n        require(status == true);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        if (transferFrozen) {\n            return false;\n        }\n\n        if (allowed[_from][msg.sender] < _value) {\n            return false;\n        }\n\n        bool _success = transferInternal(_from, _to, _value);\n\n        if (_success) {\n            allowed[_from][msg.sender] -= _value;\n        }\n\n        return _success;\n    }\n\n    /*constant functions*/\n    function totalSupply() public constant returns (uint256) {\n        return initialSupply;\n    }\n\n    function balanceOf(address _address) public constant returns (uint256 balance) {\n        return balances[_address];\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* internal functions*/\n    function setBalance(address _holder, uint256 _amount) internal {\n        balances[_holder] = _amount;\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(locked == false);\n        require(transferFrozen == false);\n\n        if (_value == 0) {\n            Transfer(_from, _to, _value);\n\n            return true;\n        }\n\n        if (balances[_from] < _value) {\n            return false;\n        }\n\n        setBalance(_from, balances[_from].sub(_value));\n        setBalance(_to, balances[_to].add(_value));\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n}\n\ncontract ERC223 {\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n}\n\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n/*\n    Based on https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol\n*/\n\ncontract ERC223Token is ERC223, ERC20 {\n    function ERC223Token(\n        uint256 _initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        bool transferAllSupplyToOwner,\n        bool _locked\n    )\n        public\n        ERC20(_initialSupply, tokenName, decimalUnits, tokenSymbol, transferAllSupplyToOwner, _locked)\n    {\n        \n    }\n\n    function transfer(address to, uint256 value, bytes data) public returns (bool success) {\n        require(locked == false);\n        \n        bool status = transferInternal(msg.sender, to, value, data);\n\n        return status;\n    }\n\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool success) {\n        require(locked == false);\n\n        bool status = transferInternal(msg.sender, to, value, data, true, customFallback);\n\n        return status;\n    }\n\n// rollback changes to transferInternal for transferFrom\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        if (transferFrozen) {\n            return false;\n        }\n\n        if (allowed[_from][msg.sender] < _value) {\n            return false;\n        }\n\n        bool _success = super.transferInternal(_from, _to, _value);\n\n        if (_success) {\n            allowed[_from][msg.sender] -= _value;\n        }\n\n        return _success;\n    }\n\n    function transferInternal(address from, address to, uint256 value, bytes data) internal returns (bool success) {\n        return transferInternal(from, to, value, data, false, \"\");\n    }\n\n    function transferInternal(\n        address from,\n        address to,\n        uint256 value,\n        bytes data,\n        bool useCustomFallback,\n        string customFallback\n    )\n        internal returns (bool success)\n    {\n        bool status = super.transferInternal(from, to, value);\n\n        if (status) {\n            if (isContract(to)) {\n                ContractReceiver receiver = ContractReceiver(to);\n\n                if (useCustomFallback) {\n                    // solhint-disable-next-line avoid-call-value\n                    require(receiver.call.value(0)(bytes4(keccak256(customFallback)), from, value, data) == true);\n                } else {\n                    receiver.tokenFallback(from, value, data);\n                }\n            }\n\n            Transfer(from, to, value, data);\n        }\n\n        return status;\n    }\n\n    function transferInternal(address from, address to, uint256 value) internal returns (bool success) {\n        require(locked == false);\n\n        bytes memory data;\n\n        return transferInternal(from, to, value, data, false, \"\");\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private returns (bool) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n}\n\n/*\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\nThis contract contains basic minting functionality though\n*/\ncontract MintingERC20 is ERC223Token {\n\n    using SafeMath for uint256;\n\n    uint256 public maxSupply;\n\n    mapping (address => bool) public minters;\n\n    modifier onlyMinters () {\n        require(true == minters[msg.sender]);\n        _;\n    }\n\n    function MintingERC20(\n        uint256 _initialSupply,\n        uint256 _maxSupply,\n        string _tokenName,\n        uint8 _decimals,\n        string _symbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    )\n        ERC223Token(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\n    {\n        minters[msg.sender] = true;\n        maxSupply = _maxSupply;\n    }\n\n    function addMinter(address _newMinter) public onlyOwner {\n        minters[_newMinter] = true;\n    }\n\n    function removeMinter(address _minter) public onlyOwner {\n        minters[_minter] = false;\n    }\n\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        return internalMint(_addr, _amount);\n    }\n\n    function internalMint(address _addr, uint256 _amount) internal returns (uint256) {\n        if (_amount == uint256(0)) {\n            return uint256(0);\n        }\n\n        if (totalSupply().add(_amount) > maxSupply) {\n            return uint256(0);\n        }\n\n        initialSupply = initialSupply.add(_amount);\n        balances[_addr] = balances[_addr].add(_amount);\n        Transfer(0, _addr, _amount);\n\n        return _amount;\n    }\n}\n\n\ncontract AbstractClaimableToken {\n    function claimedTokens(address _holder, uint256 _tokens) public;\n}\n\n\ncontract GenesisToken is MintingERC20 {\n    using SafeMath for uint256;\n\n    /* variables */\n    uint256 public emitTokensSince;\n\n    TokenEmission[] public emissions;\n\n    mapping(address => uint256) public lastClaims;\n\n    /* structs */\n    struct TokenEmission {\n        uint256 blockDuration;      // duration of block in secs\n        uint256 blockTokens;        // tokens per block\n        uint256 periodEndsAt;     // duration in secs\n        bool removed;\n    }\n\n    /* events */\n    event ClaimedTokens(address _holder, uint256 _since, uint256 _till, uint256 _tokens);\n\n    /* constructor */\n    function GenesisToken(\n        uint256 _totalSupply,\n        uint8 _precision,\n        string _name,\n        string _symbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked,\n        uint256 _emitTokensSince,\n        uint256 _maxSupply\n    )\n        public\n        MintingERC20(_totalSupply, _maxSupply, _name, _precision, _symbol, _transferAllSupplyToOwner, _locked)\n    {\n        standard = \"GenesisToken 0.1\";\n        emitTokensSince = _emitTokensSince;\n    }\n\n    function addTokenEmission(uint256 _blockDuration, uint256 _blockTokens, uint256 _periodEndsAt) public onlyOwner {\n        emissions.push(TokenEmission(_blockDuration, _blockTokens, _periodEndsAt, false));\n    }\n\n    function removeTokenEmission(uint256 _i) public onlyOwner {\n        require(_i < emissions.length);\n\n        emissions[_i].removed = true;\n    }\n\n    function updateTokenEmission(uint256 _i, uint256 _blockDuration, uint256 _blockTokens, uint256 _periodEndsAt)\n        public\n        onlyOwner\n    {\n        require(_i < emissions.length);\n\n        emissions[_i].blockDuration = _blockDuration;\n        emissions[_i].blockTokens = _blockTokens;\n        emissions[_i].periodEndsAt = _periodEndsAt;\n    }\n\n    function claim() public returns (uint256) {\n        require(false == locked);\n\n        uint256 currentBalance = balanceOf(msg.sender);\n        uint256 currentTotalSupply = totalSupply();\n\n        return claimInternal(block.timestamp, msg.sender, currentBalance, currentTotalSupply);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        return claimableTransferFrom(block.timestamp, _from, _to, _value);\n    }\n\n    function calculateEmissionTokens(\n        uint256 _lastClaimedAt,\n        uint256 _currentTime,\n        uint256 _currentBalance,\n        uint256 _totalSupply\n    )\n        public constant returns (uint256 tokens)\n    {\n        uint256 totalTokens = 0;\n\n        uint256 newCurrentTime = _lastClaimedAt;\n        uint256 remainingSeconds = _currentTime.sub(_lastClaimedAt);\n\n        uint256 collectedTokensPerPeriod;\n\n        for (uint256 i = 0; i < emissions.length; i++) {\n            TokenEmission storage emission = emissions[i];\n\n            if (emission.removed) {\n                continue;\n            }\n\n            if (newCurrentTime < emission.periodEndsAt) {\n                if (newCurrentTime.add(remainingSeconds) > emission.periodEndsAt) {\n                    uint256 diff = emission.periodEndsAt.sub(newCurrentTime);\n\n                    collectedTokensPerPeriod = getPeriodMinedTokens(\n                    diff, _currentBalance,\n                    emission.blockDuration, emission.blockTokens,\n                    _totalSupply);\n\n                    totalTokens += collectedTokensPerPeriod;\n\n                    newCurrentTime += diff;\n                    remainingSeconds -= diff;\n                } else {\n                    collectedTokensPerPeriod = getPeriodMinedTokens(\n                        remainingSeconds, _currentBalance,\n                        emission.blockDuration, emission.blockTokens,\n                        _totalSupply\n                    );\n\n                    totalTokens += collectedTokensPerPeriod;\n\n                    newCurrentTime += remainingSeconds;\n                    remainingSeconds = 0;\n                }\n            }\n\n            if (remainingSeconds == 0) {\n                break;\n            }\n        }\n\n        return totalTokens;\n    }\n\n    /* internal methods */\n    function getPeriodMinedTokens(\n        uint256 _duration, uint256 _balance,\n        uint256 _blockDuration, uint256 _blockTokens,\n        uint256\n    )\n    internal returns (uint256)\n    {\n        uint256 blocks = _duration.div(_blockDuration);\n\n        return blocks.mul(_blockTokens).mul(_balance).div(maxSupply);\n    }\n\n    function tokensClaimedHook(address _holder, uint256 _since, uint256 _till, uint256 _tokens) internal {\n        ClaimedTokens(_holder, _since, _till, _tokens);\n    }\n\n    function claimInternal(\n        uint256 _time,\n        address _address,\n        uint256 _currentBalance,\n        uint256 _currentTotalSupply\n    )\n    internal returns (uint256)\n    {\n        if (_time < emitTokensSince) {\n            lastClaims[_address] = emitTokensSince;\n\n            return 0;\n        }\n\n        if (_currentBalance == 0) {\n            lastClaims[_address] = _time;\n\n            return 0;\n        }\n\n        uint256 lastClaimAt = lastClaims[_address];\n\n        if (lastClaimAt == 0) {\n            lastClaims[_address] = emitTokensSince;\n            lastClaimAt = emitTokensSince;\n        }\n\n        if (lastClaimAt >= _time) {\n            return 0;\n        }\n\n        uint256 tokens = calculateEmissionTokens(lastClaimAt, _time, _currentBalance, _currentTotalSupply);\n\n        if (tokens > 0) {\n            tokensClaimedHook(_address, lastClaimAt, _time, tokens);\n\n            lastClaims[_address] = _time;\n        \n            return tokens;\n        }\n\n        return 0;\n    }\n\n    function claimableTransfer(\n        uint256 _time,\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes _data,\n        bool _useCustomFallback,\n        string _customFallback\n    )\n    internal returns (bool success)\n    {\n        uint256 senderCurrentBalance = balanceOf(_from);\n        uint256 receiverCurrentBalance = balanceOf(_to);\n\n        uint256 _totalSupply = totalSupply();\n\n        bool status = super.transferInternal(_from, _to, _value, _data, _useCustomFallback, _customFallback);\n\n        require(status);\n\n        claimInternal(_time, _from, senderCurrentBalance, _totalSupply);\n        claimInternal(_time, _to, receiverCurrentBalance, _totalSupply);\n\n        return true;\n    }\n\n    function transferInternal(\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes _data,\n        bool _useCustomFallback,\n        string _customFallback\n    )\n    internal returns (bool success)\n    {\n        return claimableTransfer(block.timestamp, _from, _to, _value, _data, _useCustomFallback, _customFallback);\n    }\n\n    function claimableTransferFrom(\n        uint256 _time,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    internal returns (bool success)\n    {\n        uint256 senderCurrentBalance = balanceOf(_from);\n        uint256 receiverCurrentBalance = balanceOf(_to);\n\n        uint256 _totalSupply = totalSupply();\n\n        bool status = super.transferFrom(_from, _to, _value);\n\n        if (status) {\n            claimInternal(_time, _from, senderCurrentBalance, _totalSupply);\n            claimInternal(_time, _to, receiverCurrentBalance, _totalSupply);\n        }\n        \n        return status;\n    }\n\n    function internalMint(address _addr, uint256 _amount) internal returns (uint256) {\n        claimInternal(now, _addr, balanceOf(_addr), totalSupply());\n\n        uint256 minted = super.internalMint(_addr, _amount);\n\n        return minted;\n    }\n}\n\ncontract CLC is MintingERC20, AbstractClaimableToken {\n    uint256 public createdAt;\n    Clout public genesisToken;\n\n    function CLC(uint256 _maxSupply, uint8 decimals, Clout _genesisToken, bool transferAllSupplyToOwner) public\n        MintingERC20(0, _maxSupply, \"CLC\", decimals, \"CLC\", transferAllSupplyToOwner, false)\n    {\n        createdAt = now;\n        standard = \"CLC 0.1\";\n        genesisToken = _genesisToken;\n    }\n\n    function claimedTokens(address _holder, uint256 _tokens) public {\n        require(msg.sender == address(genesisToken));\n\n        uint256 minted = internalMint(_holder, _tokens);\n\n        require(minted == _tokens);\n    }\n\n    function setGenesisToken(Clout _genesisToken) public onlyOwner {\n        genesisToken = _genesisToken;\n    }\n\n    function setTransferFrozen(bool _frozen) public onlyOwner {\n        transferFrozen = _frozen;\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked;\n    }\n}\n\n\ncontract Clout is GenesisToken {\n    AbstractClaimableToken public claimableToken;\n    uint256 public createdAt;\n\n    mapping (address => bool) public issuers;\n\n    function Clout(uint256 emitTokensSince,\n        bool init,\n        uint256 initialSupply,\n        uint8 decimals,\n        string tokenName,\n        string tokenSymbol,\n        bool transferAllSupplyToOwner\n    )\n        public\n        GenesisToken(\n            0,\n            decimals,\n            tokenName,\n            tokenSymbol,\n            transferAllSupplyToOwner,\n            false,\n            emitTokensSince,\n            initialSupply\n        )\n        // solhint-disable-next-line function-max-lines\n    {\n        standard = \"Clout 0.1\";\n\n        createdAt = now;\n\n        // emissions\n        if (init) {\n//            uint256 period0 = createdAt;\n//            uint256 period1 = 1514764800; // 2018-01-01T00:00:00Z\n//            uint256 period2 = 1577836800; // 2020-01-01T00:00:00Z\n//            uint256 period3 = 1672531200; // 2023-01-01T00:00:00Z\n//            uint256 period4 = 1798761600; // 2027-01-01T00:00:00Z\n//            uint256 period5 = 1956528000; // 2032-01-01T00:00:00Z\n//            uint256 period6 = 2145916800; // 2038-01-01T00:00:00Z\n//            uint256 period7 = 2366841600; // 2045-01-01T00:00:00Z\n//            uint256 period8 = 2619302400; // 2053-01-01T00:00:00Z\n//            uint256 period9 = 2903299200; // 2062-01-01T00:00:00Z\n\n            uint256 blockDuration = 15;\n\n            // after ico till 2018-01-01\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((1514764800 - emitTokensSince) / blockDuration), // tokens\n                    1514764800, // till\n                    false // removed\n                )\n            );\n\n            // till 2020-01-01. blocks 4,204,800, tokens per block 2.378234399E19\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((1577836800 - 1514764800) / blockDuration), // tokens\n                    1577836800, // till\n                    false // removed\n                )\n            );\n\n            // till 2023-01-01, blocks 6,312,960, tokens per block 1.584042985E19\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((1672531200 - 1577836800) / blockDuration), // tokens\n                    1672531200, // till\n                    false // removed\n                )\n            );\n\n            // till 2027-01-01, blocks 8,415,360, tokens per block 1.188303293E19\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((1798761600 - 1672531200) / blockDuration), // tokens\n                    1798761600, // till\n                    false // removed\n                )\n            );\n\n            // till 2032-01-01, blocks 10,517,760, tokens per block 9.507727881E18\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((1956528000 - 1798761600) / blockDuration), // tokens\n                    1956528000, // till\n                    false // removed\n                )\n            );\n\n            // till 2038-01-01, blocks 12,625,920, tokens per block 7.920214923E18\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((2145916800 - 1956528000) / blockDuration), // tokens\n                    2145916800, // till\n                    false // removed\n                )\n            );\n\n            // till 2045-01-01, blocks 14,728,320, tokens per block 6.789640638E18\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((2366841600 - 2145916800) / blockDuration), // tokens\n                    2366841600, // till\n                    false // removed\n                )\n            );\n\n            // till 2053-01-01, blocks 16,830,720, tokens per block 5.941516465E18\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((2619302400 - 2366841600) / blockDuration), // tokens\n                    2619302400, // till\n                    false // removed\n                )\n            );\n\n            // till 2062-01-01, blocks 18,933,120, tokens per block 5.281749654E18\n            emissions.push(\n                TokenEmission(\n                    blockDuration,\n                    100000000 * 10 ** 18 / ((2903299200 - 2619302400) / blockDuration), // tokens\n                    2903299200, // till\n                    false // removed\n                )\n            );\n        }\n    }\n\n    function setEmissions(uint256[] array) public onlyOwner {\n        require(array.length % 4 == 0);\n\n        delete emissions;\n\n        for (uint256 i = 0; i < array.length; i += 4) {\n            emissions.push(TokenEmission(array[i], array[i + 1], array[i + 2], array[i + 3] == 0 ? false : true));\n        }\n    }\n\n    function setClaimableToken(AbstractClaimableToken _token) public onlyOwner {\n        claimableToken = _token;\n    }\n\n    function setTransferFrozen(bool _frozen) public onlyOwner {\n        transferFrozen = _frozen;\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked;\n    }\n\n    function tokensClaimedHook(address _holder, uint256 since, uint256 till, uint256 amount) internal {\n        if (claimableToken != address(0)) {\n            claimableToken.claimedTokens(_holder, amount);\n        }\n\n        ClaimedTokens(_holder, since, till, amount);\n    }\n}\n\ncontract Multivest is Ownable {\n    /* public variables */\n    mapping (address => bool) public allowedMultivests;\n\n    /* events */\n    event MultivestSet(address multivest);\n\n    event MultivestUnset(address multivest);\n\n    event Contribution(address _holder, uint256 value, uint256 tokens);\n\n    modifier onlyAllowedMultivests() {\n        require(true == allowedMultivests[msg.sender]);\n        _;\n    }\n\n    /* constructor */\n    function Multivest(address multivest) {\n        allowedMultivests[multivest] = true;\n    }\n\n    /* public methods */\n    function setAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = true;\n    }\n\n    function unsetAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = false;\n    }\n\n    function multivestBuy(\n        address _holder,\n        uint256 _value\n    )\n    public\n    onlyAllowedMultivests\n    {\n        bool status = buy(_holder, block.timestamp, _value);\n\n        require(status == true);\n    }\n\n    function multivestBuy(\n        bytes32 _hash,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    )\n        public payable\n    {\n        require(_hash == keccak256(msg.sender));\n        require(allowedMultivests[verify(_hash, _v, _r, _s)] == true);\n        bool status = buy(msg.sender, block.timestamp, msg.value);\n\n        require(status == true);\n    }\n\n    function verify(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public constant returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        return ecrecover(keccak256(prefix, hash), v, r, s);\n    }\n\n    function buy(address _address, uint256 _time, uint256 _value) internal returns (bool);\n}\n\n\n\ncontract ICO is Ownable, Multivest {\n    uint256 public icoSince;\n    uint256 public icoTill;\n\n    uint8 public decimals;\n\n    mapping(address => uint256) public holderEthers;\n    uint256 public collectedEthers;\n    uint256 public soldTokens;\n\n    uint256 public minEthToContribute;\n\n    Phase[] public phases;\n\n    bool public locked;\n\n    Clout public clout;\n    CLC public clc;\n\n    address[] public etherReceivers;\n    address public etherMasterWallet;\n\n    struct Phase {\n        uint256 price;\n        uint256 maxAmount;\n    }\n\n    event Contribution(address _holder, uint256 _ethers, uint256 _clouts, uint256 _clcs);\n\n    function ICO(\n        uint256 _icoSince,\n        uint256 _icoTill,\n        uint8 _decimals,\n        uint256 price1,\n        uint256 price2,\n        uint256 price3,\n        Clout _clout,\n        CLC _clc,\n        uint256 _minEthToContribute,\n        bool _locked\n    )\n        public\n        Multivest(msg.sender)\n    {\n        icoSince = _icoSince;\n        icoTill = _icoTill;\n        decimals = _decimals;\n        locked = _locked;\n\n        clout = _clout;\n        clc = _clc;\n\n        if (_minEthToContribute > 0) {\n            minEthToContribute = _minEthToContribute;\n        } else {\n            minEthToContribute = 0;\n        }\n\n        phases.push(Phase(price1, 5000000 * (uint256(10) ** decimals)));\n        phases.push(Phase(price2, 3000000 * (uint256(10) ** decimals)));\n        phases.push(Phase(price3, 2000000 * (uint256(10) ** decimals)));\n    }\n\n    function () payable {\n        bool status = buy(msg.sender, block.timestamp, msg.value);\n\n        require(status == true);\n    }\n\n    function setEtherReceivers(\n        address _masterWallet,\n        address[] _etherReceivers\n    )\n        public onlyOwner\n    {\n        require(_masterWallet != address(0));\n        require(_etherReceivers.length == 4);\n        require(_etherReceivers[0] != address(0));\n        require(_etherReceivers[1] != address(0));\n        require(_etherReceivers[2] != address(0));\n        require(_etherReceivers[3] != address(0));\n\n        etherMasterWallet = _masterWallet;\n        etherReceivers = _etherReceivers;\n    }\n\n    function setPrice(uint256 price1, uint256 price2, uint256 price3) public onlyOwner {\n        phases[0].price = price1;\n        phases[1].price = price2;\n        phases[2].price = price3;\n    }\n\n    function setPeriod(uint256 since, uint256 till) public onlyOwner {\n        icoSince = since;\n        icoTill = till;\n    }\n\n    function setClout(Clout _clout) public onlyOwner {\n        clout = _clout;\n    }\n\n    function setCLC(CLC _clc) public onlyOwner {\n        clc = _clc;\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked;\n    }\n\n    function getIcoTokensAmount(uint256 _soldTokens, uint256 _value) public constant returns (uint256) {\n        uint256 amount;\n\n        uint256 newSoldTokens = _soldTokens;\n        uint256 remainingValue = _value;\n    \n        for (uint i = 0; i < phases.length; i++) {\n            Phase storage phase = phases[i];\n\n            uint256 tokens = remainingValue * (uint256(10) ** decimals) / phase.price;\n\n            if (phase.maxAmount > newSoldTokens) {\n                if (newSoldTokens + tokens > phase.maxAmount) {\n                    uint256 diff = phase.maxAmount - tokens;\n\n                    amount += diff;\n\n                    // get optimal amount of ethers for this phase\n                    uint256 phaseEthers = diff * phase.price / (uint256(10) ** decimals);\n\n                    remainingValue -= phaseEthers;\n                    newSoldTokens += (phaseEthers * (uint256(10) ** decimals) / phase.price);\n                } else {\n                    amount += tokens;\n\n                    newSoldTokens += tokens;\n\n                    remainingValue = 0;\n                }\n            }\n\n            if (remainingValue == 0) {\n                break;\n            }\n        }\n\n        if (remainingValue > 0) {\n            return 0;\n        }\n\n        return amount;\n    }\n\n    // solhint-disable-next-line code-complexity\n    function transferEthers() public onlyOwner {\n        require(this.balance > 0);\n        require(etherReceivers.length == 4);\n        require(etherMasterWallet != address(0));\n\n        // ether balance on smart contract\n        if (this.balance > 0) {\n            uint256 balance = this.balance;\n\n            etherReceivers[0].transfer(balance * 15 / 100);\n\n            etherReceivers[1].transfer(balance * 15 / 100);\n\n            etherReceivers[2].transfer(balance * 10 / 100);\n\n            etherReceivers[3].transfer(balance * 10 / 100);\n\n            // send rest to master wallet\n\n            etherMasterWallet.transfer(this.balance);\n        }\n    }\n\n    function buy(address _address, uint256 _time, uint256 _value) internal returns (bool) {\n        if (locked == true) {\n            return false;\n        }\n\n        if (_time < icoSince) {\n            return false;\n        }\n\n        if (_time > icoTill) {\n            return false;\n        }\n\n        if (_value < minEthToContribute || _value == 0) {\n            return false;\n        }\n\n        uint256 amount = getIcoTokensAmount(soldTokens, _value);\n\n        if (amount == 0) {\n            return false;\n        }\n\n        uint256 cloutMinted = clout.mint(_address, amount);\n        uint256 clcMinted = clc.mint(_address, amount);\n\n        require(cloutMinted == amount);\n        require(clcMinted == amount);\n\n        soldTokens += amount;\n        collectedEthers += _value;\n        holderEthers[_address] += _value;\n\n        Contribution(_address, _value, amount, amount);\n\n        return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000005ba49fcf7c9dce67d6a9fc92cc51c8e77cba5b7a0000000000000000000000000000000000000000000000000000000000000000"
}