{
  "address": "0x4b0712de9b75bc68a566215acca876ea5e55c172",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Nitro: Token Sale",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-19\n*/\n\npragma solidity ^0.4.18;\n\ncontract Ownable {\n\n  address public owner = msg.sender;\n  address private newOwner = address(0);\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));      \n    newOwner = _newOwner;\n  }\n\n  function acceptOwnership() public {\n    require(msg.sender != address(0));\n    require(msg.sender == newOwner);\n\n    owner = newOwner;\n    newOwner = address(0);\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n\n  /**\n   * the total token supply.\n   */\n  uint256 public totalSupply;\n\n  /**\n   * @param _owner The address from which the balance will be retrieved\n   * @return The balance\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n\n  /**\n   * @notice send `_value` token to `_to` from `msg.sender`\n   * @param _to The address of the recipient\n   * @param _value The amount of token to be transferred\n   * @return Whether the transfer was successful or not\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  /**\n   * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value The amount of token to be transferred\n   * @return Whether the transfer was successful or not\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  /**\n   * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n   * @param _spender The address of the account able to transfer the tokens\n   * @param _value The amount of tokens to be approved for transfer\n   * @return Whether the approval was successful or not\n   */\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  /**\n   * @param _owner The address of the account owning tokens\n   * @param _spender The address of the account able to transfer the tokens\n   * @return Amount of remaining tokens allowed to spent\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  /**\n   * MUST trigger when tokens are transferred, including zero value transfers.\n   */\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * MUST trigger on any successful call to approve(address _spender, uint256 _value)\n   */\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n * @dev Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol\n */\ncontract ERC20Token is ERC20 {\n\n  using SafeMath for uint256;\n\n  mapping (address => uint256) balances;\n  \n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n  \n  /**\n   * @dev transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] +=_value;\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0);\n\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    \n    balances[_to] += _value;\n    \n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n}\n\ncontract NitroToken is ERC20Token, Ownable {\n    \n  string public constant name = \"Nitro\";\n  string public constant symbol = \"NOX\";\n  uint8 public constant decimals = 18;\n\n  function NitroToken(uint256 _totalSupply) public {\n    totalSupply = _totalSupply;\n    balances[owner] = _totalSupply;\n    Transfer(address(0), owner, _totalSupply);\n  }\n  \n  function acceptOwnership() public {\n    address oldOwner = owner;\n    super.acceptOwnership();\n    balances[owner] = balances[oldOwner];\n    balances[oldOwner] = 0;\n    Transfer(oldOwner, owner, balances[owner]);\n  }\n\n}\n\ncontract Declaration {\n  \n  enum TokenTypes { crowdsale, interactive, icandy, consultant, team, reserve }\n  mapping(uint => uint256) public balances;\n  \n  uint256 public preSaleStart = 1511020800;\n  uint256 public preSaleEnd = 1511452800;\n    \n  uint256 public saleStart = 1512057600;\n  uint256 public saleStartFirstDayEnd = saleStart + 1 days;\n  uint256 public saleStartSecondDayEnd = saleStart + 3 days;\n  uint256 public saleEnd = 1514304000;\n  \n  uint256 public teamFrozenTokens = 4800000 * 1 ether;\n  uint256 public teamUnfreezeDate = saleEnd + 182 days;\n\n  uint256 public presaleMinValue = 5 ether;\n \n  uint256 public preSaleRate = 1040;\n  uint256 public saleRate = 800;\n  uint256 public saleRateFirstDay = 1000;\n  uint256 public saleRateSecondDay = 920;\n\n  NitroToken public token;\n\n  function Declaration() public {\n    balances[uint8(TokenTypes.crowdsale)] = 60000000 * 1 ether;\n    balances[uint8(TokenTypes.interactive)] = 6000000 * 1 ether;\n    balances[uint8(TokenTypes.icandy)] = 3000000 * 1 ether;\n    balances[uint8(TokenTypes.consultant)] = 1200000 * 1 ether;\n    balances[uint8(TokenTypes.team)] = 7200000 * 1 ether;\n    balances[uint8(TokenTypes.reserve)] = 42600000 * 1 ether;\n    token = new NitroToken(120000000 * 1 ether);\n  }\n  \n  modifier withinPeriod(){\n    require(isPresale() || isSale());\n    _;\n  }\n  \n  function isPresale() public constant returns (bool){\n    return now>=preSaleStart && now<=preSaleEnd;\n  }\n\n  function isSale()  public constant returns (bool){\n    return now >= saleStart && now <= saleEnd;\n  }\n  \n  function rate() public constant returns (uint256) {\n    if (isPresale()) {\n      return preSaleRate;\n    } else if (now>=saleStart && now<=(saleStartFirstDayEnd)){\n      return saleRateFirstDay;\n    } else if (now>(saleStartFirstDayEnd) && now<=(saleStartSecondDayEnd)){\n      return saleRateSecondDay;\n    }\n    return saleRate;\n  }\n  \n}\n\ncontract Crowdsale is Declaration, Ownable{\n    \n    using SafeMath for uint256;\n\n    address public wallet;\n    \n    uint256 public weiLimit = 6 ether;\n    uint256 public satLimit = 30000000;\n\n    mapping(address => bool) users;\n    mapping(address => uint256) weiOwed;\n    mapping(address => uint256) satOwed;\n    mapping(address => uint256) weiTokensOwed;\n    mapping(address => uint256) satTokensOwed;\n    \n    uint256 public weiRaised;\n    uint256 public satRaised;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    \n    function Crowdsale(address _wallet) Declaration public {\n        wallet = _wallet;    \n    }\n    \n    function () public payable {\n        buy();\n    }\n\n    function weiFreeze(address _addr, uint256 _value) internal {\n        uint256 amount = _value * rate();\n        balances[0] = balances[0].sub(amount);\n        weiOwed[_addr] += _value;\n        weiTokensOwed[_addr] += amount;\n    }\n\n    function weiTransfer(address _addr, uint256 _value) internal {\n        uint256 amount = _value * rate();\n        balances[0] = balances[0].sub(amount);\n        token.transfer(_addr, amount);\n        weiRaised += _value;\n        TokenPurchase(_addr, _addr, _value, amount);\n    }\n\n    function buy() withinPeriod public payable returns (bool){\n        if (isPresale()) {\n          require(msg.value >= presaleMinValue);\n        }else{\n          require(msg.value > 0);\n        }\n        if (weiOwed[msg.sender]>0) {\n          weiFreeze(msg.sender, msg.value);\n        } else if (msg.value>weiLimit && !users[msg.sender]) {\n          weiFreeze(msg.sender, msg.value.sub(weiLimit));\n          weiTransfer(msg.sender, weiLimit);\n        } else {\n          weiTransfer(msg.sender, msg.value);\n        }\n        return true;\n    }\n    \n    function _verify(address _addr) onlyOwner internal {\n        users[_addr] = true;\n        \n        weiRaised += weiOwed[_addr];\n        satRaised += satOwed[_addr];\n\n        token.transfer(_addr, weiTokensOwed[_addr] + satTokensOwed[_addr]);\n        \n        TokenPurchase(_addr, _addr, 0, weiTokensOwed[_addr] + satTokensOwed[_addr]);\n\n        weiOwed[_addr]=0;\n        satOwed[_addr]=0;\n        weiTokensOwed[_addr]=0;\n        satTokensOwed[_addr]=0;\n    }\n\n    function verify(address _addr) public returns(bool){\n        _verify(_addr);\n        return true;\n    }\n    \n    function isVerified(address _addr) public constant returns(bool){\n      return users[_addr];\n    }\n    \n    function getWeiTokensOwed(address _addr) public constant returns (uint256){\n        return weiTokensOwed[_addr];\n    }\n\n    function getSatTokensOwed(address _addr) public constant returns (uint256){\n        return satTokensOwed[_addr];\n    }\n\n    function owedTokens(address _addr) public constant returns (uint256){\n        return weiTokensOwed[_addr] + satTokensOwed[_addr];\n    }\n    \n    function getSatOwed(address _addr) public constant returns (uint256){\n        return satOwed[_addr];\n    }\n    \n    function getWeiOwed(address _addr) public constant returns (uint256){\n        return weiOwed[_addr];\n    }\n    \n    function satFreeze(address _addr, uint256 _wei, uint _sat) private {\n        uint256 amount = _wei * rate();\n        balances[0] = balances[0].sub(amount);\n        \n        satOwed[_addr] += _sat;\n        satTokensOwed[_addr] += amount;    \n    }\n\n    function satTransfer(address _addr, uint256 _wei, uint _sat) private {\n        uint256 amount = _wei * rate();\n        balances[0] = balances[0].sub(amount);\n        \n        token.transfer(_addr, amount);\n        TokenPurchase(_addr, _addr, _wei, amount);\n        satRaised += _sat;\n    }\n\n    function buyForBtc(\n        address _addr,\n        uint256 _sat,\n        uint256 _satOwed,\n        uint256 _wei,\n        uint256 _weiOwed\n    ) onlyOwner withinPeriod public {\n        require(_addr != address(0));\n        \n        satFreeze(_addr, _weiOwed, _satOwed);\n        satTransfer(_addr, _wei, _sat);\n    }\n    \n    function refundWei(address _addr, uint256 _amount) onlyOwner public returns (bool){\n        _addr.transfer(_amount);\n        balances[0] += weiTokensOwed[_addr];\n        weiTokensOwed[_addr] = 0;\n        weiOwed[_addr] = 0;\n        return true;\n    }\n  \n    function refundedSat(address _addr) onlyOwner public returns (bool){\n        balances[0] += satTokensOwed[_addr];\n        satTokensOwed[_addr] = 0;\n        satOwed[_addr] = 0;\n        return true;\n    }\n    \n    function sendOtherTokens(\n        uint8 _index,\n        address _addr,\n        uint256 _amount\n    ) onlyOwner public {\n        require(_addr!=address(0));\n\n        if (_index==uint8(TokenTypes.team) && now<teamUnfreezeDate) {\n            uint256 limit = balances[uint8(TokenTypes.team)].sub(teamFrozenTokens);\n            require(_amount<=limit);\n        }\n        \n        token.transfer(_addr, _amount);\n        balances[_index] = balances[_index].sub(_amount);\n        TokenPurchase(owner, _addr, 0, _amount);\n    }\n    \n    function rsrvToSale(uint256 _amount) onlyOwner public {\n        balances[uint8(TokenTypes.reserve)] = balances[uint8(TokenTypes.reserve)].sub(_amount);\n        balances[0] += _amount;\n    }\n    \n    function forwardFunds(uint256 amount) onlyOwner public {\n        wallet.transfer(amount);\n    }\n    \n    function setTokenOwner(address _addr) onlyOwner public {\n        token.transferOwnership(_addr);\n    }\n\n}",
  "bytecode": "6060604052635a105900600155635a16f080600255635a202b0060035562015180600354016004556203f48060035401600555635a4272006006556a03f870857a3e0e3800000060075562eff10060065401600855674563918244f40000600955610410600a55610320600b556103e8600c55610398600d5533600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506753444835ec5800006012556301c9c38060135534156200011b57600080fd5b60405160208062003a28833981016040528080519060200190919050506a31a17e847807b1bc0000006000808060058111156200015457fe5b60ff168152602001908152602001600020819055506a04f68ca6d8cd91c6000000600080600160058111156200018657fe5b60ff168152602001908152602001600020819055506a027b46536c66c8e300000060008060026005811115620001b857fe5b60ff1681526020019081526020016000208190555069fe1c215e8f838e00000060008060036005811115620001e957fe5b60ff168152602001908152602001600020819055506a05f4a8c8375d1554000000600080600460058111156200021b57fe5b60ff168152602001908152602001600020819055506a233ce6a09ce6be310000006000806005808111156200024c57fe5b60ff168152602001908152602001600020819055506a6342fd08f00f63780000006200027762000320565b80828152602001915050604051809103906000f08015156200029857600080fd5b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000331565b60405161117380620028b583390190565b61257480620003416000396000f3006060604052600436106101f9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301f2a2c5146102045780630d5624b31461026157806317d7a47d1461028a57806318e02bd9146102d85780631972172b146103115780632c4e722e1461033a57806335ad9581146103635780634042b66f1461038c57806340557cf1146103b55780634903b0d1146103de5780634b3a5fa614610415578063521eb2731461043e57806363a9c3d71461049357806367130e8c146104e45780636bc64e0f1461053157806375c9ee061461055a57806379ba5097146105835780637d4c4a0414610598578063803c6fa9146105c15780638da5cb5b1461060e57806391d965411461066357806395364a84146106b4578063a6e81e7c146106e1578063a6f2ae3a1461073b578063a8154e171461075d578063ab0bcc4114610786578063b785473c146107af578063b9209e33146107d8578063bae3c27f14610829578063c10b935814610852578063c89971211461087b578063cf6346cb1461089e578063d35066e6146108c7578063d833dbe9146108ea578063dc63f0be14610913578063f2fde38b14610960578063f6f5115c14610999578063f8115891146109e6578063f8c1c18614610a33578063f93f7ab514610a60578063fc0c546a14610a89575b610201610ade565b50005b341561020f57600080fd5b61025f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091908035906020019091908035906020019091905050610c2e565b005b341561026c57600080fd5b610274610d05565b6040518082815260200191505060405180910390f35b341561029557600080fd5b6102d6600480803560ff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d0b565b005b34156102e357600080fd5b61030f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fd4565b005b341561031c57600080fd5b610324611103565b6040518082815260200191505060405180910390f35b341561034557600080fd5b61034d611109565b6040518082815260200191505060405180910390f35b341561036e57600080fd5b610376611170565b6040518082815260200191505060405180910390f35b341561039757600080fd5b61039f611176565b6040518082815260200191505060405180910390f35b34156103c057600080fd5b6103c861117c565b6040518082815260200191505060405180910390f35b34156103e957600080fd5b6103ff6004808035906020019091905050611182565b6040518082815260200191505060405180910390f35b341561042057600080fd5b61042861119a565b6040518082815260200191505060405180910390f35b341561044957600080fd5b6104516111a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561049e57600080fd5b6104ca600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c6565b604051808215151515815260200191505060405180910390f35b34156104ef57600080fd5b61051b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111da565b6040518082815260200191505060405180910390f35b341561053c57600080fd5b610544611223565b6040518082815260200191505060405180910390f35b341561056557600080fd5b61056d611229565b6040518082815260200191505060405180910390f35b341561058e57600080fd5b61059661122f565b005b34156105a357600080fd5b6105ab61136e565b6040518082815260200191505060405180910390f35b34156105cc57600080fd5b6105f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611374565b6040518082815260200191505060405180910390f35b341561061957600080fd5b6106216113bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066e57600080fd5b61069a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113e3565b604051808215151515815260200191505060405180910390f35b34156106bf57600080fd5b6106c7611533565b604051808215151515815260200191505060405180910390f35b34156106ec57600080fd5b610721600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061154e565b604051808215151515815260200191505060405180910390f35b610743610ade565b604051808215151515815260200191505060405180910390f35b341561076857600080fd5b6107706116df565b6040518082815260200191505060405180910390f35b341561079157600080fd5b6107996116e5565b6040518082815260200191505060405180910390f35b34156107ba57600080fd5b6107c26116eb565b6040518082815260200191505060405180910390f35b34156107e357600080fd5b61080f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116f1565b604051808215151515815260200191505060405180910390f35b341561083457600080fd5b61083c611747565b6040518082815260200191505060405180910390f35b341561085d57600080fd5b61086561174d565b6040518082815260200191505060405180910390f35b341561088657600080fd5b61089c6004808035906020019091905050611753565b005b34156108a957600080fd5b6108b1611814565b6040518082815260200191505060405180910390f35b34156108d257600080fd5b6108e8600480803590602001909190505061181a565b005b34156108f557600080fd5b6108fd6118f0565b6040518082815260200191505060405180910390f35b341561091e57600080fd5b61094a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118f6565b6040518082815260200191505060405180910390f35b341561096b57600080fd5b610997600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061193f565b005b34156109a457600080fd5b6109d0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611a1b565b6040518082815260200191505060405180910390f35b34156109f157600080fd5b610a1d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aa5565b6040518082815260200191505060405180910390f35b3415610a3e57600080fd5b610a46611aee565b604051808215151515815260200191505060405180910390f35b3415610a6b57600080fd5b610a73611b09565b6040518082815260200191505060405180910390f35b3415610a9457600080fd5b610a9c611b0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000610ae8611533565b80610af75750610af6611aee565b5b1515610b0257600080fd5b610b0a611533565b15610b25576009543410151515610b2057600080fd5b610b35565b600034111515610b3457600080fd5b5b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610b8c57610b873334611b35565b610c27565b60125434118015610be75750601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610c1b57610c0a33610c0560125434611c1d90919063ffffffff16565b611b35565b610c1633601254611c36565b610c26565b610c253334611c36565b5b5b6001905090565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c8a57600080fd5b610c92611533565b80610ca15750610ca0611aee565b5b1515610cac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515610ce857600080fd5b610cf3858285611dea565b610cfe858386611ed3565b5050505050565b60015481565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610da557600080fd5b60046005811115610db257fe5b60ff168460ff16148015610dc7575060085442105b15610e1457610e0260075460008060046005811115610de257fe5b60ff16815260200190815260200160002054611c1d90919063ffffffff16565b9050808211151515610e1357600080fd5b5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610ee157600080fd5b6102c65a03f11515610ef257600080fd5b5050506040518051905050610f25826000808760ff16815260200190815260200160002054611c1d90919063ffffffff16565b6000808660ff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18600085604051808381526020018281526020019250505060405180910390a350505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561103057600080fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156110ec57600080fd5b6102c65a03f115156110fd57600080fd5b50505050565b60135481565b6000611113611533565b1561112257600a54905061116d565b600354421015801561113657506004544211155b1561114557600c54905061116d565b6004544211801561115857506005544211155b1561116757600d54905061116d565b600b5490505b90565b600d5481565b60195481565b600b5481565b60006020528060005260406000206000915090505481565b60045481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006111d182612088565b60019050919050565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60025481565b60075481565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561126b57600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c757600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60055481565b6000601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561144157600080fd5b601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600080808152602001908152602001600020600082825401925050819055506000601860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019050919050565b6000600154421015801561154957506002544211155b905090565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ac57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156115ec57600080fd5b601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600080808152602001908152602001600020600082825401925050819055506000601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60085481565b60035481565b601a5481565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60125481565b60065481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117af57600080fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561181157600080fd5b50565b60095481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187657600080fd5b6118a98160008060058081111561188957fe5b60ff16815260200190815260200160002054611c1d90919063ffffffff16565b6000806005808111156118b857fe5b60ff16815260200190815260200160002081905550806000808081526020019081526020016000206000828254019250508190555050565b600a5481565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119d757600080fd5b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050919050565b6000601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006003544210158015611b0457506006544211155b905090565b600c5481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611b3f611109565b82029050611b688160008080815260200190815260200160002054611c1d90919063ffffffff16565b6000808081526020019081526020016000208190555081601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050565b6000828211151515611c2b57fe5b818303905092915050565b6000611c40611109565b82029050611c698160008080815260200190815260200160002054611c1d90919063ffffffff16565b60008080815260200190815260200160002081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611d4c57600080fd5b6102c65a03f11515611d5d57600080fd5b5050506040518051905050816019600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a3505050565b6000611df4611109565b83029050611e1d8160008080815260200190815260200160002054611c1d90919063ffffffff16565b6000808081526020019081526020016000208190555081601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050505050565b6000611edd611109565b83029050611f068160008080815260200190815260200160002054611c1d90919063ffffffff16565b60008080815260200190815260200160002081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611fe957600080fd5b6102c65a03f11515611ffa57600080fd5b50505060405180519050508373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188584604051808381526020018281526020019250505060405180910390a381601a6000828254019250508190555050505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120e457600080fd5b6001601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601960008282540192505081905550601660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601a60008282540192505081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82601860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054016000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561232757600080fd5b6102c65a03f1151561233857600080fd5b50505060405180519050508073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad186000601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401604051808381526020018281526020019250505060405180910390a36000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505600a165627a7a723058206691002f043aa2d043c862f5b61b4d97095ff6e0a0c5d6a6a90585198fa708ab0029606060405233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550341561009257600080fd5b60405160208061117383398101604052808051906020019091905050806000819055508060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350610fc0806101b36000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d57806318160ddd146101a757806323b872dd146101d0578063313ce5671461024957806370a082311461027857806379ba5097146102c55780638da5cb5b146102da57806395d89b411461032f578063a9059cbb146103bd578063dd62ed3e14610417578063f2fde38b14610483575b600080fd5b34156100ca57600080fd5b6100d26104bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506104f5565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba6105e7565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b61022f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105ed565b604051808215151515815260200191505060405180910390f35b341561025457600080fd5b61025c61089a565b604051808260ff1660ff16815260200191505060405180910390f35b341561028357600080fd5b6102af600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061089f565b6040518082815260200191505060405180910390f35b34156102d057600080fd5b6102d86108e8565b005b34156102e557600080fd5b6102ed610aec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033a57600080fd5b610342610b12565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610382578082015181840152602081019050610367565b50505050905090810190601f1680156103af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c857600080fd5b6103fd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b4b565b604051808215151515815260200191505060405180910390f35b341561042257600080fd5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cd9565b6040518082815260200191505060405180910390f35b341561048e57600080fd5b6104ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d60565b005b6040805190810160405280600581526020017f4e6974726f00000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561062a57600080fd5b60008211151561063957600080fd5b61068b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3c90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061075d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3c90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610917610e55565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4e4f58000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b8857600080fd5b610bda82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dbc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610df857600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515610e4a57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610e9157600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eed57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505600a165627a7a723058207809176de79107567cfefd6120fcbdccecb97d64f357519c8c4300200093f8110029000000000000000000000000c7e3488a98d6e3dd192e694d9de3a2b3eacd9e5f",
  "constructorArguments": "000000000000000000000000c7e3488a98d6e3dd192e694d9de3a2b3eacd9e5f"
}