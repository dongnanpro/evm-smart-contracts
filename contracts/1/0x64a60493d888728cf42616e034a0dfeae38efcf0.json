{
  "address": "0x64a60493d888728cf42616e034a0dfeae38efcf0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OneledgerToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-13\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n/**\n* @title OneledgerToken\n* @dev this is the oneledger token\n*/\ncontract OneledgerToken is MintableToken {\n    using SafeMath for uint256;\n\n    string public name = \"Oneledger Token\";\n    string public symbol = \"OLT\";\n    uint8 public decimals = 18;\n    bool public active = false;\n    /**\n     * @dev restrict function to be callable when token is active\n     */\n    modifier activated() {\n        require(active == true);\n        _;\n    }\n\n    /**\n     * @dev activate token transfers\n     */\n    function activate() public onlyOwner {\n        active = true;\n    }\n\n    /**\n     * @dev transfer    ERC20 standard transfer wrapped with `activated` modifier\n     */\n    function transfer(address to, uint256 value) public activated returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev transfer    ERC20 standard transferFrom wrapped with `activated` modifier\n     */\n    function transferFrom(address from, address to, uint256 value) public activated returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n}\n\ncontract ICO is Ownable {\n    using SafeMath for uint256;\n\n    struct WhiteListRecord {\n        uint256 offeredWei;\n        uint256 lastPurchasedTimestamp;\n    }\n\n    OneledgerToken public token;\n    address public wallet; // Address where funds are collected\n    uint256 public rate;   // How many token units a buyer gets per eth\n    mapping (address => WhiteListRecord) public whiteList;\n    uint256 public initialTime;\n    bool public saleClosed;\n    uint256 public weiCap;\n    uint256 public weiRaised;\n\n    uint256 public TOTAL_TOKEN_SUPPLY = 1000000000 * (10 ** 18);\n\n    event BuyTokens(uint256 weiAmount, uint256 rate, uint256 token, address beneficiary);\n    event UpdateRate(uint256 rate);\n    event UpdateWeiCap(uint256 weiCap);\n    /**\n    * @dev constructor\n    */\n    constructor(address _wallet, uint256 _rate, uint256 _startDate, uint256 _weiCap) public {\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(_weiCap.mul(_rate) <= TOTAL_TOKEN_SUPPLY);\n\n        wallet = _wallet;\n        rate = _rate;\n        initialTime = _startDate;\n        saleClosed = false;\n        weiCap = _weiCap;\n        weiRaised = 0;\n\n        token = new OneledgerToken();\n    }\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     */\n    function() external payable {\n        buyTokens();\n    }\n\n    /**\n     * @dev update the rate\n     */\n    function updateRate(uint256 rate_) public onlyOwner {\n      require(now <= initialTime);\n      rate = rate_;\n      emit UpdateRate(rate);\n    }\n\n    /**\n     * @dev update the weiCap\n     */\n    function updateWeiCap(uint256 weiCap_) public onlyOwner {\n      require(now <= initialTime);\n      weiCap = weiCap_;\n      emit UpdateWeiCap(weiCap_);\n    }\n\n    /**\n     * @dev buy tokens\n     */\n    function buyTokens() public payable {\n        validatePurchase(msg.value);\n        uint256 tokenToBuy = msg.value.mul(rate);\n        whiteList[msg.sender].lastPurchasedTimestamp = now;\n        weiRaised = weiRaised.add(msg.value);\n        token.mint(msg.sender, tokenToBuy);\n        wallet.transfer(msg.value);\n        emit BuyTokens(msg.value, rate, tokenToBuy, msg.sender);\n    }\n\n    /**\n    * @dev add to white list\n    * param addresses the list of address added to white list\n    * param weiPerContributor the wei can be transfer per contributor\n    * param capWei for the user in this list\n    */\n    function addToWhiteList(address[] addresses, uint256 weiPerContributor) public onlyOwner {\n        for (uint32 i = 0; i < addresses.length; i++) {\n            whiteList[addresses[i]] = WhiteListRecord(weiPerContributor, 0);\n        }\n    }\n\n    /**\n     * @dev mint token to new address, either contract or a wallet\n     * param OneledgerTokenVesting vesting contract\n     * param uint256 total token number to mint\n    */\n    function mintToken(address target, uint256 tokenToMint) public onlyOwner {\n      token.mint(target, tokenToMint);\n    }\n\n    /**\n     * @dev close the ICO\n     */\n    function closeSale() public onlyOwner {\n        saleClosed = true;\n        if (TOTAL_TOKEN_SUPPLY > token.totalSupply()) {\n          token.mint(owner, TOTAL_TOKEN_SUPPLY.sub(token.totalSupply()));\n        }\n        token.finishMinting();\n        token.transferOwnership(owner);\n    }\n\n    function validatePurchase(uint256 weiPaid) internal view{\n        require(!saleClosed);\n        require(initialTime <= now);\n        require(whiteList[msg.sender].offeredWei > 0);\n        require(weiPaid <= weiCap.sub(weiRaised));\n        // can only purchase once every 24 hours\n        require(now.sub(whiteList[msg.sender].lastPurchasedTimestamp) > 24 hours);\n        uint256 elapsedTime = now.sub(initialTime);\n        // check day 1 buy limit\n        require(elapsedTime > 24 hours || msg.value <= whiteList[msg.sender].offeredWei);\n        // check day 2 buy limit\n        require(elapsedTime > 48 hours || msg.value <= whiteList[msg.sender].offeredWei.mul(2));\n    }\n}\n\n\ncontract OneledgerTokenVesting is Ownable{\n    using SafeMath for uint256;\n\n    event Released(uint256 amount);\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    uint256 public startFrom;\n    uint256 public period;\n    uint256 public tokensReleasedPerPeriod;\n\n    uint256 public elapsedPeriods;\n\n    OneledgerToken private token;\n\n    /**\n     * @dev Creates a vesting contract for OneledgerToken\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _startFrom Datetime when the vesting will begin\n     * @param _period The preiod to release the token\n     * @param _tokensReleasedPerPeriod the token to release per period\n     */\n    constructor(\n        address _beneficiary,\n        uint256 _startFrom,\n        uint256 _period,\n        uint256 _tokensReleasedPerPeriod,\n        OneledgerToken _token\n    ) public {\n        require(_beneficiary != address(0));\n        require(_startFrom >= now);\n\n        beneficiary = _beneficiary;\n        startFrom = _startFrom;\n        period = _period;\n        tokensReleasedPerPeriod = _tokensReleasedPerPeriod;\n        elapsedPeriods = 0;\n        token = _token;\n    }\n\n    /**\n     *  @dev getToken this may be more convinience for user\n     *        to check if their vesting contract is binded with a right token\n     * return OneledgerToken\n     */\n     function getToken() public view returns(OneledgerToken) {\n       return token;\n     }\n\n    /**\n     * @dev release\n     * param _token Oneledgertoken that will be released to beneficiary\n     */\n    function release() public {\n        require(msg.sender == owner || msg.sender == beneficiary);\n        require(token.balanceOf(this) >= 0 && now >= startFrom);\n        uint256 elapsedTime = now.sub(startFrom);\n        uint256 periodsInCurrentRelease = elapsedTime.div(period).sub(elapsedPeriods);\n        uint256 tokensReadyToRelease = periodsInCurrentRelease.mul(tokensReleasedPerPeriod);\n        uint256 amountToTransfer = tokensReadyToRelease > token.balanceOf(this) ? token.balanceOf(this) : tokensReadyToRelease;\n        require(amountToTransfer > 0);\n        elapsedPeriods = elapsedPeriods.add(periodsInCurrentRelease);\n        token.transfer(beneficiary, amountToTransfer);\n        emit Released(amountToTransfer);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6003805460a060020a60ff021916905560c0604052600f60808190527f4f6e656c656467657220546f6b656e000000000000000000000000000000000060a090815261004e91600491906100bf565b506040805180820190915260038082527f4f4c5400000000000000000000000000000000000000000000000000000000006020909201918252610093916005916100bf565b506006805461ff001960ff1990911660121716905560038054600160a060020a0319163317905561015a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010057805160ff191683800117855561012d565b8280016001018555821561012d579182015b8281111561012d578251825591602001919060010190610112565b5061013992915061013d565b5090565b61015791905b808211156101395760008155600101610143565b90565b610d5d806101696000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302fb0c5e811461010b57806305d2035b1461013457806306fdde0314610149578063095ea7b3146101d35780630f15f4c0146101f757806318160ddd1461020e57806323b872dd14610235578063313ce5671461025f57806340c10f191461028a57806366188463146102ae57806370a08231146102d2578063715018a6146102f35780637d64bcb4146103085780638da5cb5b1461031d57806395d89b411461034e578063a9059cbb14610363578063d73dd62314610387578063dd62ed3e146103ab578063f2fde38b146103d2575b600080fd5b34801561011757600080fd5b506101206103f3565b604080519115158252519081900360200190f35b34801561014057600080fd5b50610120610401565b34801561015557600080fd5b5061015e610422565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b50610120600160a060020a03600435166024356104b0565b34801561020357600080fd5b5061020c610516565b005b34801561021a57600080fd5b5061022361053e565b60408051918252519081900360200190f35b34801561024157600080fd5b50610120600160a060020a0360043581169060243516604435610544565b34801561026b57600080fd5b50610274610574565b6040805160ff9092168252519081900360200190f35b34801561029657600080fd5b50610120600160a060020a036004351660243561057d565b3480156102ba57600080fd5b50610120600160a060020a0360043516602435610698565b3480156102de57600080fd5b50610223600160a060020a0360043516610788565b3480156102ff57600080fd5b5061020c6107a3565b34801561031457600080fd5b50610120610811565b34801561032957600080fd5b506103326108b7565b60408051600160a060020a039092168252519081900360200190f35b34801561035a57600080fd5b5061015e6108c6565b34801561036f57600080fd5b50610120600160a060020a0360043516602435610921565b34801561039357600080fd5b50610120600160a060020a036004351660243561094f565b3480156103b757600080fd5b50610223600160a060020a03600435811690602435166109e8565b3480156103de57600080fd5b5061020c600160a060020a0360043516610a13565b600654610100900460ff1681565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600354600160a060020a0316331461052d57600080fd5b6006805461ff001916610100179055565b60015490565b60065460009060ff61010090910416151560011461056157600080fd5b61056c848484610a36565b949350505050565b60065460ff1681565b600354600090600160a060020a0316331461059757600080fd5b60035474010000000000000000000000000000000000000000900460ff16156105bf57600080fd5b6001546105d2908363ffffffff610bad16565b600155600160a060020a0383166000908152602081905260409020546105fe908363ffffffff610bad16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156106ed57336000908152600260209081526040808320600160a060020a0388168452909152812055610722565b6106fd818463ffffffff610bc016565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146107ba57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a0316331461082b57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561085357600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a85780601f1061047d576101008083540402835291602001916104a8565b60065460009060ff61010090910416151560011461093e57600080fd5b6109488383610bd2565b9392505050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610983908363ffffffff610bad16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610a2a57600080fd5b610a3381610cb3565b50565b6000600160a060020a0383161515610a4d57600080fd5b600160a060020a038416600090815260208190526040902054821115610a7257600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610aa257600080fd5b600160a060020a038416600090815260208190526040902054610acb908363ffffffff610bc016565b600160a060020a038086166000908152602081905260408082209390935590851681522054610b00908363ffffffff610bad16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610b42908363ffffffff610bc016565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b81810182811015610bba57fe5b92915050565b600082821115610bcc57fe5b50900390565b6000600160a060020a0383161515610be957600080fd5b33600090815260208190526040902054821115610c0557600080fd5b33600090815260208190526040902054610c25908363ffffffff610bc016565b3360009081526020819052604080822092909255600160a060020a03851681522054610c57908363ffffffff610bad16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a0381161515610cc857600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820a64b27bd5191c40996d4439447fdaaa4bc2e7343bcc726d79ee7fa799033d4d90029"
}