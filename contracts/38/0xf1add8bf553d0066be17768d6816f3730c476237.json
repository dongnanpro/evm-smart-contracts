{
  "address": "0xf1add8bf553d0066be17768d6816f3730c476237",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EasySmartolutionRef",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity ^0.4.25;\n\n/*\n * Website: smartolution.org\n *\n * Easiest way to participate in original Smartolution!\n * This is not a separate project, all ether goes to the original contract!\n * 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23\n * \n * Smartolution.org (0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23)\n * requires you to send daily transactions for 44 days!\n *\n * This contract DOES IT FOR YOU!\n *\n * ONE transaction and AUTOMATIC PAYOUTS for 44 days! \n * \n * How it works?\n * Easy! \n * Your first and only payment will be split into 45 equal parts\n * and sent as an automatic daily payment to smartolution contract!\n * Starting from the next day for 44 days you are going to recieve\n * INCREASING PAYOUTS from original smartolution contract!\n *\n * NO NEED to send 0 ether transactions, FULLY AUTOMATED PAYROLL!\n *\n * Send any amount inbetween 0.45 and 225 ether!\n *\n * Minimum: 0.45 ether (0.01 ether daily) ~170% payout @ 45th day\n * Maximum: 225 ehter (5 ether daily) ~155% payout @ 45th day\n * Gas limit: 500 000\n * Recommended gas price: https://ethgasstation.info/\n * \n */\ncontract EasySmartolution {\n    address constant smartolution = 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23;\n    \n    event ParticipantAdded(address _sender);\n    event ParticipantRemoved(address _sender);\n    event ReferrerAdded(address _contract, address _sender);\n\n    mapping (address => address) public participants; \n    mapping (address => bool) public referrers;\n    \n    address private processing;\n \n    constructor(address _processing) public {\n        processing = _processing;\n    }\n    \n    function () external payable {\n        if (participants[msg.sender] == address(0)) {\n            addParticipant(msg.sender, address(0));\n        } else {\n            if (msg.value == 0) {\n                processPayment(msg.sender);\n            } else if (msg.value == 0.00001111 ether) {\n                getOut();\n            } else {\n                revert();\n            }\n        }\n    }\n    \n    function addParticipant(address _address, address _referrer) payable public {\n        require(participants[_address] == address(0), \"This participant is already registered\");\n        require(msg.value >= 0.45 ether && msg.value <= 225 ether, \"Deposit should be between 0.45 ether and 225 ether (45 days)\");\n        \n        participants[_address] = address(new Participant(_address, msg.value / 45));\n        processPayment(_address);\n        \n        processing.send(msg.value / 33);\n        if (_referrer != address(0) && referrers[_referrer]) {\n            _referrer.send(msg.value / 20);\n        }\n  \n        emit ParticipantAdded(_address);\n    }\n    \n    function addReferrer(address _address) public {\n        require(!referrers[_address], \"This address is already a referrer\");\n        \n        referrers[_address] = true;\n        EasySmartolutionRef refContract = new EasySmartolutionRef();\n        refContract.setReferrer(_address);\n        refContract.setSmartolution(address(this));\n        \n        emit ReferrerAdded(address(refContract), _address);\n    }\n\n    function processPayment(address _address) public {\n        Participant participant = Participant(participants[_address]);\n\n        bool done = participant.processPayment.value(participant.daily())();\n        \n        if (done) {\n            participants[_address] = address(0);\n            emit ParticipantRemoved(_address);\n        }\n    }\n    \n    function getOut() public {\n        require(participants[msg.sender] != address(0), \"You are not a participant\");\n        Participant participant = Participant(participants[msg.sender]);\n        uint index;\n        uint value;\n        (value, index, ) = SmartolutionInterface(smartolution).users(address(participant));\n        uint paymentsLeft = (45 - index) * value;\n        if (paymentsLeft > address(this).balance) {\n            paymentsLeft = address(this).balance;\n        }\n        \n        participants[msg.sender] = address(0);\n        emit ParticipantRemoved(msg.sender);\n        \n        msg.sender.transfer(paymentsLeft);\n    }\n}\n\ncontract EasySmartolutionRef {\n    address public referrer;\n    address public smartolution;\n    \n    constructor () public {\n    }\n\n    function setReferrer(address _referrer) external {\n        require(referrer == address(0), \"referrer can only be set once\");\n        referrer = _referrer;\n    }\n\n    function setSmartolution(address _smartolution) external {\n        require(smartolution == address(0), \"smartolution can only be set once\");\n        smartolution = _smartolution;\n    }\n\n    function () external payable {\n        if (msg.value > 0) {\n            EasySmartolution(smartolution).addParticipant.value(msg.value)(msg.sender, referrer);\n        } else {\n            EasySmartolution(smartolution).processPayment(msg.sender);\n        }\n    }\n}\n\ncontract Participant {\n    address constant smartolution = 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23;\n\n    address public owner;\n    uint public daily;\n    \n    constructor(address _owner, uint _daily) public {\n        owner = _owner;\n        daily = _daily;\n    }\n    \n    function () external payable {}\n    \n    function processPayment() external payable returns (bool) {\n        require(msg.value == daily, \"Invalid value\");\n        \n        uint indexBefore;\n        uint index;\n        (,indexBefore,) = SmartolutionInterface(smartolution).users(address(this));\n        smartolution.call.value(msg.value)();\n        (,index,) = SmartolutionInterface(smartolution).users(address(this));\n\n        require(index != indexBefore, \"Smartolution rejected that payment, too soon or not enough ether\");\n    \n        owner.send(address(this).balance);\n\n        return index == 45;\n    }\n}\n\ncontract SmartolutionInterface {\n    struct User {\n        uint value;\n        uint index;\n        uint atBlock;\n    }\n\n    mapping (address => User) public users; \n}",
  "bytecode": "608060405234801561001057600080fd5b506103bc806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632423081e811461017657806368447c93146101a757806369632d56146101bc578063a18a7bfc146101dd575b60003411156100f65760015460008054604080517fd35ada32000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0392831660248201529051919093169263d35ada3292349260448084019382900301818588803b1580156100d857600080fd5b505af11580156100ec573d6000803e3d6000fd5b5050505050610174565b600154604080517f8fe123d70000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691638fe123d79160248082019260009290919082900301818387803b15801561015b57600080fd5b505af115801561016f573d6000803e3d6000fd5b505050505b005b34801561018257600080fd5b5061018b6101fe565b60408051600160a060020a039092168252519081900360200190f35b3480156101b357600080fd5b5061018b61020d565b3480156101c857600080fd5b50610174600160a060020a036004351661021c565b3480156101e957600080fd5b50610174600160a060020a03600435166102e9565b600154600160a060020a031681565b600054600160a060020a031681565b600154600160a060020a0316156102ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f736d6172746f6c7574696f6e2063616e206f6e6c7920626520736574206f6e6360448201527f6500000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03161561036157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f72656665727265722063616e206f6e6c7920626520736574206f6e6365000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820689deec993b333ef8b866ebaee7df59ab41881f37fde44fed6dcb3e3a6bf42b30029"
}