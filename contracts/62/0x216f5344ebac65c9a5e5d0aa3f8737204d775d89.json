{
  "address": "0x216f5344ebac65c9a5e5d0aa3f8737204d775d89",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ReserveRightsToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "1000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\n\ncontract ReserveRightsToken is ERC20Pausable {\n  string public name = \"Reserve Rights\";\n  string public symbol = \"RSR\";\n  uint8 public decimals = 18;\n\n  // Tokens belonging to Reserve team members and early investors are locked until network launch.\n  mapping (address => bool) public reserveTeamMemberOrEarlyInvestor;\n  event AccountLocked(address indexed lockedAccount);\n\n  // Hard-coded addresses from the previous deployment, which should be locked and contain token allocations. \n  address[] previousAddresses = [\n    0x8ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f,\n    0xb268c230720d16c69a61cbee24731e3b2a3330a1,\n    0x082705fabf49bd30de8f0222821f6d940713b89d,\n    0xc3aa4ced5dea58a3d1ca76e507515c79ca1e4436,\n    0x66f25f036eb4463d8a45c6594a325f9e89baa6db,\n    0x9e454fe7d8e087fcac4ec8c40562de781004477e,\n    0x4fcc7ca22680aed155f981eeb13089383d624aa9,\n    0x5a66650e5345d76eb8136ea1490cbcce1c08072e,\n    0x698a10b5d0972bffea306ba5950bd74d2af3c7ca,\n    0xdf437625216cca3d7148e18d09f4aab0d47c763b,\n    0x24b4a6847ccb32972de40170c02fda121ddc6a30,\n    0x8d29a24f91df381feb4ee7f05405d3fb888c643e,\n    0x5a7350d95b9e644dcab4bc642707f43a361bf628,\n    0xfc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f11,\n    0x3ac7a6c3a2ff08613b611485f795d07e785cbb95,\n    0x47fc47cbcc5217740905e16c4c953b2f247369d2,\n    0xd282337950ac6e936d0f0ebaaff1ffc3de79f3d5,\n    0xde59cd3aa43a2bf863723662b31906660c7d12b6,\n    0x5f84660cabb98f7b7764cd1ae2553442da91984e,\n    0xefbaaf73fc22f70785515c1e2be3d5ba2fb8e9b0,\n    0x63c5ffb388d83477a15eb940cfa23991ca0b30f0,\n    0x14f018cce044f9d3fb1e1644db6f2fab70f6e3cb,\n    0xbe30069d27a250f90c2ee5507bcaca5f868265f7,\n    0xcfef27288bedcd587a1ed6e86a996c8c5b01d7c1,\n    0x5f57bbccc7ffa4c46864b5ed999a271bc36bb0ce,\n    0xbae85de9858375706dde5907c8c9c6ee22b19212,\n    0x5cf4bbb0ff093f3c725abec32fba8f34e4e98af1,\n    0xcb2d434bf72d3cd43d0c368493971183640ffe99,\n    0x02fc8e99401b970c265480140721b28bb3af85ab,\n    0xe7ad11517d7254f6a0758cee932bffa328002dd0,\n    0x6b39195c164d693d3b6518b70d99877d4f7c87ef,\n    0xc59119d8e4d129890036a108aed9d9fe94db1ba9,\n    0xd28661e4c75d177d9c1f3c8b821902c1abd103a6,\n    0xba385610025b1ea8091ae3e4a2e98913e2691ff7,\n    0xcd74834b8f3f71d2e82c6240ae0291c563785356,\n    0x657a127639b9e0ccccfbe795a8e394d5ca158526\n  ];\n\n  constructor(address previousContract, address reservePrimaryWallet) public {\n    IERC20 previousToken = IERC20(previousContract);\n\n    _mint(reservePrimaryWallet, previousToken.balanceOf(reservePrimaryWallet));\n\n    for (uint i = 0; i < previousAddresses.length; i++) {\n      reserveTeamMemberOrEarlyInvestor[previousAddresses[i]] = true;\n      _mint(previousAddresses[i], previousToken.balanceOf(previousAddresses[i]));\n      emit AccountLocked(previousAddresses[i]);\n    }\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    // Tokens belonging to Reserve team members and early investors are locked until network launch.\n    require(!reserveTeamMemberOrEarlyInvestor[msg.sender]);\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    // Tokens belonging to Reserve team members and early investors are locked until network launch.\n    require(!reserveTeamMemberOrEarlyInvestor[from]);\n    return super.transferFrom(from, to, value);\n  }\n\n  /// This function is intended to be used only by Reserve team members and investors.\n  /// You can call it yourself, but you almost certainly don’t want to.\n  /// Anyone who calls this function will cause their own tokens to be subject to\n  /// a long lockup. Reserve team members and some investors do this to commit\n  /// ourselves to not dumping tokens early. If you are not a Reserve team member\n  /// or investor, you don’t need to limit yourself in this way.\n  ///\n  /// THIS FUNCTION LOCKS YOUR TOKENS. ONLY USE IT IF YOU KNOW WHAT YOU ARE DOING.\n  function lockMyTokensForever(string consent) public returns (bool) {\n    require(keccak256(abi.encodePacked(consent)) == keccak256(abi.encodePacked(\n      \"I understand that I am locking my account forever, or at least until the next token upgrade.\"\n    )));\n    reserveTeamMemberOrEarlyInvestor[msg.sender] = true;\n    emit AccountLocked(msg.sender);\n  }\n}",
  "bytecode": "60806040526040805190810160405280600e81526020017f5265736572766520526967687473000000000000000000000000000000000000815250600590805190602001906200005192919062000ee7565b506040805190810160405280600381526020017f5253520000000000000000000000000000000000000000000000000000000000815250600690805190602001906200009f92919062000ee7565b506012600760006101000a81548160ff021916908360ff16021790555061048060405190810160405280738ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f73ffffffffffffffffffffffffffffffffffffffff16815260200173b268c230720d16c69a61cbee24731e3b2a3330a173ffffffffffffffffffffffffffffffffffffffff16815260200173082705fabf49bd30de8f0222821f6d940713b89d73ffffffffffffffffffffffffffffffffffffffff16815260200173c3aa4ced5dea58a3d1ca76e507515c79ca1e443673ffffffffffffffffffffffffffffffffffffffff1681526020017366f25f036eb4463d8a45c6594a325f9e89baa6db73ffffffffffffffffffffffffffffffffffffffff168152602001739e454fe7d8e087fcac4ec8c40562de781004477e73ffffffffffffffffffffffffffffffffffffffff168152602001734fcc7ca22680aed155f981eeb13089383d624aa973ffffffffffffffffffffffffffffffffffffffff168152602001735a66650e5345d76eb8136ea1490cbcce1c08072e73ffffffffffffffffffffffffffffffffffffffff16815260200173698a10b5d0972bffea306ba5950bd74d2af3c7ca73ffffffffffffffffffffffffffffffffffffffff16815260200173df437625216cca3d7148e18d09f4aab0d47c763b73ffffffffffffffffffffffffffffffffffffffff1681526020017324b4a6847ccb32972de40170c02fda121ddc6a3073ffffffffffffffffffffffffffffffffffffffff168152602001738d29a24f91df381feb4ee7f05405d3fb888c643e73ffffffffffffffffffffffffffffffffffffffff168152602001735a7350d95b9e644dcab4bc642707f43a361bf62873ffffffffffffffffffffffffffffffffffffffff16815260200173fc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f1173ffffffffffffffffffffffffffffffffffffffff168152602001733ac7a6c3a2ff08613b611485f795d07e785cbb9573ffffffffffffffffffffffffffffffffffffffff1681526020017347fc47cbcc5217740905e16c4c953b2f247369d273ffffffffffffffffffffffffffffffffffffffff16815260200173d282337950ac6e936d0f0ebaaff1ffc3de79f3d573ffffffffffffffffffffffffffffffffffffffff16815260200173de59cd3aa43a2bf863723662b31906660c7d12b673ffffffffffffffffffffffffffffffffffffffff168152602001735f84660cabb98f7b7764cd1ae2553442da91984e73ffffffffffffffffffffffffffffffffffffffff16815260200173efbaaf73fc22f70785515c1e2be3d5ba2fb8e9b073ffffffffffffffffffffffffffffffffffffffff1681526020017363c5ffb388d83477a15eb940cfa23991ca0b30f073ffffffffffffffffffffffffffffffffffffffff1681526020017314f018cce044f9d3fb1e1644db6f2fab70f6e3cb73ffffffffffffffffffffffffffffffffffffffff16815260200173be30069d27a250f90c2ee5507bcaca5f868265f773ffffffffffffffffffffffffffffffffffffffff16815260200173cfef27288bedcd587a1ed6e86a996c8c5b01d7c173ffffffffffffffffffffffffffffffffffffffff168152602001735f57bbccc7ffa4c46864b5ed999a271bc36bb0ce73ffffffffffffffffffffffffffffffffffffffff16815260200173bae85de9858375706dde5907c8c9c6ee22b1921273ffffffffffffffffffffffffffffffffffffffff168152602001735cf4bbb0ff093f3c725abec32fba8f34e4e98af173ffffffffffffffffffffffffffffffffffffffff16815260200173cb2d434bf72d3cd43d0c368493971183640ffe9973ffffffffffffffffffffffffffffffffffffffff1681526020017302fc8e99401b970c265480140721b28bb3af85ab73ffffffffffffffffffffffffffffffffffffffff16815260200173e7ad11517d7254f6a0758cee932bffa328002dd073ffffffffffffffffffffffffffffffffffffffff168152602001736b39195c164d693d3b6518b70d99877d4f7c87ef73ffffffffffffffffffffffffffffffffffffffff16815260200173c59119d8e4d129890036a108aed9d9fe94db1ba973ffffffffffffffffffffffffffffffffffffffff16815260200173d28661e4c75d177d9c1f3c8b821902c1abd103a673ffffffffffffffffffffffffffffffffffffffff16815260200173ba385610025b1ea8091ae3e4a2e98913e2691ff773ffffffffffffffffffffffffffffffffffffffff16815260200173cd74834b8f3f71d2e82c6240ae0291c56378535673ffffffffffffffffffffffffffffffffffffffff16815260200173657a127639b9e0ccccfbe795a8e394d5ca15852673ffffffffffffffffffffffffffffffffffffffff1681525060099060246200079992919062000f6e565b50348015620007a757600080fd5b5060405160408062002cb18339810180604052810190808051906020019092919080519060200190929190505050600080620007f23362000ba4640100000000026401000000009004565b6000600460006101000a81548160ff02191690831515021790555083915062000903838373ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015620008b157600080fd5b505af1158015620008c6573d6000803e3d6000fd5b505050506040513d6020811015620008dd57600080fd5b810190808051906020019092919050505062000c0e640100000000026401000000009004565b600090505b60098054905081101562000b9a576001600860006009848154811015156200092c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000b0f600982815481101515620009bc57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166370a0823160098581548110151562000a1357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801562000abd57600080fd5b505af115801562000ad2573d6000803e3d6000fd5b505050506040513d602081101562000ae957600080fd5b810190808051906020019092919050505062000c0e640100000000026401000000009004565b60098181548110151562000b1f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f78be06d07afe380e04d6deeba0f33c892db454f303fb739d9b768987a5ec6aca60405160405180910390a2808060010191505062000908565b505050506200106b565b62000bc881600362000d6d6401000000000262001909179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008273ffffffffffffffffffffffffffffffffffffffff161415151562000c3557600080fd5b62000c5a8160025462000e306401000000000262001839179091906401000000009004565b60028190555062000cc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000e306401000000000262001839179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151562000daa57600080fd5b62000dc5828262000e52640100000000026401000000009004565b15151562000dd257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080828401905083811015151562000e4857600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151562000e9057600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000f2a57805160ff191683800117855562000f5b565b8280016001018555821562000f5b579182015b8281111562000f5a57825182559160200191906001019062000f3d565b5b50905062000f6a919062000ffd565b5090565b82805482825590600052602060002090810192821562000fea579160200282015b8281111562000fe95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000f8f565b5b50905062000ff9919062001025565b5090565b6200102291905b808211156200101e57600081600090555060010162001004565b5090565b90565b6200106891905b808211156200106457600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016200102c565b5090565b90565b611c36806200107b6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303ff0fec1461010c57806306fdde031461018d578063095ea7b31461021d57806318160ddd1461028257806323b872dd146102ad578063313ce5671461033257806339509351146103635780633f4ba83a146103c857806346fbf68e146103df5780635c975abb1461043a5780636ef8d66d1461046957806370a082311461048057806382dc1ec4146104d75780638456cb591461051a57806391cdccec1461053157806395d89b411461058c578063a457c2d71461061c578063a9059cbb14610681578063dd62ed3e146106e6575b600080fd5b34801561011857600080fd5b50610173600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061075d565b604051808215151515815260200191505060405180910390f35b34801561019957600080fd5b506101a26109d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e25780820151818401526020810190506101c7565b50505050905090810190601f16801561020f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022957600080fd5b50610268600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a6e565b604051808215151515815260200191505060405180910390f35b34801561028e57600080fd5b50610297610a9e565b6040518082815260200191505060405180910390f35b3480156102b957600080fd5b50610318600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aa8565b604051808215151515815260200191505060405180910390f35b34801561033e57600080fd5b50610347610b17565b604051808260ff1660ff16815260200191505060405180910390f35b34801561036f57600080fd5b506103ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b2a565b604051808215151515815260200191505060405180910390f35b3480156103d457600080fd5b506103dd610b5a565b005b3480156103eb57600080fd5b50610420600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c09565b604051808215151515815260200191505060405180910390f35b34801561044657600080fd5b5061044f610c26565b604051808215151515815260200191505060405180910390f35b34801561047557600080fd5b5061047e610c3d565b005b34801561048c57600080fd5b506104c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c48565b6040518082815260200191505060405180910390f35b3480156104e357600080fd5b50610518600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c90565b005b34801561052657600080fd5b5061052f610cb0565b005b34801561053d57600080fd5b50610572600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d60565b604051808215151515815260200191505060405180910390f35b34801561059857600080fd5b506105a1610d80565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e15780820151818401526020810190506105c6565b50505050905090810190601f16801561060e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561062857600080fd5b50610667600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e1e565b604051808215151515815260200191505060405180910390f35b34801561068d57600080fd5b506106cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e4e565b604051808215151515815260200191505060405180910390f35b3480156106f257600080fd5b50610747600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ebb565b6040518082815260200191505060405180910390f35b600060405160200180807f4920756e6465727374616e642074686174204920616d206c6f636b696e67206d81526020017f79206163636f756e7420666f72657665722c206f72206174206c65617374207581526020017f6e74696c20746865206e65787420746f6b656e20757067726164652e00000000815250605c0190506040516020818303038152906040526040518082805190602001908083835b60208310151561082057805182526020820191506020810190506020830392506107fb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040516020018082805190602001908083835b60208310151561088a5780518252602082019150602081019050602083039250610865565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156108f357805182526020820191506020810190506020830392506108ce565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561093057600080fd5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f78be06d07afe380e04d6deeba0f33c892db454f303fb739d9b768987a5ec6aca60405160405180910390a2919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a665780601f10610a3b57610100808354040283529160200191610a66565b820191906000526020600020905b815481529060010190602001808311610a4957829003601f168201915b505050505081565b6000600460009054906101000a900460ff16151515610a8c57600080fd5b610a968383610f42565b905092915050565b6000600254905090565b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610b0357600080fd5b610b0e84848461106f565b90509392505050565b600760009054906101000a900460ff1681565b6000600460009054906101000a900460ff16151515610b4857600080fd5b610b5283836110a1565b905092915050565b610b6333610c09565b1515610b6e57600080fd5b600460009054906101000a900460ff161515610b8957600080fd5b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610c1f8260036112d890919063ffffffff16565b9050919050565b6000600460009054906101000a900460ff16905090565b610c463361136c565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c9933610c09565b1515610ca457600080fd5b610cad816113c6565b50565b610cb933610c09565b1515610cc457600080fd5b600460009054906101000a900460ff16151515610ce057600080fd5b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60086020528060005260406000206000915054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e165780601f10610deb57610100808354040283529160200191610e16565b820191906000526020600020905b815481529060010190602001808311610df957829003601f168201915b505050505081565b6000600460009054906101000a900460ff16151515610e3c57600080fd5b610e468383611420565b905092915050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610ea957600080fd5b610eb38383611657565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f7f57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900460ff1615151561108d57600080fd5b611098848484611687565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156110de57600080fd5b61116d82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561131557600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61138081600361185a90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b6113da81600361190990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561145d57600080fd5b6114ec82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119b990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900460ff1615151561167557600080fd5b61167f83836119da565b905092915050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561171457600080fd5b6117a382600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119b990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061182e8484846119f1565b600190509392505050565b600080828401905083811015151561185057600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561189657600080fd5b6118a082826112d8565b15156118ab57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561194557600080fd5b61194f82826112d8565b15151561195b57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000808383111515156119cb57600080fd5b82840390508091505092915050565b60006119e73384846119f1565b6001905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611a3e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a7a57600080fd5b611acb816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119b990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b5e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a72305820a77697d5f28d889304b11d24d54fb8c51f8a07f1922a5f6ec1e2e74cbc1cede90029000000000000000000000000c2646eda7c2d4bf131561141c1d5696c4f01eb53000000000000000000000000fa3bd0b2ac6e63f16d16d7e449418837a8a3ae27",
  "constructorArguments": "000000000000000000000000c2646eda7c2d4bf131561141c1d5696c4f01eb53000000000000000000000000fa3bd0b2ac6e63f16d16d7e449418837a8a3ae27"
}