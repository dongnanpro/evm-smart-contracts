{
  "address": "0xb70ffff5af45345087292a56ce8a3f04d0cc475f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Grossbuch",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\npragma solidity ^0.4.21;\n\ncontract Zamok {\n\n    // MEMBERS\n    uint256 public zamokCount;\n\n    // CONSTRUCTOR\n    function Zamok() public {\n        zamokCount = 0;\n    }\n\n    // FUNCTIONS\n    function generateZamokId() internal returns (bytes32 zamokId) {\n        return keccak256(block.blockhash(block.number - 1), address(this), ++zamokCount);\n    }\n}\n\n\ncontract CustodianCanBeReplaced is Zamok {\n\n    // TYPES\n    struct CustodianChangeRequest {\n        address proposedNew;\n    }\n\n    // MEMBERS\n    address public custodian;\n\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeRequests;\n\n    // CONSTRUCTOR\n    function CustodianCanBeReplaced(\n        address _custodian\n    )\n    \n\tZamok() public\n    {\n        custodian = _custodian;\n    }\n\n    // MODIFIERS\n    modifier onlyCustodian {\n        require(msg.sender == custodian);\n        _;\n    }\n\n    // PUBLIC FUNCTIONS\n    // (UPGRADE)\n\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 zamokId) {\n        require(_proposedCustodian != address(0));\n\n        zamokId = generateZamokId();\n\n        custodianChangeRequests[zamokId] = CustodianChangeRequest({\n            proposedNew: _proposedCustodian\n        });\n\n        emit CustodianChangeRequested(zamokId, msg.sender, _proposedCustodian);\n    }\n\n    function confirmCustodianChange(bytes32 _zamokId) public onlyCustodian {\n        custodian = getCustodianChangeRequest(_zamokId);\n\n        delete custodianChangeRequests[_zamokId];\n\n        emit CustodianChangeConfirmed(_zamokId, custodian);\n    }\n\n    // PRIVATE FUNCTIONS\n    function getCustodianChangeRequest(bytes32 _zamokId) private view returns (address _proposedNew) {\n        CustodianChangeRequest storage changeRequest = custodianChangeRequests[_zamokId];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_zamokId` is received\n        require(changeRequest.proposedNew != 0);\n\n        return changeRequest.proposedNew;\n    }\n\n    event CustodianChangeRequested(\n        bytes32 _zamokId,\n        address _msgSender,\n        address _proposedCustodian\n    );\n\n    event CustodianChangeConfirmed(bytes32 _zamokId, address _newCustodian);\n}\n\n\ncontract DeloCanBeReplaced is CustodianCanBeReplaced  {\n\n    // TYPES\n    struct DeloChangeRequest {\n        address proposedNew;\n    }\n\n    // MEMBERS\n    // @dev  The reference to the active token implementation.\n    Delo public delo;\n\n    mapping (bytes32 => DeloChangeRequest) public deloChangeRequests;\n\n    // CONSTRUCTOR\n    function DeloCanBeReplaced(address _custodian) CustodianCanBeReplaced(_custodian) public {\n        delo = Delo(0x0);\n    }\n\n    // MODIFIERS\n    modifier onlyDelo {\n        require(msg.sender == address(delo));\n        _;\n    }\n\n    // PUBLIC FUNCTIONS\n    // (UPGRADE)\n    function requestDeloChange(address _proposedDelo) public returns (bytes32 zamokId) {\n        require(_proposedDelo != address(0));\n\n        zamokId = generateZamokId();\n\n        deloChangeRequests[zamokId] = DeloChangeRequest({\n            proposedNew: _proposedDelo\n        });\n\n        emit DeloChangeRequested(zamokId, msg.sender, _proposedDelo);\n    }\n\n    function confirmDeloChange(bytes32 _zamokId) public onlyCustodian {\n        delo = getDeloChangeRequest(_zamokId);\n\n        delete deloChangeRequests[_zamokId];\n\n        emit DeloChangeConfirmed(_zamokId, address(delo));\n    }\n\n    // PRIVATE FUNCTIONS\n    function getDeloChangeRequest(bytes32 _zamokId) private view returns (Delo _proposedNew) {\n        DeloChangeRequest storage changeRequest = deloChangeRequests[_zamokId];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_zamokId` is received\n        require(changeRequest.proposedNew != address(0));\n\n        return Delo(changeRequest.proposedNew);\n    }\n\n    event DeloChangeRequested(\n        bytes32 _zamokId,\n        address _msgSender,\n        address _proposedDelo\n    );\n\n    event DeloChangeConfirmed(bytes32 _zamokId, address _newImpl);\n}\n\n\ncontract ERC20Interface {\n  // METHODS\n\n  // NOTE:\n  //   public getter functions are not currently recognised as an\n  //   implementation of the matching abstract function by the compiler.\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#name\n  // function name() public view returns (string);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol\n  // function symbol() public view returns (string);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\n  // function decimals() public view returns (uint8);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\n  function totalSupply() public view returns (uint256);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#balanceof\n  function balanceOf(address _owner) public view returns (uint256 balance);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transferfrom\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#allowance\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n  // EVENTS\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approval\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract Front is ERC20Interface, DeloCanBeReplaced {\n\n    // MEMBERS\n    string public name;\n\n    string public symbol;\n\n    uint8 public decimals;\n\n    // CONSTRUCTOR\n    function Front(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        address _custodian\n    )\n        DeloCanBeReplaced(_custodian)\n        public\n    {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    // PUBLIC FUNCTIONS\n    // (ERC20Interface)\n    function totalSupply() public view returns (uint256) {\n        return delo.totalSupply();\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return delo.balanceOf(_owner);\n    }\n\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyDelo {\n        emit Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return delo.transferWithSender(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        return delo.transferFromWithSender(msg.sender, _from, _to, _value);\n    }\n\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyDelo {\n        emit Approval(_owner, _spender, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        return delo.approveWithSender(msg.sender, _spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\n        return delo.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\n        return delo.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return delo.allowance(_owner, _spender);\n    }\n}\n\n\ncontract Delo is CustodianCanBeReplaced {\n\n    // TYPES\n    struct PendingPrint {\n        address receiver;\n        uint256 value;\n    }\n\n    // MEMBERS\n    Front public front;\n\n    Grossbuch public grossbuch;\n\n    address public sweeper;\n\n    bytes32 public sweepMsg;\n\n    mapping (address => bool) public sweptSet;\n\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\n\n    // CONSTRUCTOR\n    function Delo(\n          address _front,\n          address _grossbuch,\n          address _custodian,\n          address _sweeper\n    )\n        CustodianCanBeReplaced(_custodian)\n        public\n    {\n        require(_sweeper != 0);\n        front = Front(_front);\n        grossbuch = Grossbuch(_grossbuch);\n\n        sweeper = _sweeper;\n        sweepMsg = keccak256(address(this), \"sweep\");\n    }\n\n    // MODIFIERS\n    modifier onlyFront {\n        require(msg.sender == address(front));\n        _;\n    }\n    modifier onlySweeper {\n        require(msg.sender == sweeper);\n        _;\n    }\n\n\n    function approveWithSender(\n        address _sender,\n        address _spender,\n        uint256 _value\n    )\n        public\n        onlyFront\n        returns (bool success)\n    {\n        require(_spender != address(0)); // disallow unspendable approvals\n        grossbuch.setAllowance(_sender, _spender, _value);\n        front.emitApproval(_sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApprovalWithSender(\n        address _sender,\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        onlyFront\n        returns (bool success)\n    {\n        require(_spender != address(0)); // disallow unspendable approvals\n        uint256 currentAllowance = grossbuch.allowed(_sender, _spender);\n        uint256 newAllowance = currentAllowance + _addedValue;\n\n        require(newAllowance >= currentAllowance);\n\n        grossbuch.setAllowance(_sender, _spender, newAllowance);\n        front.emitApproval(_sender, _spender, newAllowance);\n        return true;\n    }\n\n    function decreaseApprovalWithSender(\n        address _sender,\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        onlyFront\n        returns (bool success)\n    {\n        require(_spender != address(0)); // disallow unspendable approvals\n        uint256 currentAllowance = grossbuch.allowed(_sender, _spender);\n        uint256 newAllowance = currentAllowance - _subtractedValue;\n\n        require(newAllowance <= currentAllowance);\n\n        grossbuch.setAllowance(_sender, _spender, newAllowance);\n        front.emitApproval(_sender, _spender, newAllowance);\n        return true;\n    }\n\n\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 zamokId) {\n        require(_receiver != address(0));\n\n        zamokId = generateZamokId();\n\n        pendingPrintMap[zamokId] = PendingPrint({\n            receiver: _receiver,\n            value: _value\n        });\n\n        emit PrintingLocked(zamokId, _receiver, _value);\n    }\n\n\n    function confirmPrint(bytes32 _zamokId) public onlyCustodian {\n        PendingPrint storage print = pendingPrintMap[_zamokId];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_zamokId` is received\n        address receiver = print.receiver;\n        require (receiver != address(0));\n        uint256 value = print.value;\n\n        delete pendingPrintMap[_zamokId];\n\n        uint256 supply = grossbuch.totalSupply();\n        uint256 newSupply = supply + value;\n        if (newSupply >= supply) {\n          grossbuch.setTotalSupply(newSupply);\n          grossbuch.addBalance(receiver, value);\n\n          emit PrintingConfirmed(_zamokId, receiver, value);\n          front.emitTransfer(address(0), receiver, value);\n        }\n    }\n\n\n    function burn(uint256 _value) public returns (bool success) {\n        uint256 balanceOfSender = grossbuch.balances(msg.sender);\n        require(_value <= balanceOfSender);\n\n        grossbuch.setBalance(msg.sender, balanceOfSender - _value);\n        grossbuch.setTotalSupply(grossbuch.totalSupply() - _value);\n\n        front.emitTransfer(msg.sender, address(0), _value);\n\n        return true;\n    }\n\n\n    function batchTransfer(address[] _tos, uint256[] _values) public returns (bool success) {\n        require(_tos.length == _values.length);\n\n        uint256 numTransfers = _tos.length;\n        uint256 senderBalance = grossbuch.balances(msg.sender);\n\n        for (uint256 i = 0; i < numTransfers; i++) {\n          address to = _tos[i];\n          require(to != address(0));\n          uint256 v = _values[i];\n          require(senderBalance >= v);\n\n          if (msg.sender != to) {\n            senderBalance -= v;\n            grossbuch.addBalance(to, v);\n          }\n          front.emitTransfer(msg.sender, to, v);\n        }\n\n        grossbuch.setBalance(msg.sender, senderBalance);\n\n        return true;\n    }\n\n    function enableSweep(uint8[] _vs, bytes32[] _rs, bytes32[] _ss, address _to) public onlySweeper {\n        require(_to != address(0));\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length));\n\n        uint256 numSignatures = _vs.length;\n        uint256 sweptBalance = 0;\n\n        for (uint256 i=0; i<numSignatures; ++i) {\n          address from = ecrecover(sweepMsg, _vs[i], _rs[i], _ss[i]);\n\n          // ecrecover returns 0 on malformed input\n          if (from != address(0)) {\n            sweptSet[from] = true;\n\n            uint256 fromBalance = grossbuch.balances(from);\n\n            if (fromBalance > 0) {\n              sweptBalance += fromBalance;\n\n              grossbuch.setBalance(from, 0);\n\n              front.emitTransfer(from, _to, fromBalance);\n            }\n          }\n        }\n\n        if (sweptBalance > 0) {\n          grossbuch.addBalance(_to, sweptBalance);\n        }\n    }\n\n    function replaySweep(address[] _froms, address _to) public onlySweeper {\n        require(_to != address(0));\n        uint256 lenFroms = _froms.length;\n        uint256 sweptBalance = 0;\n\n        for (uint256 i=0; i<lenFroms; ++i) {\n            address from = _froms[i];\n\n            if (sweptSet[from]) {\n                uint256 fromBalance = grossbuch.balances(from);\n\n                if (fromBalance > 0) {\n                    sweptBalance += fromBalance;\n\n                    grossbuch.setBalance(from, 0);\n\n                    front.emitTransfer(from, _to, fromBalance);\n                }\n            }\n        }\n\n        if (sweptBalance > 0) {\n            grossbuch.addBalance(_to, sweptBalance);\n        }\n    }\n\n    function transferFromWithSender(\n        address _sender,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyFront\n        returns (bool success)\n    {\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\n\n        uint256 balanceOfFrom = grossbuch.balances(_from);\n        require(_value <= balanceOfFrom);\n\n        uint256 senderAllowance = grossbuch.allowed(_from, _sender);\n        require(_value <= senderAllowance);\n\n        grossbuch.setBalance(_from, balanceOfFrom - _value);\n        grossbuch.addBalance(_to, _value);\n\n        grossbuch.setAllowance(_from, _sender, senderAllowance - _value);\n\n        front.emitTransfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transferWithSender(\n        address _sender,\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyFront\n        returns (bool success)\n    {\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\n\n        uint256 balanceOfSender = grossbuch.balances(_sender);\n        require(_value <= balanceOfSender);\n\n        grossbuch.setBalance(_sender, balanceOfSender - _value);\n        grossbuch.addBalance(_to, _value);\n\n        front.emitTransfer(_sender, _to, _value);\n\n        return true;\n    }\n\n    // METHODS (ERC20 sub interface impl.)\n    function totalSupply() public view returns (uint256) {\n        return grossbuch.totalSupply();\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return grossbuch.balances(_owner);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return grossbuch.allowed(_owner, _spender);\n    }\n\n    // EVENTS\n    event PrintingLocked(bytes32 _zamokId, address _receiver, uint256 _value);\n\n    event PrintingConfirmed(bytes32 _zamokId, address _receiver, uint256 _value);\n}\n\n\n\ncontract Grossbuch is DeloCanBeReplaced {\n\n    // MEMBERS\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balances;\n\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    // CONSTRUCTOR\n    function Grossbuch(address _custodian) DeloCanBeReplaced(_custodian) public {\n        totalSupply = 0;\n    }\n\n\n    // PUBLIC FUNCTIONS\n\n    function setTotalSupply(\n        uint256 _newTotalSupply\n    )\n        public\n        onlyDelo\n    {\n        totalSupply = _newTotalSupply;\n    }\n\n\n    function setAllowance(\n        address _owner,\n        address _spender,\n        uint256 _value\n    )\n        public\n        onlyDelo\n    {\n        allowed[_owner][_spender] = _value;\n    }\n\n\n    function setBalance(\n        address _owner,\n        uint256 _newBalance\n    )\n        public\n        onlyDelo\n    {\n        balances[_owner] = _newBalance;\n    }\n\n\n    function addBalance(\n        address _owner,\n        uint256 _balanceIncrease\n    )\n        public\n        onlyDelo\n    {\n        balances[_owner] = balances[_owner] + _balanceIncrease;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"zamokId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_balanceIncrease\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeRequests\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zamokId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zamokCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deloChangeRequests\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedDelo\",\"type\":\"address\"}],\"name\":\"requestDeloChange\",\"outputs\":[{\"name\":\"zamokId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zamokId\",\"type\":\"bytes32\"}],\"name\":\"confirmDeloChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedDelo\",\"type\":\"address\"}],\"name\":\"DeloChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"DeloChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b6040516020806112128339810160405280805190602001909190505080806000808190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600060058190555050611141806100d16000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806315b21082146100eb57806318160ddd1461014057806321e5383a1461016957806327e235e3146101ab5780632bfa6ac7146101f8578063375b74c31461025f5780633a8343ee146102b457806346f08fc0146102db578063486cefbb146103305780635c658165146103595780636d905442146103c5578063bd4fce011461042c578063da46098c14610481578063e30443bc146104e2578063f7ea7a3d14610524578063fe895afa14610547575b600080fd5b34156100f657600080fd5b610122600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061056e565b60405180826000191660001916815260200191505060405180910390f35b341561014b57600080fd5b6101536106ec565b6040518082815260200191505060405180910390f35b341561017457600080fd5b6101a9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106f2565b005b34156101b657600080fd5b6101e2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107d7565b6040518082815260200191505060405180910390f35b341561020357600080fd5b61021d6004808035600019169060200190919050506107ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561026a57600080fd5b61027261082d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102bf57600080fd5b6102d9600480803560001916906020019091905050610853565b005b34156102e657600080fd5b6102ee6109d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033b57600080fd5b6103436109fb565b6040518082815260200191505060405180910390f35b341561036457600080fd5b6103af600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a01565b6040518082815260200191505060405180910390f35b34156103d057600080fd5b6103ea600480803560001916906020019091905050610a26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043757600080fd5b610463600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a64565b60405180826000191660001916815260200191505060405180910390f35b341561048c57600080fd5b6104e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610be2565b005b34156104ed57600080fd5b610522600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cc4565b005b341561052f57600080fd5b6105456004808035906020019091905050610d68565b005b341561055257600080fd5b61056c600480803560001916906020019091905050610dce565b005b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156105ab57600080fd5b6105b3610f50565b90506020604051908101604052808373ffffffffffffffffffffffffffffffffffffffff1681525060026000836000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fd76fc900a7e1a6fcf11d54b7ba943918df6c53a3128140658c389b3da1e997ba8133846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561074e57600080fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60066020528060005260406000206000915090505481565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108af57600080fd5b6108b881610fd1565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260008260001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9a99272c0f6b7a30ef9e76e684a7cd408bfd4f11a72f36a8e276253c920e442d81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6007602052816000526040600020602052806000526040600020600091509150505481565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610aa157600080fd5b610aa9610f50565b90506020604051908101604052808373ffffffffffffffffffffffffffffffffffffffff1681525060046000836000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f3d48cb584ae7bf77fe28d17cb08b45983898ed8d401a6c2800d53992fba405e68133846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c3e57600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2057600080fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc457600080fd5b8060058190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e2a57600080fd5b610e3381611068565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008260001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9a2c44e2cc2a4b4c68307b04cfa347bfd9546f9289ce49c0eb123168e603084481600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600060014303403060008081546001019190508190556040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020905090565b600080600260008460001916600019168152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561103b57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000806004600084600019166000191681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156110e857600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509190505600a165627a7a723058209efe1ec97f073c814d5ac59546f14cef2874c6981c2ba7a9824759ee0920f8280029000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936",
  "constructorArguments": "000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936"
}