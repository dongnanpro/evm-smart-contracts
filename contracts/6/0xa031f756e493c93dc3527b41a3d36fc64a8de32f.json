{
  "address": "0xa031f756e493c93dc3527b41a3d36fc64a8de32f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigProxyOwner",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "99999999",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-04\n*/\n\npragma solidity >=0.5.4<0.6.0;\n\ncontract ERC20Detailed {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n}\n\n\ninterface IERC20 {\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value) external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) private _balances;\n\n  mapping(address => mapping(address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    _approve(msg.sender, spender, value);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    _transfer(from, to, value);\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n    return true;\n  }\n\n  function _transfer(address from, address to, uint256 value) internal {\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  function _burn(address account, uint256 value) internal {\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  function _approve(address owner, address spender, uint256 value) internal {\n    require(spender != address(0));\n    require(owner != address(0));\n\n    _allowed[owner][spender] = value;\n    emit Approval(owner, spender, value);\n  }\n}\n\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  function isOwner() public view returns (bool) {\n    return msg.sender == _owner;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\nlibrary MultiSigAction {\n  struct Action {\n    uint8 actionType;\n    address callbackAddress;\n    string callbackSig;\n    bytes callbackData;\n    uint8 quorum;\n    address requestedBy;\n    address rejectedBy;\n    mapping(address => bool) approvedBy;\n    uint8 numOfApprovals;\n    bool rejected;\n    bool failed;\n  }\n\n  function init(\n    Action storage _self,\n    uint8 _actionType,\n    address _callbackAddress,\n    string memory _callbackSig,\n    bytes memory _callbackData,\n    uint8 _quorum\n  ) internal {\n    _self.actionType = _actionType;\n    _self.callbackAddress = _callbackAddress;\n    _self.callbackSig = _callbackSig;\n    _self.callbackData = _callbackData;\n    _self.quorum = _quorum;\n    _self.requestedBy = msg.sender;\n  }\n\n  function approve(Action storage _self) internal {\n    require(!_self.rejected, \"CANNOT_APPROVE_REJECTED\");\n    require(!_self.failed, \"CANNOT_APPROVE_FAILED\");\n    require(!_self.approvedBy[msg.sender], \"CANNOT_APPROVE_AGAIN\");\n    require(!isCompleted(_self), \"CANNOT_APPROVE_COMPLETED\");\n\n    _self.approvedBy[msg.sender] = true;\n    _self.numOfApprovals++;\n  }\n\n  function reject(Action storage _self) internal {\n    require(!_self.approvedBy[msg.sender], \"CANNOT_REJECT_APPROVED\");\n    require(!_self.failed, \"CANNOT_REJECT_FAILED\");\n    require(!_self.rejected, \"CANNOT_REJECT_REJECTED\");\n    require(!isCompleted(_self), \"CANNOT_REJECT_COMPLETED\");\n\n    _self.rejectedBy = msg.sender;\n    _self.rejected = true;\n  }\n\n  function complete(Action storage _self) internal {\n    require(!_self.rejected, \"CANNOT_COMPLETE_REJECTED\");\n    require(!_self.failed, \"CANNOT_COMPLETE_FAILED\");\n    require(isCompleted(_self), \"CANNNOT_COMPLETE_AGAIN\");\n\n    // solium-disable-next-line security/no-low-level-calls\n    (bool _success, ) = _self.callbackAddress.call(\n      abi.encodePacked(bytes4(keccak256(bytes(_self.callbackSig))), _self.callbackData)\n    );\n\n    if (!_success) {\n      _self.failed = true;\n    }\n  }\n\n  function isCompleted(Action storage _self) internal view returns (bool) {\n    return _self.numOfApprovals >= _self.quorum && !_self.failed;\n  }\n}\n\n\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n}\n\ncontract ERC20Extended is Ownable, ERC20, ERC20Detailed {\n  constructor(string memory _name, string memory _symbol, uint8 _decimals)\n    public\n    ERC20Detailed(_name, _symbol, _decimals)\n  {}\n\n  function burn(uint256 _value) public onlyOwner returns (bool) {\n    _burn(msg.sender, _value);\n    return true;\n  }\n\n  function mint(address _to, uint256 _value) public onlyOwner returns (bool) {\n    _mint(_to, _value);\n\n    return true;\n  }\n}\n\ncontract MultiSigAdministration {\n  event TenantRegistered(\n    address indexed tenant,\n    address[] creators,\n    address[] admins,\n    uint8 quorum\n  );\n  event ActionInitiated(address indexed tenant, uint256 indexed id, address initiatedBy);\n  event ActionApproved(address indexed tenant, uint256 indexed id, address approvedBy);\n  event ActionRejected(address indexed tenant, uint256 indexed id, address rejectedBy);\n  event ActionCompleted(address indexed tenant, uint256 indexed id);\n  event ActionFailed(address indexed tenant, uint256 indexed id);\n\n  using MultiSigAction for MultiSigAction.Action;\n\n  enum AdminAction {ADD_ADMIN, REMOVE_ADMIN, CHANGE_QUORUM, ADD_CREATOR, REMOVE_CREATOR}\n  uint8 private constant OTHER_ACTION = uint8(AdminAction.REMOVE_CREATOR) + 1;\n\n  mapping(address => uint256) public numOfActions;\n  mapping(address => mapping(address => bool)) public isAdmin;\n  mapping(address => uint8) public numOfAdmins;\n  mapping(address => mapping(address => bool)) public isCreator;\n  mapping(address => uint8) public quorums;\n  mapping(address => bool) public isRegistered;\n  mapping(address => uint256) public minValidActionId;\n\n  mapping(address => mapping(uint256 => MultiSigAction.Action)) private actions;\n\n  modifier onlyAdminOf(address _tenant) {\n    require(isAdmin[_tenant][msg.sender], \"ONLY_ADMIN_OF_TENANT\");\n\n    _;\n  }\n\n  modifier onlyAdminOrCreatorOf(address _tenant) {\n    require(\n      isAdmin[_tenant][msg.sender] || isCreator[_tenant][msg.sender],\n      \"ONLY_ADMIN_OR_CREATOR_OF_TENANT\"\n    );\n\n    _;\n  }\n\n  modifier onlyRegistered(address _tenant) {\n    require(isRegistered[_tenant], \"ONLY_REGISTERED_TENANT\");\n\n    _;\n  }\n\n  modifier onlyMe() {\n    require(msg.sender == address(this), \"ONLY_INTERNAL\");\n\n    _;\n  }\n\n  modifier onlyExistingAction(address _tenant, uint256 _id) {\n    require(_id <= numOfActions[_tenant], \"ONLY_EXISTING_ACTION\");\n    require(_id > 0, \"ONLY_EXISTING_ACTION\");\n\n    _;\n  }\n\n  constructor() public {}\n\n  /* Public Functions - Start */\n  function register(\n    address _tenant,\n    address[] memory _creators,\n    address[] memory _admins,\n    uint8 _quorum\n  ) public returns (bool success) {\n    require(\n      msg.sender == _tenant || msg.sender == Ownable(_tenant).owner(),\n      \"ONLY_TENANT_OR_TENANT_OWNER\"\n    );\n\n    return _register(_tenant, _creators, _admins, _quorum);\n  }\n\n  function initiateAdminAction(\n    address _tenant,\n    AdminAction _adminAction,\n    bytes memory _callbackData\n  ) public onlyRegistered(_tenant) onlyAdminOf(_tenant) returns (uint256 id) {\n    string memory _callbackSig = _getAdminActionCallbackSig(_adminAction);\n\n    uint256 _id = _initiateAction(\n      uint8(_adminAction),\n      _tenant,\n      address(this),\n      _callbackSig,\n      abi.encodePacked(abi.encode(_tenant), _callbackData)\n    );\n    _approveAction(_tenant, _id);\n\n    return _id;\n  }\n\n  function initiateAction(address _tenant, string memory _callbackSig, bytes memory _callbackData)\n    public\n    onlyRegistered(_tenant)\n    onlyAdminOrCreatorOf(_tenant)\n    returns (uint256 id)\n  {\n    uint256 _id = _initiateAction(OTHER_ACTION, _tenant, _tenant, _callbackSig, _callbackData);\n\n    if (isAdmin[_tenant][msg.sender]) {\n      _approveAction(_tenant, _id);\n    }\n\n    return _id;\n  }\n\n  function approveAction(address _tenant, uint256 _id)\n    public\n    onlyRegistered(_tenant)\n    onlyAdminOf(_tenant)\n    onlyExistingAction(_tenant, _id)\n    returns (bool success)\n  {\n    return _approveAction(_tenant, _id);\n  }\n\n  function rejectAction(address _tenant, uint256 _id)\n    public\n    onlyRegistered(_tenant)\n    onlyAdminOrCreatorOf(_tenant)\n    onlyExistingAction(_tenant, _id)\n    returns (bool success)\n  {\n    return _rejectAction(_tenant, _id);\n  }\n\n  function addAdmin(address _tenant, address _admin, bool _increaseQuorum) public onlyMe {\n    minValidActionId[_tenant] = numOfActions[_tenant] + 1;\n    _addAdmin(_tenant, _admin);\n\n    if (_increaseQuorum) {\n      uint8 _quorum = quorums[_tenant];\n      uint8 _newQuorum = _quorum + 1;\n      require(_newQuorum > _quorum, \"OVERFLOW\");\n\n      _changeQuorum(_tenant, _newQuorum);\n    }\n  }\n\n  function removeAdmin(address _tenant, address _admin, bool _decreaseQuorum) public onlyMe {\n    uint8 _quorum = quorums[_tenant];\n\n    if (_decreaseQuorum && _quorum > 1) {\n      _changeQuorum(_tenant, _quorum - 1);\n    }\n\n    minValidActionId[_tenant] = numOfActions[_tenant] + 1;\n    _removeAdmin(_tenant, _admin);\n  }\n\n  function changeQuorum(address _tenant, uint8 _quorum) public onlyMe {\n    minValidActionId[_tenant] = numOfActions[_tenant] + 1;\n    _changeQuorum(_tenant, _quorum);\n  }\n\n  function addCreator(address _tenant, address _creator) public onlyMe {\n    _addCreator(_tenant, _creator);\n  }\n\n  function removeCreator(address _tenant, address _creator) public onlyMe {\n    _removeCreator(_tenant, _creator);\n  }\n\n  function getAction(address _tenant, uint256 _id)\n    public\n    view\n    returns (\n    bool isAdminAction,\n    string memory callbackSig,\n    bytes memory callbackData,\n    uint8 quorum,\n    address requestedBy,\n    address rejectedBy,\n    uint8 numOfApprovals,\n    bool rejected,\n    bool failed,\n    bool completed,\n    bool valid\n  )\n  {\n    MultiSigAction.Action storage _action = _getAction(_tenant, _id);\n\n    isAdminAction = _action.callbackAddress == address(this);\n    callbackSig = _action.callbackSig;\n    callbackData = _action.callbackData;\n    quorum = _action.quorum;\n    requestedBy = _action.requestedBy;\n    rejectedBy = _action.rejectedBy;\n    numOfApprovals = _action.numOfApprovals;\n    rejected = _action.rejected;\n    failed = _action.failed;\n    completed = _action.isCompleted();\n    valid = _isActionValid(_tenant, _id);\n  }\n\n  function hasApprovedBy(address _tenant, uint256 _id, address _admin)\n    public\n    view\n    returns (bool approvedBy)\n  {\n    approvedBy = _getAction(_tenant, _id).approvedBy[_admin];\n  }\n  /* Public Functions - End */\n\n  /* Private Functions - Start */\n  function _getAction(address _tenant, uint256 _id)\n    private\n    view\n    returns (MultiSigAction.Action storage)\n  {\n    return actions[_tenant][_id];\n  }\n\n  function _isActionValid(address _tenant, uint256 _id) private view returns (bool) {\n    return _id >= minValidActionId[_tenant];\n  }\n\n  function _getAdminActionCallbackSig(AdminAction _adminAction)\n    private\n    pure\n    returns (string memory)\n  {\n    if (_adminAction == AdminAction.ADD_ADMIN) {\n      return \"addAdmin(address,address,bool)\";\n    }\n\n    if (_adminAction == AdminAction.REMOVE_ADMIN) {\n      return \"removeAdmin(address,address,bool)\";\n    }\n\n    if (_adminAction == AdminAction.CHANGE_QUORUM) {\n      return \"changeQuorum(address,uint8)\";\n    }\n\n    if (_adminAction == AdminAction.ADD_CREATOR) {\n      return \"addCreator(address,address)\";\n    }\n\n    return \"removeCreator(address,address)\";\n  }\n\n  function _addCreator(address _tenant, address _creator) private {\n    require(_creator != address(this), \"INVALID_CREATOR\");\n    require(!isAdmin[_tenant][_creator], \"ALREADY_ADMIN\");\n    require(!isCreator[_tenant][_creator], \"ALREADY_CREATOR\");\n\n    isCreator[_tenant][_creator] = true;\n  }\n\n  function _removeCreator(address _tenant, address _creator) private {\n    require(isCreator[_tenant][_creator], \"NOT_CREATOR\");\n\n    isCreator[_tenant][_creator] = false;\n  }\n\n  function _addAdmin(address _tenant, address _admin) private {\n    require(_admin != address(this), \"INVALID_ADMIN\");\n    require(!isAdmin[_tenant][_admin], \"ALREADY_ADMIN\");\n    require(!isCreator[_tenant][_admin], \"ALREADY_CREATOR\");\n    require(numOfAdmins[_tenant] + 1 > numOfAdmins[_tenant], \"OVERFLOW\");\n\n    numOfAdmins[_tenant]++;\n    isAdmin[_tenant][_admin] = true;\n  }\n\n  function _removeAdmin(address _tenant, address _admin) private {\n    require(isAdmin[_tenant][_admin], \"NOT_ADMIN\");\n    require(--numOfAdmins[_tenant] >= quorums[_tenant], \"TOO_FEW_ADMINS\");\n\n    isAdmin[_tenant][_admin] = false;\n  }\n\n  function _changeQuorum(address _tenant, uint8 _quorum) private {\n    require(_quorum <= numOfAdmins[_tenant], \"QUORUM_TOO_BIG\");\n    require(_quorum > 0, \"QUORUM_ZERO\");\n\n    quorums[_tenant] = _quorum;\n  }\n\n  function _register(\n    address _tenant,\n    address[] memory _creators,\n    address[] memory _admins,\n    uint8 _quorum\n  ) private returns (bool) {\n    require(_tenant != address(this), \"INVALID_TENANT\");\n    require(!isRegistered[_tenant], \"ALREADY_REGISTERED\");\n\n    for (uint8 i = 0; i < _admins.length; i++) {\n      _addAdmin(_tenant, _admins[i]);\n    }\n    _changeQuorum(_tenant, _quorum);\n\n    for (uint8 i = 0; i < _creators.length; i++) {\n      _addCreator(_tenant, _creators[i]);\n    }\n\n    isRegistered[_tenant] = true;\n    emit TenantRegistered(_tenant, _creators, _admins, _quorum);\n\n    return true;\n  }\n\n  function _initiateAction(\n    uint8 _actionType,\n    address _tenant,\n    address _callbackAddress,\n    string memory _callbackSig,\n    bytes memory _callbackData\n  ) private returns (uint256) {\n    uint256 _id = ++numOfActions[_tenant];\n    uint8 _quorum = quorums[_tenant];\n\n    if (_actionType == uint8(AdminAction.REMOVE_ADMIN)) {\n      require(numOfAdmins[_tenant] > 1, \"TOO_FEW_ADMINS\");\n\n      if (_quorum == numOfAdmins[_tenant] && _quorum > 2) {\n        _quorum = numOfAdmins[_tenant] - 1;\n      }\n    }\n\n    _getAction(_tenant, _id).init(\n      _actionType,\n      _callbackAddress,\n      _callbackSig,\n      _callbackData,\n      _quorum\n    );\n\n    emit ActionInitiated(_tenant, _id, msg.sender);\n\n    return _id;\n  }\n\n  function _approveAction(address _tenant, uint256 _id) private returns (bool) {\n    require(_isActionValid(_tenant, _id), \"ACTION_INVALIDATED\");\n\n    MultiSigAction.Action storage _action = _getAction(_tenant, _id);\n    _action.approve();\n    emit ActionApproved(_tenant, _id, msg.sender);\n\n    if (_action.isCompleted()) {\n      _action.complete();\n\n      if (_action.failed) {\n        emit ActionFailed(_tenant, _id);\n      } else {\n        emit ActionCompleted(_tenant, _id);\n      }\n    }\n\n    return true;\n  }\n\n  function _rejectAction(address _tenant, uint256 _id) private returns (bool) {\n    MultiSigAction.Action storage _action = _getAction(_tenant, _id);\n\n    if (isCreator[_tenant][msg.sender]) {\n      require(msg.sender == _action.requestedBy, \"CREATOR_REJECT_NOT_REQUESTOR\");\n    }\n\n    if (_action.actionType == uint8(AdminAction.REMOVE_ADMIN)) {\n      (, address _admin, ) = abi.decode(_action.callbackData, (address, address, bool));\n\n      require(_admin != msg.sender, \"CANNOT_REJECT_ITS_OWN_REMOVAL\");\n    }\n\n    _action.reject();\n\n    emit ActionRejected(_tenant, _id, msg.sender);\n\n    return true;\n  }\n  /* Private Functions - End */\n}\n\ncontract MultiSigProxyOwner {\n  event BurnRequested(address indexed owner, uint256 value);\n  event BurnCanceled(address indexed owner);\n  event BurnMinSet(uint256 burnMin);\n\n  struct BurnRequest {\n    uint256 actionId;\n    uint256 value;\n  }\n\n  uint256 public burnMin;\n  mapping(address => BurnRequest) public burnRequests;\n\n  ERC20Extended private token;\n  MultiSigAdministration private multiSigAdmin;\n  address[] private creators;\n\n  modifier onlyMultiSigAdministration {\n    require(msg.sender == address(multiSigAdmin));\n\n    _;\n  }\n\n  constructor(\n    address _token,\n    address _multiSigAdmin,\n    address[] memory _admins,\n    uint8 _quorum,\n    uint256 _burnMin\n  ) public {\n    token = ERC20Extended(_token);\n    multiSigAdmin = MultiSigAdministration(_multiSigAdmin);\n    burnMin = _burnMin;\n\n    creators.push(address(this));\n    multiSigAdmin.register(address(this), creators, _admins, _quorum);\n\n  }\n\n  function requestBurn(uint256 _value) public returns (bool) {\n    require(!_burnRequestExist(msg.sender), \"BURN_REQUEST_EXISTS\");\n    require(_value >= burnMin, \"SMALLER_THAN_MIN_BURN_AMOUNT\");\n\n    token.transferFrom(msg.sender, address(this), _value);\n    burnRequests[msg.sender].value = _value;\n    burnRequests[msg.sender].actionId = multiSigAdmin.initiateAction(\n      address(this),\n      \"burn(address,uint256)\",\n      abi.encode(msg.sender, _value)\n    );\n\n    emit BurnRequested(msg.sender, _value);\n\n    return true;\n  }\n\n  function cancelBurn() public returns (bool) {\n    uint256 _actionId = burnRequests[msg.sender].actionId;\n    uint256 _value = burnRequests[msg.sender].value;\n    _deleteBurnRequest(msg.sender);\n\n    // solium-disable-next-line security/no-low-level-calls\n    (bool _success, ) = address(multiSigAdmin).call(\n      abi.encodeWithSignature(\"rejectAction(address,uint256)\", address(this), _actionId)\n    );\n    _success;\n    token.transfer(msg.sender, _value);\n\n    emit BurnCanceled(msg.sender);\n\n    return true;\n  }\n\n  function burn(address _owner, uint256 _value) public onlyMultiSigAdministration returns (bool) {\n    require(burnRequests[_owner].value == _value, \"BURN_VALUE_MISMATCH\");\n\n    _deleteBurnRequest(_owner);\n    token.burn(_value);\n\n    return true;\n  }\n\n  function mint(address _to, uint256 _value) public onlyMultiSigAdministration returns (bool) {\n    return token.mint(_to, _value);\n  }\n\n  function transferOwnership(address _newOwner) public onlyMultiSigAdministration returns (bool) {\n    token.transferOwnership(_newOwner);\n\n    return true;\n  }\n\n  function setBurnMin(uint256 _burnMin) public onlyMultiSigAdministration returns (bool) {\n    return _setBurnMin(_burnMin);\n  }\n\n  function _setBurnMin(uint256 _burnMin) internal returns (bool) {\n    burnMin = _burnMin;\n    emit BurnMinSet(_burnMin);\n\n    return true;\n  }\n\n  function _burnRequestExist(address _owner) internal view returns (bool) {\n    return burnRequests[_owner].actionId != 0;\n  }\n\n  function _deleteBurnRequest(address _owner) internal returns (bool) {\n    require(_burnRequestExist(_owner), \"NO_BURN_REQUEST_EXISTS\");\n\n    burnRequests[_owner].actionId = 0;\n    burnRequests[_owner].value = 0;\n\n    return true;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnRequests\",\"outputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnMin\",\"type\":\"uint256\"}],\"name\":\"setBurnMin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_multiSigAdmin\",\"type\":\"address\"},{\"name\":\"_admins\",\"type\":\"address[]\"},{\"name\":\"_quorum\",\"type\":\"uint8\"},{\"name\":\"_burnMin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BurnCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burnMin\",\"type\":\"uint256\"}],\"name\":\"BurnMinSet\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051610e87380380610e87833981018060405260a081101561003357600080fd5b815160208301516040840180519294919382019264010000000081111561005957600080fd5b8201602081018481111561006c57600080fd5b815185602082028301116401000000008211171561008957600080fd5b5050602082015160409283015160028054600160a060020a0319908116600160a060020a038b8116919091179092556003805482168a8416178155600084815560048054600181018255918190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101805430941684179055905496517f3267022900000000000000000000000000000000000000000000000000000000815280820183815260ff87166064830152608060248301908152835460848401819052989b50969950949790931695633267022995929491938a938a93929091604481019160a490910190879080156101ab57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161018d575b50508381038252855181528551602091820191808801910280838360005b838110156101e15781810151838201526020016101c9565b505050509050019650505050505050602060405180830381600087803b15801561020a57600080fd5b505af115801561021e573d6000803e3d6000fd5b505050506040513d602081101561023457600080fd5b50505050505050610c3d8061024a6000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c01000000000000000000000000000000000000000000000000000000009004806369a441ce1161007857806369a441ce1461017a5780639dc29fac14610182578063cee9b5b0146101bb578063f2fde38b146101d8576100a5565b806302d3fdc9146100aa5780632f8d75e3146100c45780633103c113146100f557806340c10f1914610141575b600080fd5b6100b261020b565b60408051918252519081900360200190f35b6100e1600480360360208110156100da57600080fd5b5035610211565b604080519115158252519081900360200190f35b6101286004803603602081101561010b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610570565b6040805192835260208301919091528051918290030190f35b6100e16004803603604081101561015757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610589565b6100e161065f565b6100e16004803603604081101561019857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561089a565b6100e1600480360360208110156101d157600080fd5b5035610a0b565b6100e1600480360360208110156101ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a41565b60005481565b600061021c33610afc565b1561028857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4255524e5f524551554553545f45584953545300000000000000000000000000604482015290519081900360640190fd5b6000548210156102f957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f534d414c4c45525f5448414e5f4d494e5f4255524e5f414d4f554e5400000000604482015290519081900360640190fd5b600254604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101859052905173ffffffffffffffffffffffffffffffffffffffff909216916323b872dd916064808201926020929091908290030181600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d60208110156103a357600080fd5b50503360008181526001602081815260408084209092018690556003548251808301959095528483018790528251808603840181526060808701948590527ff25e189d00000000000000000000000000000000000000000000000000000000909452306064870181815260848801958652601560c48901527f6275726e28616464726573732c75696e7432353629000000000000000000000060e489015260a060a4890190815283516101048a0152835173ffffffffffffffffffffffffffffffffffffffff9095169863f25e189d98939794969295919361012490910192870191908190849084905b838110156104a557818101518382015260200161048d565b50505050905090810190601f1680156104d25780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156104f357600080fd5b505af1158015610507573d6000803e3d6000fd5b505050506040513d602081101561051d57600080fd5b505133600081815260016020908152604091829020939093558051858152905191927f5d06931c8dc69a16ea07030839ba70d3794cbda4dc0e16718165f9054db87a5a92918290030190a2506001919050565b6001602081905260009182526040909120805491015482565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633146105b057600080fd5b600254604080517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260248201869052915191909216916340c10f199160448083019260209291908290030181600087803b15801561062c57600080fd5b505af1158015610640573d6000803e3d6000fd5b505050506040513d602081101561065657600080fd5b50519392505050565b33600081815260016020819052604082208054910154919290919061068390610b26565b5060035460408051306024820152604480820186905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f794f0c33000000000000000000000000000000000000000000000000000000001781529151815160009473ffffffffffffffffffffffffffffffffffffffff169382918083835b6020831061075357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610716565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b5050600254604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101869052905192935073ffffffffffffffffffffffffffffffffffffffff9091169163a9059cbb916044808201926020929091908290030181600087803b15801561083957600080fd5b505af115801561084d573d6000803e3d6000fd5b505050506040513d602081101561086357600080fd5b505060405133907f2b01466caaacff819525e6479dd5d263977d67d31f0b33e2ed4de75dfbb5b26890600090a26001935050505090565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633146108c157600080fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602081905260409091200154821461095857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4255524e5f56414c55455f4d49534d4154434800000000000000000000000000604482015290519081900360640190fd5b61096183610b26565b50600254604080517f42966c6800000000000000000000000000000000000000000000000000000000815260048101859052905173ffffffffffffffffffffffffffffffffffffffff909216916342966c68916024808201926020929091908290030181600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b505050506040513d6020811015610a0057600080fd5b506001949350505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610a3257600080fd5b610a3b82610bd1565b92915050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610a6857600080fd5b600254604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b50600195945050505050565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902054151590565b6000610b3182610afc565b1515610b9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f5f4255524e5f524551554553545f45584953545300000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600160208190526040822082815581019190915590565b60008181556040805183815290517f6de4b606641cf868e4f88184cb8822a2d0cc6efdada4cd40e3d7004b20e35dc99181900360200190a150600191905056fea165627a7a7230582087f17b99f3c3399b2dc0c25493056f29f65f02c30ee209d351075a81697c21eb0029000000000000000000000000ba1ca31bf066634d438fea44699548705870ecb200000000000000000000000075a1b755200e0f6803802339cb38648a2e6ffe0200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a30da8db3bae63410559ca1b1800f00b6ee0be10",
  "constructorArguments": "000000000000000000000000ba1ca31bf066634d438fea44699548705870ecb200000000000000000000000075a1b755200e0f6803802339cb38648a2e6ffe0200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a30da8db3bae63410559ca1b1800f00b6ee0be10"
}