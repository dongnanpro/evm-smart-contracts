{
  "address": "0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e",
  "chain": "ETH",
  "chainID": 1,
  "commonName": "",
  "contractName": "ParadiseToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\n/*************************\n * \n *  `＿　　　　　   (三|  \n *  |ﾋ_)　／￣￣＼ 　PDT  \n *  | | ／●) (●)  ＼｜｜  \n *  |_|(　(_人_)　　)^亅  \n *  | ヽ＼　￣　＿／ ミﾉ  \n *  ヽﾉﾉ￣|ﾚ―-ｲ / ﾉ  ／   \n *  　＼　ヽ＼ |/ イ      \n * 　／￣二二二二二二＼   \n * `｜raj｜ Paradise ｜｜  \n * 　＼＿二二二二二二／   \n *\n *************************/\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n /**\n * @title ERC20Basic\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/*\n * ParadiseToken is a standard ERC20 token with some additional functionalities:\n * - Transfers are only enabled after contract owner enables it (After StartTime)\n * - Contract sets 70% of the total supply as allowance for ICO contract\n */\n    \ncontract ParadiseToken is StandardToken, Ownable {\n    \n    // Constants\n    string public constant symbol = \"PDT\";\n    string public constant name = \"Paradise Token\";\n    uint8 public constant decimals = 18;\n    uint256 public constant InitialSupplyCup = 300000000 * (10 ** uint256(decimals)); // 300 mil tokens minted\n    uint256 public constant TokenAllowance = 210000000 * (10 ** uint256(decimals));   // 210 mil tokens public allowed \n    uint256 public constant AdminAllowance = InitialSupplyCup - TokenAllowance;       // 90 mil tokens admin allowed \n    \n    // Properties\n    address public adminAddr;            // the number of tokens available for the administrator\n    address public tokenAllowanceAddr = 0x9A4518ad59ac1D0Fc9A77d9083f233cD0b8d77Fa; // the number of tokens available for crowdsales\n    bool public transferEnabled = false;  // indicates if transferring tokens is enabled or not\n    \n    \n    modifier onlyWhenTransferAllowed() {\n        require(transferEnabled || msg.sender == adminAddr || msg.sender == tokenAllowanceAddr);\n        _;\n    }\n\n    /**\n     * Check if token offering address is set or not\n     */\n    modifier onlyTokenOfferingAddrNotSet() {\n        require(tokenAllowanceAddr == address(0x0));\n        _;\n    }\n\n    /**\n     * Check if address is a valid destination to transfer tokens to\n     * - must not be zero address\n     * - must not be the token address\n     * - must not be the owner's address\n     * - must not be the admin's address\n     * - must not be the token offering contract address\n     */\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        require(to != owner);\n        require(to != address(adminAddr));\n        require(to != address(tokenAllowanceAddr));\n        _;\n    }\n    \n    /**\n     * Token contract constructor\n     *\n     * @param admin Address of admin account\n     */\n    constructor(address admin) public {\n        totalSupply = InitialSupplyCup;\n        \n        // Mint tokens\n        balances[msg.sender] = totalSupply;\n        emit Transfer(address(0x0), msg.sender, totalSupply);\n\n        // Approve allowance for admin account\n        adminAddr = admin;\n        approve(adminAddr, AdminAllowance);\n    }\n\n    /**\n     * Set token offering to approve allowance for offering contract to distribute tokens\n     *\n     * Note that if _amountForSale is 0, then it is assumed that the full\n     * remaining crowdsale supply is made available to the crowdsale.\n     * \n     * @param offeringAddr Address of token offerng contract\n     * @param amountForSale Amount of tokens for sale, set 0 to max out\n     */\n    function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner {\n        require(!transferEnabled);\n\n        uint256 amount = (amountForSale == 0) ? TokenAllowance : amountForSale;\n        require(amount <= TokenAllowance);\n\n        approve(offeringAddr, amount);\n        tokenAllowanceAddr = offeringAddr;\n        \n    }\n    \n    /**\n     * Enable transfers\n     */\n    function enableTransfer() external onlyOwner {\n        transferEnabled = true;\n\n        // End the offering\n        approve(tokenAllowanceAddr, 0);\n    }\n\n    /**\n     * Transfer from sender to another account\n     *\n     * @param to Destination address\n     * @param value Amount of PDTtokens to send\n     */\n    function transfer(address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\n        return super.transfer(to, value);\n    }\n    \n    /**\n     * Transfer from `from` account to `to` account using allowance in `from` account to the sender\n     *\n     * @param from Origin address\n     * @param to Destination address\n     * @param value Amount of PDTtokens to send\n     */\n    function transferFrom(address from, address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n    \n}\n\n/**\n * The ParadiseToken token (PDT) has a fixed supply and restricts the ability\n * to transfer tokens until the owner has called the enableTransfer()\n * function.\n *\n * The owner can associate the token with a token sale contract. In that\n * case, the token balance is moved to the token sale contract, which\n * in turn can transfer its tokens to contributors to the sale.\n */\n\ncontract ParadiseTokenSale is Pausable {\n\n    using SafeMath for uint256;\n\n    // The beneficiary is the future recipient of the funds\n    address public beneficiary = 0x1Bb7390407F7987BD160993dE44d6f2737945436;\n\n    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\n    uint public fundingGoal = 22700 ether;  // Base on 75$ per ether\n    uint public fundingCap = 53400 ether;   // Base on 75$ per ether\n    uint public minContribution = 10**17;   // 0.1 Ether\n    bool public fundingGoalReached = false;\n    bool public fundingCapReached = false;\n    bool public saleClosed = false;\n\n    // Time period of sale (UNIX timestamps)\n    uint public startTime = 1547031675; // Wednesday, 09-Jan-19 @ 11:01:15 am (UTC)\n    uint public endTime = 1552129275;  //  Saturday, 09-Mar-19 @ 11:01:15 am (UTC)\n   \n    // Keeps track of the amount of wei raised\n    uint public amountRaised;\n    // amount that has been refunded so far\n    uint public refundAmount;\n\n    // The ratio of PDT to Ether\n    uint public rate;\n    uint public constant LOW_RANGE_RATE = 10000;    // 0% bonus\n    uint public constant HIGH_RANGE_RATE = 14000;   // 40% bonus for 1 week\n    \n    // The token being sold\n    ParadiseToken public tokenReward;\n\n    // A map that tracks the amount of wei contributed by address\n    mapping(address => uint256) public balanceOf;\n    \n    // Events\n    event GoalReached(address _beneficiary, uint _amountRaised);\n    event CapReached(address _beneficiary, uint _amountRaised);\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n\n    // Modifiers\n    modifier beforeDeadline()   { require (currentTime() < endTime); _; }\n    modifier afterDeadline()    { require (currentTime() >= endTime); _; }\n    modifier afterStartTime()    { require (currentTime() >= startTime); _; }\n\n    modifier saleNotClosed()    { require (!saleClosed); _; }\n\n    \n    /**\n     * Constructor for a crowdsale of ParadiseToken tokens.\n     *\n     * @param ifSuccessfulSendTo            the beneficiary of the fund\n     * @param fundingGoalInEthers           the minimum goal to be reached\n     * @param fundingCapInEthers            the cap (maximum) size of the fund\n     * @param minimumContributionInWei      minimum contribution (in wei)\n     * @param start                         the start time (UNIX timestamp)\n     * @param durationInMinutes             the duration of the crowdsale in minutes\n     * @param ratePDTToEther                the conversion rate from PDT to Ether\n     * @param addressOfTokenUsedAsReward    address of the token being sold\n     */\n    constructor(\n        address ifSuccessfulSendTo,\n        uint fundingGoalInEthers,\n        uint fundingCapInEthers,\n        uint minimumContributionInWei,\n        uint start,\n        uint durationInMinutes,\n        uint ratePDTToEther,\n        address addressOfTokenUsedAsReward\n    ) public {\n        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\n        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\n        require(fundingGoalInEthers <= fundingCapInEthers);\n        require(durationInMinutes > 0);\n        beneficiary = ifSuccessfulSendTo;\n        fundingGoal = fundingGoalInEthers * 1 ether;\n        fundingCap = fundingCapInEthers * 1 ether;\n        minContribution = minimumContributionInWei;\n        startTime = start;\n        endTime = start + durationInMinutes * 1 minutes; \n        setRate(ratePDTToEther);\n        tokenReward = ParadiseToken(addressOfTokenUsedAsReward);\n    }\n\n    /**\n     * This function is called whenever Ether is sent to the\n     * smart contract. It can only be executed when the crowdsale is\n     * not paused, not closed, and before the deadline has been reached.\n     *\n     * This function will update state variables for whether or not the\n     * funding goal or cap have been reached. It also ensures that the\n     * tokens are transferred to the sender, and that the correct\n     * number of tokens are sent according to the current rate.\n     */\n    function () payable external {\n        buy();\n    }\n\n    function buy ()\n        payable public\n        whenNotPaused\n        beforeDeadline\n        afterStartTime\n        saleNotClosed\n    {\n        require(msg.value >= minContribution);\n        uint amount = msg.value;\n        \n        // Compute the number of tokens to be rewarded to the sender\n        // Note: it's important for this calculation that both wei\n        // and PDT have the same number of decimal places (18)\n        uint numTokens = amount.mul(rate);\n        \n        // Transfer the tokens from the crowdsale supply to the sender\n        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\n    \n        // update the total amount raised\n        amountRaised = amountRaised.add(amount);\n     \n        // update the sender's balance of wei contributed\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n\n        emit FundTransfer(msg.sender, amount, true);\n        // Check if the funding goal or cap have been reached\n        checkFundingGoal();\n        checkFundingCap();\n        }\n        else {\n            revert();\n        }\n    }\n    \n    /**\n     * The owner can update the rate (PDT to ETH).\n     *\n     * @param _rate  the new rate for converting PDT to ETH\n     */\n    function setRate(uint _rate) public onlyOwner {\n        require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n        rate = _rate;\n    }\n    \n     /**\n     * The owner can terminate the crowdsale at any time.\n     */\n    function terminate() external onlyOwner {\n        saleClosed = true;\n    }\n    \n     /**\n     *\n     * The owner can allocate the specified amount of tokens from the\n     * crowdsale allowance to the recipient (to).\n     *\n     * NOTE: be extremely careful to get the amounts correct, which\n     * are in units of wei and PDT. Every digit counts.\n     *\n     * @param to            the recipient of the tokens\n     * @param amountWei     the amount contributed in wei\n     * @param amountPDT the amount of tokens transferred in PDT\n     */\n     \n     \n     function ownerAllocateTokens(address to, uint amountWei, uint amountPDT) public\n            onlyOwner \n    {\n        //don't allocate tokens for the admin\n        //require(tokenReward.adminAddr() != to);\n        \n        if (!tokenReward.transferFrom(tokenReward.owner(), to, amountPDT)) {\n            revert();\n        }\n        amountRaised = amountRaised.add(amountWei);\n        balanceOf[to] = balanceOf[to].add(amountWei);\n        emit FundTransfer(to, amountWei, true);\n        checkFundingGoal();\n        checkFundingCap();\n    }\n\n    /**\n     * The owner can call this function to withdraw the funds that\n     * have been sent to this contract. The funds will be sent to\n     * the beneficiary specified when the crowdsale was created.\n     */\n    function ownerSafeWithdrawal() external onlyOwner  {\n        uint balanceToSend = address(this).balance;\n        address(0x1Bb7390407F7987BD160993dE44d6f2737945436).transfer(balanceToSend);\n        emit FundTransfer(beneficiary, balanceToSend, false);\n    }\n    \n   /**\n     * Checks if the funding goal has been reached. If it has, then\n     * the GoalReached event is triggered.\n     */\n    function checkFundingGoal() internal {\n        if (!fundingGoalReached) {\n            if (amountRaised >= fundingGoal) {\n                fundingGoalReached = true;\n                emit GoalReached(beneficiary, amountRaised);\n            }\n        }\n    }\n\n    /**\n     * Checks if the funding cap has been reached. If it has, then\n     * the CapReached event is triggered.\n     */\n   function checkFundingCap() internal {\n        if (!fundingCapReached) {\n            if (amountRaised >= fundingCap) {\n                fundingCapReached = true;\n                saleClosed = true;\n                emit CapReached(beneficiary, amountRaised);\n            }\n        }\n    }\n\n    /**\n     * Returns the current time.\n     * Useful to abstract calls to \"now\" for tests.\n    */\n    function currentTime() view public returns (uint _currentTime) {\n        return now;\n    }\n}\n\ninterface IERC20 {\n  function balanceOf(address _owner) external view returns (uint256);\n  function allowance(address _owner, address _spender) external view returns (uint256);\n  function transfer(address _to, uint256 _value) external returns (bool);\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n  function approve(address _spender, uint256 _value) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title ParadiseToken initial distribution\n * @dev Distribute airdrop tokens\n */\n \ncontract PDTDistribution is Ownable {\n  \n  function drop(IERC20 token, address[] memory recipients, uint256[] memory values) public onlyOwner {\n    for (uint256 i = 0; i < recipients.length; i++) {\n      token.transfer(recipients[i], values[i]);\n    }\n  }\n}\n\n/*\n *（｀・P・）（｀・P・´）（・P・´）\n *     Created by Paradise\n *（´・P・）（´・P・｀）（・P・｀）\n */",
  "bytecode": "6080604052739a4518ad59ac1d0fc9a77d9083f233cd0b8d77fa600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff02191690831515021790555034801561008057600080fd5b5060405160208061216a833981018060405260208110156100a057600080fd5b810190808051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260ff16600a0a6311e1a30002600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061024c600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601260ff16600a0a630c84588002601260ff16600a0a6311e1a3000203610253640100000000026401000000009004565b5050610345565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b611e16806103546000396000f3fe608060405260043610610117576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde031461011c57806308a9b96e146101ac578063095ea7b3146101d757806318160ddd1461024a57806323b872dd14610275578063313ce5671461030857806337987710146103395780634cd412d51461039057806366188463146103bf57806370a0823114610432578063719cf08814610497578063726f63f6146104c2578063818305931461051d5780638da5cb5b1461057457806395d89b41146105cb578063a9059cbb1461065b578063b416bc93146106ce578063d73dd623146106f9578063dd62ed3e1461076c578063f1b50c1d146107f1578063f2fde38b14610808575b600080fd5b34801561012857600080fd5b50610131610859565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610171578082015181840152602081019050610156565b50505050905090810190601f16801561019e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b857600080fd5b506101c1610892565b6040518082815260200191505060405180910390f35b3480156101e357600080fd5b50610230600480360360408110156101fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108a3565b604051808215151515815260200191505060405180910390f35b34801561025657600080fd5b5061025f610995565b6040518082815260200191505060405180910390f35b34801561028157600080fd5b506102ee6004803603606081101561029857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061099b565b604051808215151515815260200191505060405180910390f35b34801561031457600080fd5b5061031d610c0c565b604051808260ff1660ff16815260200191505060405180910390f35b34801561034557600080fd5b5061034e610c11565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039c57600080fd5b506103a5610c37565b604051808215151515815260200191505060405180910390f35b3480156103cb57600080fd5b50610418600480360360408110156103e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c4a565b604051808215151515815260200191505060405180910390f35b34801561043e57600080fd5b506104816004803603602081101561045557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610edb565b6040518082815260200191505060405180910390f35b3480156104a357600080fd5b506104ac610f24565b6040518082815260200191505060405180910390f35b3480156104ce57600080fd5b5061051b600480360360408110156104e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f44565b005b34801561052957600080fd5b50610532611049565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058057600080fd5b5061058961106f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d757600080fd5b506105e0611095565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610620578082015181840152602081019050610605565b50505050905090810190601f16801561064d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561066757600080fd5b506106b46004803603604081101561067e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110ce565b604051808215151515815260200191505060405180910390f35b3480156106da57600080fd5b506106e361133d565b6040518082815260200191505060405180910390f35b34801561070557600080fd5b506107526004803603604081101561071c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061134e565b604051808215151515815260200191505060405180910390f35b34801561077857600080fd5b506107db6004803603604081101561078f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061154a565b6040518082815260200191505060405180910390f35b3480156107fd57600080fd5b506108066115d1565b005b34801561081457600080fd5b506108576004803603602081101561082b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611678565b005b6040805190810160405280600e81526020017f506172616469736520546f6b656e00000000000000000000000000000000000081525081565b601260ff16600a0a6311e1a3000281565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600560149054906101000a900460ff1680610a055750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610a5d5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610a6857600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610aa557600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ae057600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b3d57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b9a57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610bf757600080fd5b610c028585856117d0565b9150509392505050565b601281565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560149054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610d5b576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610def565b610d6e8382611b8f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601260ff16600a0a630c84588002601260ff16600a0a6311e1a300020381565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa057600080fd5b600560149054906101000a900460ff16151515610fbc57600080fd5b6000808214610fcb5781610fda565b601260ff16600a0a630c845880025b9050601260ff16600a0a630c845880028111151515610ff857600080fd5b61100283826108a3565b5082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f504454000000000000000000000000000000000000000000000000000000000081525081565b6000600560149054906101000a900460ff16806111385750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806111905750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561119b57600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111d857600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561121357600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561127057600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112cd57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561132a57600080fd5b6113348484611ba8565b91505092915050565b601260ff16600a0a630c8458800281565b60006113df82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dcc90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561162d57600080fd5b6001600560146101000a81548160ff021916908315150217905550611675600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006108a3565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561171057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561180d57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561185b57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156118e657600080fd5b61193882600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b8f90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119cd82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dcc90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a9f82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b8f90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000828211151515611b9d57fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611be557600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611c3357600080fd5b611c8582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b8f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d1a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dcc90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808284019050838110151515611de057fe5b809150509291505056fea165627a7a72305820da2193923c07dbc08b00472d10c1f362fec2d3f56c28a758be872d60123082080029000000000000000000000000ef96a6af4afa4abeb08f4c87cab593d2e0b7a447",
  "constructorArguments": "000000000000000000000000ef96a6af4afa4abeb08f4c87cab593d2e0b7a447"
}